[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Analysis Tools",
    "section": "",
    "text": "This material will cover four essential tools for data analysis, including SQL, R, Python, and Power BI. These tools serves both similar unique purpose and brings distinct strengths when working with data analysis process.\nSometimes this tools are not standalone, they can complement each other in a data analysis workflow. SQL is typically used for data extraction and initial data loading and cleaning. Python and R take over for more advanced analysis, modeling, and visualization and finally Power BI can then transform the insights into interactive and shareable reports.\n\nSQL\nR\nPython\nPower BI",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Home</span>"
    ]
  },
  {
    "objectID": "sql_creating_database.html",
    "href": "sql_creating_database.html",
    "title": "2  Creating Database",
    "section": "",
    "text": "2.1 Relational database\nA relational database is a collection of data organized into tables, where each table represents a specific entity or concept and these tables are related to each other through common fields, allowing you to establish connections and retrieve information based on those relationships.",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Creating Database</span>"
    ]
  },
  {
    "objectID": "sql_creating_database.html#relational-database",
    "href": "sql_creating_database.html#relational-database",
    "title": "2  Creating Database",
    "section": "",
    "text": "SQL (Structured Query Language)\nSQL is the standard language used to interact with relational databases. It provides commands for creating, modifying, and querying data.\n\n\nGeneral key components of a relational database:\n\nTables: A table in a relational database contains rows (records) and columns (fields).\nRows: This represent individual instances of an entity.\nColumns: This define the attributes or properties of an entity.\nPrimary key: A unique identifier for each row in a table.\nForeign key: A field in one table that references the primary key in another table to establish a relationship.",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Creating Database</span>"
    ]
  },
  {
    "objectID": "sql_creating_database.html#creating-and-managing-databases",
    "href": "sql_creating_database.html#creating-and-managing-databases",
    "title": "2  Creating Database",
    "section": "2.2 Creating and managing databases",
    "text": "2.2 Creating and managing databases\n\n\n\nSQL\n\n-- Syntax\nCREATE DATABASE databaseName;\n\n\nExample:\n\n\n\nSQL\n\n-- Create a database called LibraryDB\n1CREATE DATABASE LibraryDB;\n\n\n\n1\n\nLibraryDB will be the name of the database which can be referenced.\n\n\n\n\nany subsequent SQL statements executed will operate on the selected database until you change the context again.\n\n\n\n\n\n\nRemoving database\n\n\n\nExercise caution when executing this code. To permanently remove a database, the DROP DATABASEstatement must be used.\n\n\n\nSQL\n\n-- Remove the database completely.\nDROP DATABASE LibraryDB;\n\n\n\n\n\n2.2.1 Normalization:\nNormalization is a process used in SQL and database design to organize data in a way that reduces redundancy and improves data integrity. It ensures that each piece of data is stored only once, and relationships between data are correctly defined which makes the database more efficient, easier to maintain, and reduces the likelihood of anomalies when inserting, updating, or deleting data. See Section 21.1.1 for additional details.",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Creating Database</span>"
    ]
  },
  {
    "objectID": "sql_creating_database.html#creating-and-managing-tables",
    "href": "sql_creating_database.html#creating-and-managing-tables",
    "title": "2  Creating Database",
    "section": "2.3 Creating and managing tables",
    "text": "2.3 Creating and managing tables\n\n2.3.1 Creating a table:\nTo create a table in a relational database, you must use the CREATE TABLE statement followed by the table name, enclosed in parentheses. Inside the parentheses, you specify the column names and their corresponding data types, along with any additional constraints or attributes.\n\n\n\nSQL\n\n-- syntax\nCREATE TABLE tableName (\n  [column_name1] [data type] [Constraints],\n  [column_name2] [data type] [Constraints],\n  ...\n);\n\n\nExample:\n\n\n\nSQL\n\n-- Create Supplier table\nCREATE TABLE Supplier (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(100) NOT NULL,\n    contact_person VARCHAR(100) NOT NULL,\n    email VARCHAR(255),\n    phone VARCHAR(100) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\n-- Create Books table with Foreign key\nCREATE TABLE Books (\n    book_id INT SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    title VARCHAR(255) NOT NULL,\n    author VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    publication_year INT,\n    isbn VARCHAR(13) UNIQUE NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES supplier(supplier_id)\n);\n\n\n\n2.3.1.1 Data types\nData types in SQL define the kind of data that can be stored in a column of a table. They specify the format, range, and storage requirements for the data.\n\nCommon data types:\n\n\n\n\n\n  \n    \n      Name\n      Description\n      Example\n    \n  \n  \n    INTEGER or INT\nWhole numbers without decimal points\n123456\n    DECIMAL\nNumbers with decimal points\n12345.67\n    FLOAT\nNumbers with decimal points that can represent very large or very small values.\n1234.56\n    CHAR\nFixed-length character strings\nHello\n    VARCHAR\nVariable-length character strings\nHello! World\n    DATE\nDates\n2024-08-23\n    TIME\nTimes\n18:30:00\n    DATETIME\nDates and times\n2024-08-23 18:30:00\n  \n  \n  \n\n\n\n\nSee Figure 21.1 for a more detailed table.\n\n\n\n2.3.1.2 Table constriant\nTable constraints are rules that enforce data integrity and consistency within a database table. They are associated with columns to ensure that the data stored in those columns adheres to specific requirements.\n\nCommon types of table constraints:\nNOT NULL: This prevents null values in a column, ensuring that every row has a value for that column.\nUNIQUE: This is to ensure that all values in a column are unique, preventing duplicate entries.\nPRIMARY KEY: The primary key uniquely identifies each row in the table. it is like a combination of NOT NULL and UNIQUE constraints.\nFOREIGN KEY: This is created to references a primary key in another table, establishing a relationship between the two tables. This constraint ensures data consistency and prevents invalid references.\nCHECK: Defines a condition that must be met for any value inserted or updated in a column. For example, you could use a CHECK constraint to ensure that a numeric column is always positive. E.g ( unit_price DECIMAL(10, 2) CHECK (unit_price &gt;= 0) ).\n\n\n\n2.3.1.3 Understanding primary and foreign keys\nA primary key is a unique identifier for each record in a database table. Think of it as a kind of special label that helps you find one specific piece of information in a table quickly. For example, in a table of Books, the primary key can be book_id which is different for each book. This helps us tell the rows apart, even if other information (like names) might be the same.\n\n\n\n\n\n\nKey points about primary key:\n\n\n\n\nUniqueness: Each primary key must be unique; no two records can have the same primary key value.\nNon-null: A primary key cannot be empty (null). Every record must have a value for the primary key so that it can be identified.\n\n\n\nOn the other hand, a foreign key is a field (or collection of fields) in one table that refers to the primary key in another table. It creates a link between two tables. In other words, it is like a reference or a link between two tables.\nFor example, imagine we have two tables called: suppliers and books. In the books table, we want to keep track of which supplier supplied a book. To do this, we use the “supplier_id” from the suppliers table as a foreign key in the books table. This way, the foreign key in the books table points back to the primary key in the suppliers table, showing the relationship between the books and their suppliers.\n\n\n\n\n\n\nKey points about foreign key:\n\n\n\n\nPurpose: The main purpose of a foreign key is to ensure referential integrity between the two tables. This means that it helps maintain consistency and accuracy of data across related tables.\nRelationship: When you use foreign keys, you’re establishing relationships between different pieces of information stored in separate tables\n\n\n\n\n\n2.3.1.4 Quick illustration:\nSupplier Table:\n\n\n\n\nSupplier table\n  \n    \n      supplier_id (Primary Key)\n\n      contact_name\n      email\n    \n  \n  \n    1\nJohn\nJohn@example.com\n    2\nCane\ncane@example.com\n    3\nWill\nwill@example.com\n  \n  \n  \n\n\n\n\nBooks Table:\n\n\n\n\nBooks table\n  \n    \n      book_id (Primary Key)\n\n      title\n      supplier_id (Foreign Key)\n\n    \n  \n  \n    1\nThe Name of the Wind\n1\n    2\nThe Hobbit\n3\n    3\nA Game of Thrones\n2\n    4\nA Clash of Kings\n2\n  \n  \n  \n\n\n\n\n \n\n\n\n2.3.2 SQL table manipulation\n\n\nModifying a table\nThere are several modifications that can be performed using SQL to change the structure of an existing table in a database, such as adding, modifying, or deleting columns, and setting constraints.\n\nAdd a new column:\n\n\n\nSQL\n\n-- Add a new column to an existing table.\nALTER TABLE tableName\n  ADD column_name data_type;\n\n\n\nQuick illustration\n\n\n\nSQL\n\n-- Add a new column to an existing table.\nALTER TABLE tableName\n  ADD column3 VARCHAR;                                       \n\n\n\n\n\n\n\n\n\n\nTable\n  \n    \n      column1\n      column2\n    \n  \n  \n    One\n101\n    Two\n102\n    Three\n103\n  \n  \n  \n\n\n\n\n\n\nAltered table\n  \n    \n      column1\n      column2\n      column3\n    \n  \n  \n    One\n101\nNULL\n    Two\n102\nNULL\n    Three\n103\nNULL\n  \n  \n  \n\n\n\n\n\nExample:\n\n\n\nSQL\n\nALTER TABLE Books\n1  ADD number_of_pages INTEGER;\n\n\n\n1\n\nadd a new column named number_of_pages to the Books table with an integer data type using the ADD keyword\n\n\n\n\n\n\n\n\nModify an existing column:\n\n\n\nSQL\n\n-- Change the data type of an existing column.\nALTER TABLE tableName\nALTER COLUMN column_name TYPE new_data_type USING Expression;\n\n\nExample:\n\n\n\nSQL\n\nALTER TABLE Books\n1ALTER COLUMN number_of_pages TYPE SMALLINT USING number_of_pages::SMALLINT;\n\n\n\n1\n\nChange the data type of the number_of_pages from an integer to a SMALLINT.\n\n\n\n\n\n\n\nDrop a column:\n\n\n\nSQL\n\n-- Delete an existing column from a table.\nALTER TABLE tableName\nDROP COLUMN column_name;\n\n\n\nQuick illustration\n\n\n\nSQL\n\nALTER TABLE tableName\nDROP COLUMN column3;\n\n\n\n\n\n\n\n\n\n\nTable\n  \n    \n      column1\n      column2\n      column3\n    \n  \n  \n    One\n101\nNULL\n    Two\n102\nNULL\n    Three\n103\nNULL\n  \n  \n  \n\n\n\n\n\n\nAltered table\n  \n    \n      column1\n      column2\n    \n  \n  \n    One\n101\n    Two\n102\n    Three\n103\n  \n  \n  \n\n\n\n\n\nExample:\n\n\n\nSQL\n\nALTER TABLE Books\n1DROP COLUMN number_of_pages;\n\n\n\n1\n\nRemove the column number_of_pages from the Books table using the DROP keyword.",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Creating Database</span>"
    ]
  },
  {
    "objectID": "sql_creating_database.html#data-manipulation-language-dml",
    "href": "sql_creating_database.html#data-manipulation-language-dml",
    "title": "2  Creating Database",
    "section": "2.4 Data Manipulation Language (DML):",
    "text": "2.4 Data Manipulation Language (DML):\n\n2.4.1 Inserting data\nThis statement is used to insert new data into a table.\n\n\n\n\n\n\nWarning\n\n\n\nTo insert data into all columns of a table, specify the values in the correct order. Alternatively, you can target specific columns for data insertion.\n\n\n\n\n\nSQL\n\n-- Basic Syntax\nINSERT INTO tableName (column_name1, column_name2, ...)\n  VALUES (value1, value2, ...);\n\n\nExample:\n\n\n\nSQL\n\n-- Insert sample data into Books table\nINSERT INTO Books (title, author, genre, publication_year, isbn)\nVALUES \n('To Kill a Mockingbird', 'Harper Lee', 'Fiction', 1960, '9780446310789');\n\n\nYou can insert multiple rows of data at once by separating them with commas.\n\n\n\nSQL\n\n-- Insert Multiple Rows into the Books table\nINSERT INTO Books (title, author, genre, publication_year, isbn)\nVALUES \n('1984', 'George Orwell', 'science fiction', 1949, '9780451524935'),\n('Pride and Prejudice', 'Jane Austen', 'Romance', 1813, '9780141439518');\n\nSELECT * FROM Books;\n\n\n\n\n\n\n\n  \n    \n      book_id\n      title\n      author\n      genre\n      publication_year\n      isbn\n    \n  \n  \n    1\nTo Kill a Mockingbird\nHarper Lee\nFiction\n1960\n9780446310789\n    2\n1984\nGeorge Orwell\nscience fiction\n1949\n9780451524935\n    3\nPride and Prejudice\nJane Austen\nRomance\n1813\n9780141439518\n  \n  \n  \n\n\n\n\n\n2.4.1.1 Importing Data from a Flat File (CSV)\n\n\n\n\n\n\nPrepare the .csv file\n\n\n\n\nThe first row should contain column headers that match the target table’s column names.\nFields should be separated by commas (or another delimiter if specified).\nText fields should be enclosed in quotes if they contain special characters or commas.\n\n\n\n\n\n\nSQL\n\nCREATE TABLE TableName (\n    column1 PRIMARY KEY,\n    column2 INTEGER NOT NULL,\n    column3 DATE NOT NULL\n);\n\n\n\n\n\nSQL\n\n-- Import sample data from a csv file\nCOPY TableName (\n    column1, \n    column2, \n    column3, \n)\nFROM 'path/to/table.csv'\nDELIMITER ','\nCSV HEADER;\n\n\n   \n\n\n\n2.4.2 Updating data\nThis is used to change existing data in one or more rows of a table.\n\n\n\nSQL\n\n-- Basic Syntax\nUPDATE tableName\nSET column_name1 = new_value1, column_name2 = new_value2, ...\n1WHERE condition;\n\n\n\n1\n\nThe condition can be based on one or more columns.\n\n\n\n\n\nQuick illustration\n\n\n\nSQL\n\nUPDATE tableName\nSET column3 = 'Smartwatch'\n1WHERE column3 = 'Console';\n\n\n\n1\n\nChange the value in column 3 to ‘Smartwatch’ where the value is ‘Console’.\n\n\n\n\n\n\n\n\n\n\n\n\nOrignial table\n  \n    \n      column1\n      column2\n      column3\n    \n  \n  \n    1\nJan\nLaptop\n    2\nFeb\nSmartphone\n    3\nMar\nConsole\n  \n  \n  \n\n\n\n\n\n\nUpdated table\n  \n    \n      column1\n      column2\n      column3\n    \n  \n  \n    1\nJan\nLaptop\n    2\nFeb\nSmartphone\n    3\nMar\nSmartwatch\n  \n  \n  \n\n\n\n\n\nExample:\n\n\n\nSQL\n\nUPDATE Books\n1  SET genre = 'Science Fiction'\n  WHERE book_id = 2;\n\n\n\n1\n\nRename the book genre from ‘science fiction’ to ‘Science Fiction’ for the book with as id 2.\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThe WHERE clause is optional, but if you omit it, the UPDATE statement will modify all rows in the table, which is often not the desired outcome.\n\n\n\nSQL\n\nUPDATE Books\nSET genre = 'Science Fiction';\n\n\n\n\n\n\n\n\n\n\nData type compatibility:\n\n\n\nEnsure that the data type of the new value is compatible with the column’s data type. For example, you can’t update a VARCHAR column with an integer unless it’s converted properly.\n\n\n   \n\n\n\n2.4.3 Deleting data\nThis statement is used to delete rows from a table, allowing you to remove all records or specific rows based on a given condition.\n\n\n\n\n\n\nDeleting all rows\n\n\n\nExecuting DELETE FROM tableName; will remove all rows from the table. If you intend to delete all records, proceed with caution. Otherwise, use the WHERE clause to specify the rows you want to delete.\n\n\n\nSQL\n\nDELETE FROM tableName;\n\n\n\n\n\n\n\nSQL\n\n-- Basic Syntax:\nDELETE FROM tableName\n1WHERE condition;\n\n\n\n1\n\nSpecifies which rows should be deleted based on a condition relating to one or more columns.\n\n\n\n\n\nQuick illustration\n\n\n\nSQL\n\nDELETE FROM tableName\n1WHERE column1 = 2;\n\n\n\n1\n\nDelete the row where column1 has a value of 2.\n\n\n\n\n\n\n\n\n\n\n\n\nFull table\n  \n    \n      column1\n      column2\n      column3\n    \n  \n  \n    1\nJan\nLaptop\n    2\nFeb\nSmartphone\n    3\nMar\nConsole\n  \n  \n  \n\n\n\n\n\n\nDeleted row table\n  \n    \n      column1\n      column2\n      column3\n    \n  \n  \n    1\nJan\nLaptop\n    3\nMar\nConsole\n  \n  \n  \n\n\n\n\n\n\n\n\nSQL\n\nDELETE FROM Books\nWHERE book_id = 2;",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Creating Database</span>"
    ]
  },
  {
    "objectID": "sql_creating_database.html#drop-a-table",
    "href": "sql_creating_database.html#drop-a-table",
    "title": "2  Creating Database",
    "section": "2.5 Drop a table",
    "text": "2.5 Drop a table\nThis is used to completely remove a table from the database, including all of its data, structure, and any associated indexes, constraints, and triggers.\n\n\n\n\n\n\nIrreversible action:\n\n\n\nThe DROP TABLE statement removes the table entirely and there’s no way to undo this action unless you have a backup.\n\n\n\n\n\nSQL\n\n1DROP TABLE TableName;\n\n\n\n1\n\nRemove the table from the database.\n\n\n\n\n\n\n\n\n\n\nDependencies\n\n\n\nIf the table you are dropping is referenced by other objects (like foreign keys in other tables), the DROP TABLE statement may fail unless those dependencies are removed or the foreign keys are dropped or altered.\n\n\nExample:\n\n\n\nSQL\n\nDROP TABLE Books;",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Creating Database</span>"
    ]
  },
  {
    "objectID": "sql_creating_database.html#task",
    "href": "sql_creating_database.html#task",
    "title": "2  Creating Database",
    "section": "2.6 Task:",
    "text": "2.6 Task:\n\nCreate a database named coffeeStore and create the following tables:\n\n\nSalesReceipt\nProducts\nInventory\nCustomer\nStaff\nOutlet\n\n\nCreate a database named ProductDelivery and create the table:\n\n\nOrderDelivery\n\n\nCreate a database named ProductOrderStatus and create the table:\n\n\nOrderStatus\n\nDefine appropriate primary and foreign keys, data types, and NULL/NOT NULL constraints for each table. Import data from the .csv files in the database folder using your preferred method.",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Creating Database</span>"
    ]
  },
  {
    "objectID": "sql_statement.html",
    "href": "sql_statement.html",
    "title": "3  Data Query Statement",
    "section": "",
    "text": "3.0.1 SELECT\nThe SELECT statement in SQL is used to retrieve data from one or more tables in a database. The SELECT statement allows you to specify exactly which columns of data you want to retrieve, as well as to filter, sort, and group the results.\nSQL\n\n-- Basic Syntax\n1SELECT column_name1, column_name2, ...\n2FROM tableName;\n\n\n\n1\n\nThe names of columns to retrieve (include in the result).\n\n2\n\nThe name of the table to retrieve the records from.",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Query Statement</span>"
    ]
  },
  {
    "objectID": "sql_statement.html#aggregating-data",
    "href": "sql_statement.html#aggregating-data",
    "title": "3  Data Query Statement",
    "section": "3.1 Aggregating data",
    "text": "3.1 Aggregating data\n\nSummary statistics:\n\n\n\nSQL\n\nSELECT \n1    MIN(COALESCE(sales, order_quantity * unit_price)) AS minimum_sales,\n2    ROUND(AVG(COALESCE(sales, order_quantity * unit_price))) AS average_sales,\n3    MAX(COALESCE(sales, order_quantity * unit_price)) AS maximum_sales,\n4    SUM(COALESCE(sales, order_quantity * unit_price)) AS total_sales\nFROM OrderStatus;\n\n\n\n1\n\nThe lowest recorded sales value.\n\n2\n\nThe average sales.\n\n3\n\nThe highest recorded sales value.\n\n4\n\nThe total amount of sales.\n\n\n\n\n\n\n\n\n\n  \n    \n      minimum_sales\n      average_sales\n      maximum_sales\n      total_sales\n    \n  \n  \n    251.05\n551\n1351.89\n11029.82",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Query Statement</span>"
    ]
  },
  {
    "objectID": "sql_statement.html#conditional-statement-case-when",
    "href": "sql_statement.html#conditional-statement-case-when",
    "title": "3  Data Query Statement",
    "section": "3.2 Conditional statement: (CASE WHEN)",
    "text": "3.2 Conditional statement: (CASE WHEN)\nThe CASE statement in SQL Server is a conditional expression that allows you to perform if-then-else logic. It is used to return different values based on specific conditions, and it can be used in SELECT, UPDATE, INSERT, and ORDER BY clauses, among others.\n\nSimple CASE expression:\n\n\n\nSQL\n\n1CASE expression | column_name\n2    WHEN value1 THEN result1\n3    WHEN value2 THEN result2\n    ...  \n4    ELSE default_result\n5END\n\n\n\n1\n\nThe expression to evaluate or a column name.\n\n2\n\nValues1 that the expression is compared against.\n\n3\n\nThe result returned if the corresponding WHEN clause is true.\n\n4\n\n(Optional). The value returned if none of the WHEN conditions are met. If ELSE is not provided and no WHEN condition is met, NULL is returned.\n\n5\n\nTo indicate and end of the code block.\n\n\n\n\n\nCASE: This keyword initiates the conditional statement.\nWHEN: Each WHEN clause specifies a condition to evaluate.\nTHEN: The result that will be returned if the corresponding WHEN condition is true.\nELSE: This optional clause provides a default value if none of the WHEN conditions are met.\nEND: This keyword signifies the conclusion of the CASE statement.\n\n\n\n\n\n\n\nHow It works\n\n\n\nWhen a query containing a CASE statement is executed, SQL evaluates each condition sequentially from top to bottom:\n\nIf a condition evaluates to true, SQL returns the associated result and stops evaluating further conditions.\nIf no conditions are true and an ELSE clause is present, SQL returns the value specified in ELSE.\nIf no conditions are true and there is no ELSE clause, SQL returns NULL.\n\n\n\nExample:\n\n\n\nSQL\n\nSELECT \n    product_id,\n    CASE product_id\n        WHEN 1 THEN 'Product One'\n        WHEN 2 THEN 'Product Two'\n        WHEN 3 THEN 'Product Three'\n        WHEN 4 THEN 'Product Four'\n        ELSE 'Unknown Product'\n    END AS product_name\nFROM OrderStatus;\n\n\nTemporally create a new column called product_name with categories using the values in the product_id column.\n\n\n\n\n\n\nTerminating the CASE WHEN block\n\n\n\nMake sure you include the END keyword at the end of the conditional block.\n\n\n\n\n\n\n\n  \n    \n      product_id\n      product_name\n    \n  \n  \n    1\nProduct One\n    1\nProduct One\n    3\nProduct Three\n    2\nProduct Two\n    2\nProduct Two\n    2\nProduct Two\n    1\nProduct One\n    1\nProduct One\n    4\nProduct Four\n    1\nProduct One\n  \n  \n  \n\n\n\n\n\n\nSearched CASE expression:\nThe searched CASE expression allows for more complex conditions by using logical comparisons.\n\n\n\nSQL\n\nCASE\n1    WHEN condition1 THEN result1\n2    WHEN condition2 THEN result2\n    ...\n3    ELSE default_result\nEND\n\n\n\n1\n\ncondition1, condition2: Boolean expressions that are evaluated in order.\n\n2\n\nresult1 result2: The result returned if the corresponding condition is true.\n\n3\n\nELSE default_result: (Optional) The value returned if none of the WHEN conditions are met.\n\n\n\n\n\n\n\nSQL\n\nSELECT \n    order_quantity,\n    CASE\n        WHEN order_quantity &gt; 5 THEN 'Above 5 Quantities'\n        WHEN order_quantity &lt; 5 THEN 'Below 5 Quantities'\n        ELSE '5 Quantities'\n    END AS grouped_order_quantity\nFROM OrderStatus;\n\n\n\n\n\n\n\n  \n    \n      order_quantity\n      grouped_order_quantity\n    \n  \n  \n    5\n5 Quantities\n    8\nAbove 5 Quantities\n    5\n5 Quantities\n    9\nAbove 5 Quantities\n    7\nAbove 5 Quantities\n  \n  \n  \n\n\n\n\n\n\n3.2.0.1 Integration with aggregate functions:\nThe CASE statement can be used alongside aggregate functions like COUNT, SUM, AVG, etc., allowing for more complex data analysis:\n\n\n\nSQL\n\nSELECT \n  order_quantity,\n  COUNT(CASE WHEN order_quantity &gt; 5 THEN 1 END) AS high_qty_count\nFROM OrderStatus;\n\n\n\n\n\n\n\n\nIn an ORDER BY clause:\n\n\n\n\n\n\n\n\nSQL\n\nSELECT order_status, sales\nFROM OrderStatus\nORDER BY \n    CASE \n        WHEN order_status = 'Completed' THEN 1\n        WHEN order_status = 'Cancelled' THEN 0\n        ELSE 3\n    END;\n    \n\n\n\n\n\n\n\n  \n    \n      order_status\n      sales\n    \n  \n  \n    Cancelled\n1350\n    Completed\n250\n    Completed\n400\n    Completed\nNA\n    Completed\n675\n    Completed\n525\n    Completed\n750\n    Completed\nNA\n    Completed\n350\n    Completed\n300\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\nIn an UPDATE clause:\n\n\n\n\n\n\n\n\nSQL\n\nUPDATE OrderStatus\nSET unite_price =\n  CASE\n      WHEN unite_price &lt;= 51 THEN 55.56\n      WHEN unite_price &lt;= 76 THEN 80.75\n      ELSE unite_price\n  END;\n\n\n\n\n\n\n\n\n\n\n\nIn a JOIN condition:\n\n\n\n\n\n\n\n\nSQL\n\nSELECT FirstName, LastName, Salary\nFROM Employees\nWHERE \n    CASE\n        WHEN DepartmentID = 1 THEN Salary &gt; 50000\n        WHEN DepartmentID = 2 THEN Salary &gt; 40000\n        ELSE Salary &gt; 30000\n    END;",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Query Statement</span>"
    ]
  },
  {
    "objectID": "sql_statement.html#task",
    "href": "sql_statement.html#task",
    "title": "3  Data Query Statement",
    "section": "3.3 Task",
    "text": "3.3 Task\nUsing the LibraryBD, try your hands on some of these questions:\n\nList all books published after 2000, ordered by publication year from newest to oldest.\nList all members with their membership type, ordered alphabetically by last name.\nShow all borrowings that are currently overdue (assuming today’s date is ‘2024-08-25’).\nList all books and categorize them by genre, showing ‘Classic’ for books published before 1950, ‘Modern’ for books published between 1950 and 2000, and ‘Contemporary’ for books published after 2000.\nShow all members who have a ‘Premium’ membership and live in a specific city (e.g., ‘Anytown’).\nList all books with an ISBN number that starts with ‘978’, ordered by title.",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Query Statement</span>"
    ]
  },
  {
    "objectID": "sql_text_data.html",
    "href": "sql_text_data.html",
    "title": "4  Working with Text",
    "section": "",
    "text": "4.1 Basic string functions",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Working with Text</span>"
    ]
  },
  {
    "objectID": "sql_text_data.html#basic-string-functions",
    "href": "sql_text_data.html#basic-string-functions",
    "title": "4  Working with Text",
    "section": "",
    "text": "4.1.1 Concatenation\nWe can combine multiple strings into one using + sign or the CONCAT function.\n\n\n\nSQL\n\n1SELECT 'Hello' || ' ' || 'World' AS concat_string;\n-- or\n2SELECT CONCAT('Hello', ' ', 'World') AS concat_string;\n\n\n\n1\n\nJoin the string ‘Hello’ and ‘World’ together using the || sign.\n\n2\n\nJoin the string ‘Hello’ and ‘World’ together using the CONCAT function.\n\n\n\n\n\n\n\n\n\n  \n    \n      concat_string\n    \n  \n  \n    Hello World\n  \n  \n  \n\n\n\n\n\n\n\n\n\n  \n    \n      concat_string\n    \n  \n  \n    Hello World\n  \n  \n  \n\n\n\n\nExample:\n\n\n\nSQL\n\nSELECT \n  first_name,\n  last_name,\n1  CONTCAT(first_name, ' ', last_name) AS full_name\nFROM tableName;\n\n\n\n1\n\nConcatenate first & last name.\n\n\n\n\n\n\n\n\n\n  \n    \n      first_name\n      last_name\n      full_name\n    \n  \n  \n    Jane\nHapper\nJane Happer\n    John\nDoe\nJohn Doe\n    Collins\nJames\nCollins James\n  \n  \n  \n\n\n\n\n\n\n\n4.1.2 String length\n\n\n\nSQL\n\n1SELECT 'Hello World' AS string, LENGTH('Hello World') AS string_length;\n\n\n\n1\n\nGet the length i.e. number of items in the ‘Hello World’ string including the space using the LEN function.\n\n\n\n\n\n\n\n\n\n  \n    \n      string\n      string_length\n    \n  \n  \n    Hello World\n11",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Working with Text</span>"
    ]
  },
  {
    "objectID": "sql_text_data.html#extracting-parts-of-a-string",
    "href": "sql_text_data.html#extracting-parts-of-a-string",
    "title": "4  Working with Text",
    "section": "4.2 Extracting parts of a string",
    "text": "4.2 Extracting parts of a string\nTo return a specified number of characters (Length) from the left side of a string.\n\nLEFT:\n\n\n\nSQL\n\n1SELECT full_name, LEFT(full_name, 5) AS left_part\nFROM tableName\n\n\n\n1\n\nGet the first 5 characters\n\n\n\n\n\n\n\n\n\n  \n    \n      full_name\n      left_part\n    \n  \n  \n    Jane Happer\nJane \n    John Doe\nJohn \n    Collins James\nColli\n  \n  \n  \n\n\n\n\n\n\nRIGHT:\n\n\n\nSQL\n\n1SELECT full_name, RIGHT(full_name, 5) AS right_part\nFROM tableName\n\n\n\n1\n\nGet the last 5 characters\n\n\n\n\n\n\n\n\n\n  \n    \n      full_name\n      left_part\n    \n  \n  \n    Jane Happer\napper\n    John Doe\nn Doe\n    Collins James\nJames\n  \n  \n  \n\n\n\n\n\n\nSUBSTRING:\n\n\n\n\n\n\nStart & Length arguments\n\n\n\nThe SUBSTRING returns a specified portion of a string, starting at a specified position and with a specified length.\n\n\n\n\n\nSQL\n\n1SELECT address, SUBSTRING(address, 5, LENGTH(address)) AS sub_string\nFROM tableName\n\n\n\n1\n\nGet a sub of the address string starting from the 5 position to the last position.\n\n\n\n\n\n\n\n\n\n  \n    \n      address\n      sub_string\n    \n  \n  \n    Bwari, Abuja\nAbuja\n    Ikeja, Lagos\nLagos\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe start parameter in SUBSTRING is 1-based, which means the first character is at position 1.\nIf the length is omitted in SUBSTRING it returns all characters from the start position to the end of the string.\nIf the length is greater than the remaining string length, the function returns the remaining characters.",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Working with Text</span>"
    ]
  },
  {
    "objectID": "sql_text_data.html#character-index",
    "href": "sql_text_data.html#character-index",
    "title": "4  Working with Text",
    "section": "4.3 Character index",
    "text": "4.3 Character index\nTo find the position of a specific value in a string.\n\nPOSITION:\n\n\n\nSQL\n\n1SELECT address, POSITION(',', address) AS comma_position\nFROM tableName\n\n\n\n1\n\nFind the position of ‘,’ (comma) in the string\n\n\n\n\n\n\n\n\n\n  \n    \n      address\n      comma_position\n    \n  \n  \n    Bwari, Abuja\n6\n    Ikeja, Lagos\n6",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Working with Text</span>"
    ]
  },
  {
    "objectID": "sql_text_data.html#string-search",
    "href": "sql_text_data.html#string-search",
    "title": "4  Working with Text",
    "section": "4.4 String search",
    "text": "4.4 String search\n\n4.4.1 SIMILAR TO\n\n\n\nSQL\n\nSELECT * \nFROM tableName \n1WHERE column_name SIMILAR TO '%(word1|word2)%';\n\n\n\n1\n\nGet all records with text word1 or word2\n\n\n\n\nExample:\n\n\n\nSQL\n\nSELECT customer_id, category\nFROM tableName\n1WHERE category SIMILAR TO '%(VIP|Regular)%';\n\n\n\n1\n\nGet all customers in the VIP and Regular category.\n\n\n\n\n\n\n\n\n\n  \n    \n      customer_id\n      category\n    \n  \n  \n    1\nRegular\n    2\nVIP\n    3\nVIP\n    4\nRegular\n    5\nVIP",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Working with Text</span>"
    ]
  },
  {
    "objectID": "sql_text_data.html#string-replacement-and-removal",
    "href": "sql_text_data.html#string-replacement-and-removal",
    "title": "4  Working with Text",
    "section": "4.5 String replacement and removal",
    "text": "4.5 String replacement and removal\n\n4.5.1 REPLACE\nThis function replace occurrences of a substring within a string or the whole string.\n\n\n\nSQL\n\nSELECT \n1  current_health, REPLACE(current_health, 'K', 'Okay') AS updated_current_health\nFROM tableName\n\n\n\n1\n\nReplace all ‘K’ with the string ‘Okay’\n\n\n\n\n\n\n\n\n\n  \n    \n      current_health\n      updated_current_health\n    \n  \n  \n    Bad\nBad\n    Good\nGood\n    K\nOkay\n    Bad\nBad\n    Good\nGood\n    K\nOkay\n  \n  \n  \n\n\n\n\n\n\n4.5.2 Trim strings\n\nTRIM:\n\n\n\nSQL\n\nSELECT \n  ' Hello World ' AS with_whitespace\n1  TRIM(' Hello World ') AS trimmed_string;\n\n\n\n1\n\nRemove both leading and trailing spaces\n\n\n\n\n\n\n\n\n\n  \n    \n      with_whitespace\n      trimmed_string\n    \n  \n  \n    \"          Hello World        \"\n\"Hello World\"\n  \n  \n  \n\n\n\n\n\n\nLTRIM (left trim):\n\n\n\nSQL\n\nSELECT \n  ' Hello World ' AS with_whitespace\n1  LTRIM(' Hello World ') AS left_trimmed_string;\n\n\n\n1\n\nRemove leading spaces\n\n\n\n\n\n\n\n\n\n  \n    \n      with_whitespace\n      left_trimmed_string\n    \n  \n  \n    \"        Hello World        \"\n\"Hello World        \"\n  \n  \n  \n\n\n\n\n\n\nRTRIM (right trim):\n\n\n\nSQL\n\nSELECT \n  ' Hello World ' AS with_whitespace\n1  RTRIM(' Hello World ') AS right_trimmed_string;\n\n\n\n1\n\nRemove trailing spaces\n\n\n\n\n\n\n\n\n\n  \n    \n      with_whitespace\n      right_trimmed_string\n    \n  \n  \n    \"        Hello World        \"\n\"        Hello World\"",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Working with Text</span>"
    ]
  },
  {
    "objectID": "sql_text_data.html#string-formatting",
    "href": "sql_text_data.html#string-formatting",
    "title": "4  Working with Text",
    "section": "4.6 String formatting",
    "text": "4.6 String formatting\n\n4.6.1 UPPER and LOWER\n\n\n\nSQL\n\nSELECT  \n  first_name,\n1  UPPER(first_name) AS to_upper_case,\n2  LOWER(first_name) AS to_lower_case,\n3  UPPER(LEFT(column_name, 1)) + LOWER(SUBSTRING(column_name, 2, LEN(column_name))) AS to_title_case\n\n\n\n1\n\nConvert names to upper case.\n\n2\n\nConvert names to lower case.\n\n3\n\nConvert names to title case.\n\n\n\n\n\n\n\n\n\n  \n    \n      first_name\n      to_upper_case\n      to_lower_case\n      to_title_case\n    \n  \n  \n    hARPER\nHARPER\nharper\nHarper\n    jANE\nJANE\njane\nJane\n    cOLLINS\nCOLLINS\ncollins\nCollins\n    bROWN\nBROWN\nbrown\nBrown\n  \n  \n  \n\n\n\n\n\n\n4.6.2 FORMAT\n\n\n\nSQL\n\n-- Format a number with commas\nSELECT \n  1234567.89 AS number,\n1  FORMAT(1234567.89, 'N2') AS formatted_number;\n\n-- Format a date\nSELECT \n  GETDATE() AS current_date,\n2  FORMAT(GETDATE(), 'MMMM dd, yyyy') AS formatted_date;\n\n\n\n1\n\nFormat a number with commas.\n\n2\n\nFormat a date.\n\n\n\n\n\n\n\n\n\n  \n    \n      number\n      formatted_number\n    \n  \n  \n    1234568\n1,234,567.89\n  \n  \n  \n\n\n\n\n\n\n\n\n\n  \n    \n      current_date\n      forma_date\n    \n  \n  \n    2024-8-31\nAugust 31, 2024",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Working with Text</span>"
    ]
  },
  {
    "objectID": "sql_text_data.html#string-aggregation",
    "href": "sql_text_data.html#string-aggregation",
    "title": "4  Working with Text",
    "section": "4.7 String aggregation",
    "text": "4.7 String aggregation\nConcatenate values from multiple rows into a single string.\n\n\n\n\n\n  \n    \n      split_value\n    \n  \n  \n    Category One\n    Category Two\n    Category Three\n  \n  \n  \n\n\n\n\n\n\n\nSQL\n\n1SELECT STRING_AGG(product_category, ', ') AS aggregated_string\nFROM tableName;\n\n\n\n1\n\nCombine all categories (rows) into a single string and separated by a comma (,)\n\n\n\n\n\n\n\n\n\n  \n    \n      product_category\n    \n  \n  \n    Category One, Category Two, Category Three",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Working with Text</span>"
    ]
  },
  {
    "objectID": "sql_text_data.html#string-splitting",
    "href": "sql_text_data.html#string-splitting",
    "title": "4  Working with Text",
    "section": "4.8 String splitting",
    "text": "4.8 String splitting\nSplit a string into multiple rows based on a delimiter.\n\n\n\n\n\n  \n    \n      members\n    \n  \n  \n    John,Paul,George,Ringo\n  \n  \n  \n\n\n\n\n\n\n\nSQL\n\n1SELECT string_to_array('John,Paul,George,Ringo', ',') AS members;\n\n\n\n1\n\nSplit the ‘Hello,World,SQL,Server’ into multiple rows using the (,) comma.\n\n\n\n\n\n\n\n\n\n  \n    \n      members\n    \n  \n  \n    {John,Paul,George,Ringo}",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Working with Text</span>"
    ]
  },
  {
    "objectID": "sql_text_data.html#regular-expression-functions",
    "href": "sql_text_data.html#regular-expression-functions",
    "title": "4  Working with Text",
    "section": "4.9 Regular expression functions",
    "text": "4.9 Regular expression functions\n\n4.9.1 regexp_match\nThe regexp_match() function is used to match a string against a regular expression pattern.\n\n\n\nSQL\n\nSELECT regexp_match('Hello World', 'World') AS match_word;\n\n\n\n\n\n\n\n  \n    \n      match_word\n    \n  \n  \n    {World}\n  \n  \n  \n\n\n\n\nUsing Flags: We can perform a case-insensitive search, we can use the ‘i’ flag.\n\n\n\nSQL\n\n1SELECT regexp_match('hello world', 'WORLD', 'i') AS case_match_word;\n\n\n\n1\n\nGet the string ‘WORLD’ regardless of the case\n\n\n\n\n\n\n\n\n\n  \n    \n      case_match_word\n    \n  \n  \n    {World}\n  \n  \n  \n\n\n\n\n\n\n\nSQL\n\n1SELECT regexp_match('foo123bar', '\\d+') AS digits;\n\n\n\n1\n\nGet all digits in the “foo123bar” string.\n\n\n\n\n\n\n\n\n\n  \n    \n      digits\n    \n  \n  \n    {123}\n  \n  \n  \n\n\n\n\n\n\n\n4.9.2 regexp_replace\nThe regexp_replace() function is used to replace occurrences of a substring that matches a regular expression pattern with another substring.\n\n\n\nSQL\n\nSELECT regexp_replace('I love cats', 'cats', 'dogs');\n\n\n\n\n\nSQL\n\n1SELECT regexp_replace('The current year is 2023', '\\d+', '2024') AS year_description;\n\n\n\n1\n\nReplace the value 2023 with 2024 using the ‘’ pattern.\n\n\n\n\n\n\n\n\n\n  \n    \n      year_description\n    \n  \n  \n    The current year is 2024\n  \n  \n  \n\n\n\n\nSuppose we have a string with multiple spaces, such as “This is an example”, and we want to replace multiple spaces with a single space.\n\n\n\nSQL\n\n1SELECT regexp_replace('This   is   an example', '\\s+', ' ', 'g') AS single_space;\n\n\n\n1\n\nReplace multiple space with a single space.\n\n\n\n\n\n\n\n\n\n  \n    \n      single_space\n    \n  \n  \n    This is an example\n  \n  \n  \n\n\n\n\nIn this case, ‘+’ matches one or more whitespace characters, and using ‘g’ as a flag indicates that all occurrences should be replaced. This will return:",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Working with Text</span>"
    ]
  },
  {
    "objectID": "sql_text_data.html#task",
    "href": "sql_text_data.html#task",
    "title": "4  Working with Text",
    "section": "4.10 Task",
    "text": "4.10 Task",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Working with Text</span>"
    ]
  },
  {
    "objectID": "sql_date_data.html",
    "href": "sql_date_data.html",
    "title": "5  Working with Date",
    "section": "",
    "text": "5.1 Getting the current date and time",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Working with Date</span>"
    ]
  },
  {
    "objectID": "sql_date_data.html#getting-the-current-date-and-time",
    "href": "sql_date_data.html#getting-the-current-date-and-time",
    "title": "5  Working with Date",
    "section": "",
    "text": "Current date\n\n\n\nSQL\n\n1SELECT CURRENT_DATE AS current_date;\n\n\n\n1\n\nReturns the current date and time.\n\n\n\n\n\n\n\n\n\n  \n    \n      current_date\n    \n  \n  \n    2024-10-23\n  \n  \n  \n\n\n\n\n\n\nCurrent Time\n\n\n\nSQL\n\n1SELECT CURRENT_TIME AS current_time;\n\n\n\n1\n\nReturns the current date and time.\n\n\n\n\n\n\n\n\n\n  \n    \n      current_date\n    \n  \n  \n    11:28:02.918290+01:00\n  \n  \n  \n\n\n\n\n\n\nGet Timestamp:\n\n\n\nSQL\n\n1SELECT CURRENT_TIMESTAMP AS current_date_time;\n\n\n\n1\n\nReturns the current date and time (Timestamp).\n\n\n\n\n\n\n\n\n\n  \n    \n      high_precision_datetime\n    \n  \n  \n    2024-09-04 11:29:05.220186\n  \n  \n  \n\n\n\n\n\n\nMAKE_DATE:\nCreates a date from separate year, month, and day values:\n\n\n\nSQL\n\nSELECT \n  2023 AS year,\n  12 AS month,\n  31 AS day,\n  MAKE_DATE(2023, 12, 31) AS constructed_date;\n  \n\nSELECT \n  2023 AS year,\n  12 AS month,\n  31 AS day,\n  '2023-12-31'::DATE AS constructed_date;\n\n\n\n\n\n\n\n  \n    \n      year\n      month\n      day\n      constructed_date\n    \n  \n  \n    2023\n12\n31\n2023-12-31",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Working with Date</span>"
    ]
  },
  {
    "objectID": "sql_date_data.html#extracting-date-and-time-parts",
    "href": "sql_date_data.html#extracting-date-and-time-parts",
    "title": "5  Working with Date",
    "section": "5.2 Extracting date and time parts",
    "text": "5.2 Extracting date and time parts\nYou can extract specific parts of a date or time using the following functions:\n\nEXTRACT:\n\n\n\nSQL\n\nSELECT \n    CURRENT_TIMESTAMPAS current_date_time,\n1    EXTRACT(YEAR FROM CURRENT_TIMESTAMP) AS current_year,\n2    EXTRACT(QUARTER FROM order_timestamp) AS order_quarter,\n3    EXTRACT(MONTH FROM CURRENT_TIMESTAMP) AS current_month,\n4    EXTRACT(DAY FROM CURRENT_TIMESTAMP) AS current_day;\n\n\n\n1\n\nExtracts the year from the date.\n\n2\n\nExtracts the quarter from the date.\n\n3\n\nExtracts the month from the date.\n\n4\n\nExtracts the day of the month from the date.\n\n\n\n\n\n\n\n\n\n  \n    \n    \n    \n    \n    \n  \n  \n    \n      current_date_time\n      current_year\n      current_quarter\n      current_month\n      current_day\n    \n  \n  \n    2024-09-04 11:36:47.237779+01\n2024\n3\n9\n4\n  \n  \n  \n\n\n\n\n\n\nOthers:\n\n\n\nSQL\n\nSELECT \n    TO_CHAR(CURRENT_TIMESTAMP, 'FMMonth') AS full_month_name,\n    TO_CHAR(CURRENT_TIMESTAMP, 'Mon') AS abbrevaited_month_name,\n    TO_CHAR(CURRENT_TIMESTAMP, 'FMDay') AS order_weekday_name;\n\n\n\n\n\n\n\n  \n    \n      full_month_name\n      abbrevaited_month_name\n      order_weekday_name\n    \n  \n  \n    September\nSep\nWednesday",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Working with Date</span>"
    ]
  },
  {
    "objectID": "sql_date_data.html#date-formats-using-to_char",
    "href": "sql_date_data.html#date-formats-using-to_char",
    "title": "5  Working with Date",
    "section": "5.3 Date formats using TO_CHAR",
    "text": "5.3 Date formats using TO_CHAR\nThere are varieties of date formatting options that can be used with the TO_CHAR() function.\n\n5.3.1 ISO format\nFor example YYYY-MM-DD\n\n\n\nSQL\n\n1SELECT TO_CHAR('2024-09-13'::DATE, 'YYY-MM-DD') AS iso_date;\n\n\n\n1\n\nThis returns the date in ISO format\n\n\n\n\n\n\n\n\n\n  \n    \n      iso_date\n    \n  \n  \n    2024-09-13\n  \n  \n  \n\n\n\n\n\n\n5.3.2 Full date format\nfor example October 05, 2023\n\n\n\nSQL\n\n1SELECT TO_CHAR('2024-09-13'::DATE, 'FMMonth DD, YYYY') AS full_date;\n\n\n\n1\n\nThis will return the full month name followed by the day and year\n\n\n\n\n\n\n\n\n\n  \n    \n      full_date\n    \n  \n  \n    September 13, 2024\n  \n  \n  \n\n\n\n\n\n\n5.3.3 Short date format\n\n\n\nSQL\n\n1SELECT TO_CHAR('2024-09-13'::DATE, 'MM/DD/YYYY') AS date_diff_punct;\n\n\n\n1\n\nThis format is commonly used in the United States\n\n\n\n\n\n\n\n\n\n  \n    \n      date_diff_punct\n    \n  \n  \n    09/14/2024\n  \n  \n  \n\n\n\n\n\n\n5.3.4 Day and month name\nFor example “Thursday, October 05, 2023”\n\n\n\nSQL\n\n1SELECT TO_CHAR('2024-09-13'::DATE, 'Day, FMMonth DD, YYYY') AS date_name;\n\n\n\n1\n\nThis will return the day of the week followed by the full month name and year\n\n\n\n\n\n\n\n\n\n  \n    \n      date_name\n    \n  \n  \n    Friday   , September 13, 2024\n  \n  \n  \n\n\n\n\n\n\n5.3.5 Weekday and month name abbreviation\n\n\n\nSQL\n\n1SELECT TO_CHAR('2024-09-13'::DATE, 'Dy Mon DD YYYY') AS week_abbr;\n\n\n\n1\n\nThis will return an abbreviated weekday name along with an abbreviated month name.\n\n\n\n\n\n\n\n\n\n  \n    \n      date_name\n    \n  \n  \n    Fri Sep 13 2024\n  \n  \n  \n\n\n\n\n\n\n5.3.6 Quarter of year\n\n\n\nSQL\n\n1SELECT TO_CHAR('2024-09-13'::DATE, 'Q YYYY') AS quarter_year;\n\n\n\n1\n\nThis will return the quarter of the year along with the year\n\n\n\n\n\n\n\n\n\n  \n    \n      quarter_year\n    \n  \n  \n    3 2024",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Working with Date</span>"
    ]
  },
  {
    "objectID": "sql_date_data.html#date-and-time-calculations",
    "href": "sql_date_data.html#date-and-time-calculations",
    "title": "5  Working with Date",
    "section": "5.4 Date and time calculations",
    "text": "5.4 Date and time calculations\n\nADD:\nAdd a specified number of units (e.g., day, month, year) to a date.\n\n\n\nSQL\n\nSELECT \n  NOW() AS current_date_time,\n  NOW() + INTERVAL '10 days' AS date_plus_ten_days,\n  NOW() + INTERVAL '2 months' AS date_plus_two_months,\n  NOW() + INTERVAL '1 year' AS date_plus_one_year;\n\n\n\n\n\n\n\n  \n    \n      current_date_time\n      date_plus_seven_days\n      date_plus_two_months\n      date_plus_one_year\n    \n  \n  \n    2024-10-23 03:34:36.725867\n2024-10-30 03:34:36.725867\n2024-12-23 03:34:36.725867\n2025-10-23 03:34:36.725867\n  \n  \n  \n\n\n\n\n\n\nDATEDIFF:\nCalculates the difference between two dates in a specified unit.\n\n\n\nSQL\n\nSELECT \n    '2023-12-31'::date AS date, \n    ('2023-12-31'::date - '2023-01-01'::date) AS days_difference;\n\n\n\n\n\n\n\n  \n    \n      date\n      days_difference\n    \n  \n  \n    2023-12-31\n364",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Working with Date</span>"
    ]
  },
  {
    "objectID": "sql_date_data.html#date-and-time-comparison",
    "href": "sql_date_data.html#date-and-time-comparison",
    "title": "5  Working with Date",
    "section": "5.5 Date and time comparison",
    "text": "5.5 Date and time comparison\n\n\n\nSQL\n\nSELECT \n  CASE\n    WHEN '2024-08-26'::DATE &gt; '2024-08-01'::DATE THEN 'Later'\n    ELSE 'Earlier or Same'\n  END AS comparison_result;\n\n\n\n\n\n\n\n  \n    \n      comparison_result\n    \n  \n  \n    Later",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Working with Date</span>"
    ]
  },
  {
    "objectID": "sql_date_data.html#task",
    "href": "sql_date_data.html#task",
    "title": "5  Working with Date",
    "section": "5.6 Task",
    "text": "5.6 Task",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Working with Date</span>"
    ]
  },
  {
    "objectID": "sql_data_cleaning.html",
    "href": "sql_data_cleaning.html",
    "title": "6  Data Cleaning",
    "section": "",
    "text": "6.1 Using ALTER AND UPDATE\nCleaning a table in SQL often involves updating data to correct errors, standardize formats, or remove unwanted information. In MS SQL Server, you can use the ALTER and UPDATE statements to clean and manage data effectively.",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "sql_data_cleaning.html#using-alter-and-update",
    "href": "sql_data_cleaning.html#using-alter-and-update",
    "title": "6  Data Cleaning",
    "section": "",
    "text": "ALTER changes the structure of the table, which can help clean data indirectly by ensuring the columns are correctly defined.\nUPDATE directly modifies the data, making it essential for correcting and standardizing the actual values stored in the table.",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "sql_data_cleaning.html#whitespace",
    "href": "sql_data_cleaning.html#whitespace",
    "title": "6  Data Cleaning",
    "section": "6.2 Whitespace",
    "text": "6.2 Whitespace\n\n6.2.1 Removing leading whitespace\n\n\n\nSQL\n\nSELECT \n    ' MS SQL Server' AS leading_whitspace,\n1    LTRIM(' MS SQL Server') AS cleaned_string;\n\n\n\n1\n\nRemove the leading whitespace with the LTRIM function.\n\n\n\n\n\n\n\n\n\n  \n    \n      leading_whitspace\n      cleaned_string\n    \n  \n  \n    \"       MS SQL Server\nMS SQL Server\n  \n  \n  \n\n\n\n\n\n\n6.2.2 Removing trailing whitespace\n\n\n\nSQL\n\nSELECT \n    'MS SQL Server ' AS trailing_whitspace,\n1    RTRIM('MS SQL Server ') AS cleaned_string;\n\n\n\n1\n\nRemove the trailing whitespace with the RTRIM function.\n\n\n\n\n\n\n\n\n\n  \n    \n      trailing_whitspace\n      cleaned_string\n    \n  \n  \n    \"MS SQL Server      \"\nMS SQL Server\n  \n  \n  \n\n\n\n\n\n\n6.2.3 Removing whitespace\n\n\n\nSQL\n\nSELECT \n    ' MS SQL Server  ' AS both_lead_trail_whitspace,\n1    RTRIM(LTRIM('  MS SQL Server ')) AS cleaned_string,\n2    TRIM('  MS SQL Server  ') cleaned_string2;\n\n\n\n1\n\nRemove both leading & trailing whitespace with the LTRIM & RTRIM function.\n\n2\n\nRemove both leading & trailing whitespace with the TRIM\n\n\n\n\n\n\n\n\n\n  \n    \n      both_lead_trail_whitspace\n      cleaned_string\n      cleaned_string2\n    \n  \n  \n    \"     MS SQL Server    \"\nMS SQL Server\nMS SQL Server",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "sql_data_cleaning.html#null-values",
    "href": "sql_data_cleaning.html#null-values",
    "title": "6  Data Cleaning",
    "section": "6.3 NULL values",
    "text": "6.3 NULL values\n\n6.3.1 Replacing NULL values with a default Value\n\n\n\nSQL\n\nALTER TABLE tableName\n1ADD replace_values VARCHAR(50);\n\nUPDATE tableName\n2SET replace_values = COALESCE(status, 'Unknown');\n\n3SELECT status, replace_values FROM tableName;\n\n\n\n1\n\nAdd a new column called replace_values to the table.\n\n2\n\nReplace all NULL values with the string ‘Unknown’ if the row has a NULL value.\n\n3\n\nRetrieve the original column and the edited column.\n\n\n\n\n\n\n\n\n\n  \n    \n      status\n      replace_values\n    \n  \n  \n    Complete\nComplete\n    NULL\nUnknown\n    Panding\nPanding\n    Complete\nComplete\n    NULL\nUnknown",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "sql_data_cleaning.html#converting-string-to-title-case",
    "href": "sql_data_cleaning.html#converting-string-to-title-case",
    "title": "6  Data Cleaning",
    "section": "6.4 Converting string to title case",
    "text": "6.4 Converting string to title case\n\n\n\nSQL\n\nALTER TABLE tableName\n1ADD first_name_to_title_case VARCHAR(100);\n\n-- Converting a column to Proper Case (First letter uppercase)\nUPDATE tableName\n2SET first_name_to_title_case = INITCAP(LOWER(first_name));\n\n3SELECT first_name, first_name_to_title_case FROM tableName;\n\n\n\n1\n\nAdd a new column called first_name_to_title_case to the table.\n\n2\n\nUpdate the table with the title case converted strings.\n\n3\n\nRetrieve the original column and the edited column.\n\n\n\n\n\n\n\n\n\n  \n    \n      first_name\n      to_title_case\n    \n  \n  \n    hARPER\nHarper\n    jANE\nJane\n    cOLLINS\nCollins\n    bROWN\nBrown",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "sql_data_cleaning.html#splitting-a-combined-column",
    "href": "sql_data_cleaning.html#splitting-a-combined-column",
    "title": "6  Data Cleaning",
    "section": "6.5 Splitting a combined column",
    "text": "6.5 Splitting a combined column\nSplitting a Combined Column into Multiple Columns.\n\n\n\nSQL\n\n-- Create and add the first_name & last_name columns to the table.\nALTER TABLE tableName\n1ADD first_name VARCHAR(100),\n    last_name VARCHAR(100);\n\n-- Splitting a full name into first and last names\nUPDATE tableName\n2SET first_name = split_part(full_name, ' ', 1),\n    last_name = split_part(full_name, ' ', 2);\n  \n3SELECT full_name, first_name, last_name\nFROM tableName;\n\n\n\n1\n\nAdd a new column called first_name and first_name to the table.\n\n2\n\nExtract the first and last name from the full_name column.\n\n3\n\nRetrieve the full_name, and the extracted first and last names.\n\n\n\n\n\n\n\n\n\n  \n    \n      full_name\n      first_name\n      last_name\n    \n  \n  \n    Jane Happer\nJane\nHapper\n    John Doe\nJohn\nDoe\n    Collins James\nCollins\nJames",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "sql_data_cleaning.html#replacing-values",
    "href": "sql_data_cleaning.html#replacing-values",
    "title": "6  Data Cleaning",
    "section": "6.6 Replacing values",
    "text": "6.6 Replacing values\nCorrecting Misspelled Data.\n\n\n\nSQL\n\n-- Create and add correct_status column to the table.\nALTER TABLE tableName\n1ADD correct_status VARCHAR(100);\n\n-- Converting a date stored as a string to a DATE data type\nUPDATE tableName\n2SET correct_status = REPLACE(status, 'Panding', 'Pending');\n   \n3SELECT status, correct_status FROM tableName;\n\n\n\n1\n\nAdd a new column called correct_status to the table.\n\n2\n\nReplace the string ‘Panding’ with ‘Pending’\n\n3\n\nRetrieve the original status and the correct_status column.\n\n\n\n\n\n\n\n\n\n  \n    \n      status\n      correct_status\n    \n  \n  \n    Complete\nComplete\n    Unknown\nUnknown\n    Panding\nPending\n    Complete\nComplete\n    Unknown\nUnknown\n  \n  \n  \n\n\n\n\n\nFiltering out characters:\n\n\n\nSQL\n\n-- Create and add correct_status column to the table.\nALTER TABLE tableName\n1ADD cleaned_change_period VARCHAR(100);\n\n-- Converting a date stored as a string to a DATE data type\nUPDATE tableName\n2SET cleaned_change_period = REPLACE(REPLACE(REPLACE(change_period, '-', 'on'), '(', ''), ')', '');\n  \n\n3SELECT change_period, cleaned_change_period FROM tableName;\n\n\n\n1\n\nAdd the column called cleaned_change_period to the table.\n\n2\n\nRemove characters such as ‘(’, ‘)’, and replace the ‘-’ with ‘on’\n\n3\n\nRetrieve the original change_period and the cleaned_change_period column.\n\n\n\n\n\n\n\n\n\n  \n    \n      change_period\n      cleaned_change_period\n    \n  \n  \n    (Year - Year)\nYear on Year\n    (Month - Month)\nMonth on Month\n    (Year - Year)\nYear on Year",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "sql_data_cleaning.html#handling-date-formats",
    "href": "sql_data_cleaning.html#handling-date-formats",
    "title": "6  Data Cleaning",
    "section": "6.7 Handling Date Formats",
    "text": "6.7 Handling Date Formats\nHandling Inconsistent Date Formats.\n\n\n\nSQL\n\n-- Create and add cleaned_date column to the table.\nALTER TABLE tableName\n1ADD cleaned_date DATE;\n\n-- Converting a date stored as a string to a DATE data type\nUPDATE tableName; \n2SET cleaned_date = REPLACE(order_date, 'Date: ', '');\n\n-- Convert to date data-type\nALTER TABLE tableName\nALTER COLUMN cleaned_date TYPE DATE USING cleaned_date::DATE;  \n\n\n3SELECT order_date, cleaned_date FROM tableName;\n\n\n\n1\n\nAdd a new column called cleaned_date to the data.\n\n2\n\nRemove the string ‘Date:’ and change the order_date data type to DATE.\n\n3\n\nRetrieve the original order_date and the cleaned_date column.\n\n\n\n\n\n\n\n\n\n  \n    \n      order_date\n      cleaned_date\n    \n  \n  \n    Date: 2024-05-12\n2024-05-12\n    Date: 2024-06-15\n2024-06-15\n    Date: 2024-07-20\n2024-07-20\n  \n  \n  \n\n\n\n\n   \n\n\n\n\n\n\nRemoving duplicates records\n\n\n\n\n\n\nIdentify Duplicates\n\n\n\nSQL\n\nSELECT column1, column2, COUNT(*)\nFROM tableName\nGROUP BY column1, column2\nHAVING COUNT(*) &gt; 1;\n\n\n\n\nRemove Duplicates\n\n\n\nSQL\n\nWITH duplicates AS (\n    SELECT \n        column_id,\n        ROW_NUMBER() OVER (PARTITION BY column1, column2, ORDER BY column_id) AS row_num\n    FROM \n        tableName\n)\nDELETE FROM tableName\nWHERE column_id IN (\n    SELECT column_id FROM duplicates WHERE row_num &gt; 1\n);",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "sql_data_cleaning.html#task",
    "href": "sql_data_cleaning.html#task",
    "title": "6  Data Cleaning",
    "section": "6.8 Task",
    "text": "6.8 Task",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "sql_group_windows_function.html",
    "href": "sql_group_windows_function.html",
    "title": "7  Grouping Data",
    "section": "",
    "text": "7.1 GROUP BY\nThe GROUP BY clause is used to arrange identical data into groups. It is often used with aggregate functions such as COUNT(), SUM(), AVG(), MAX(), and MIN() to perform operations on each group of data.\nSQL\n\n-- Basic Syntax\n\n1SELECT column_name1, aggregate_function(column_column2)\nFROM table_name\n2GROUP BY column_name1;\n\n\n\n1\n\naggregate_function like SUM(), AVG(), MAX() etc.\n\n2\n\nThe name of the column to group the table by.",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Grouping Data</span>"
    ]
  },
  {
    "objectID": "sql_group_windows_function.html#group-by",
    "href": "sql_group_windows_function.html#group-by",
    "title": "7  Grouping Data",
    "section": "",
    "text": "Key concepts of the GROUP BY clause\n\n\n\n\n\n\nThe GROUP BY clause groups rows that have the same values in specified columns into summary rows.\nFunctions such as COUNT, SUM, AVG, MAX, and MIN are commonly used with GROUP BY to perform calculations on each group.\nThe HAVING clause is used to filter groups based on conditions, similar to how WHERE filters rows.\n\n\n\n\n\nExample Table: Sales\n\n\n\n\n\n  \n    \n      sales_id\n      store_id\n      product_id\n      sales_date\n      amount\n    \n  \n  \n    1\n101\n201\n2024-01-01\n100\n    2\n101\n202\n2024-01-01\n150\n    3\n102\n201\n2024-01-02\n200\n    4\n103\n202\n2024-01-02\n250\n    5\n101\n201\n2024-01-03\n300\n    6\n103\n201\n2024-01-03\n150\n    7\n102\n202\n2024-01-04\n200\n    8\n103\n201\n2024-01-04\n250\n    9\n101\n202\n2024-01-05\n350\n    10\n103\n201\n2024-01-05\n250\n    11\n102\n202\n2024-01-06\n200\n    12\n103\n202\n2024-01-06\n350\n  \n  \n  \n\n\n\n\n\n\nQuick illustration of GROUP BY:\n\n\n\nSQL\n\n-- To get the number of sales per store\n1SELECT sales_id, SUM(amount) AS total_amount\nFROM sales\n2GROUP BY store_id;\n\n\n\n1\n\nSum up all the total amount of sales per store\n\n2\n\nGroup all rows by each unique store id.\n\n\n\n\n\n\n\n\n\n\n\n\nFull Records\n  \n    \n      store_id\n      amount\n    \n  \n  \n    101\n100\n    101\n150\n    101\n300\n    101\n350\n    102\n200\n    102\n200\n    102\n200\n    103\n250\n    103\n150\n    103\n250\n    103\n250\n    103\n350\n  \n  \n  \n\n\n\n\n\n\nGrouped Records\n  \n    \n      store_id\n      total_amount\n    \n  \n  \n    101\n900\n    102\n600\n    103\n1250\n  \n  \n  \n\n\n\n\n\n\n\n7.1.1 Simple GROUP BY with COUNT()\n\n\n\nSQL\n\n-- To count the number of sales per store\n1SELECT sales_id, COUNT(*) AS total_number_of_sales\nFROM sales\n2GROUP BY store_id;\n\n\n\n1\n\nCount the number of sales made in each group.\n\n2\n\nGroup all rows by each unique store id.\n\n\n\n\n\n\n\n\n\n  \n    \n      store_id\n      total_number_of_sales\n    \n  \n  \n    101\n4\n    102\n3\n    103\n5\n  \n  \n  \n\n\n\n\n\n\n\n7.1.2 GROUP BY with multiple columns\nGrouping by multiple columns can give more granular summaries.\n\n\n\nSQL\n\n-- count the number of sales per store and product:\n1SELECT store_id, product_id, COUNT(*) AS total_number_of_sales\nFROM sales\n2GROUP BY store_id, product_id;\n\n\n\n1\n\nCount the number of sales made in each group.\n\n2\n\nGroup all rows by each unique store and product id.\n\n\n\n\n\n\n\n\n\n  \n    \n      store_id\n      product_id\n      total_number_of_sales\n    \n  \n  \n    101\n201\n2\n    101\n202\n2\n    102\n201\n1\n    103\n202\n2\n    103\n201\n3\n    102\n202\n2\n  \n  \n  \n\n\n\n\n\n\n\n7.1.3 Using aggregate functions\n\n\n\nSQL\n\n-- Calculate the average amount of sales per store:\nSELECT store_id, \n    COUNT(amount) AS count,\n    MIN(amount) AS, lowest_amount,\n1    AVG(amount) AS average_amount,\n    MAX(amount) AS highest_amount,\n    SUM(amount) AS total_anount\nFROM sales\n2GROUP BY store_id;\n\n\n\n1\n\nGet the average of all the amount of sales per store.\n\n2\n\nGroup all rows by each unique store id.\n\n\n\n\n\n\n\n\n\n  \n    \n      store_id\n      count\n      lowest_amount\n      average_amount\n      highest_amount\n      total_amount\n    \n  \n  \n    101\n4\n100\n225\n350\n900\n    102\n3\n200\n200\n200\n600\n    103\n5\n150\n250\n350\n1250\n  \n  \n  \n\n\n\n\n\n\n\n7.1.4 HAVING clause with GROUP BY\nThe HAVING clause is used to filter groups after the aggregation.\n\n7.1.4.1 Quick Illustration of using HAVING\n\n\n\nSQL\n\nSELECT sales_id, SUM(amount) AS total_amount\nFROM sales\n1GROUP BY store_id;\n\nSELECT sales_id, SUM(amount) AS total_amount\nFROM sales\nGROUP BY store_id;\n2HAVING SUM(amount) &gt; 600;\n\n\n\n1\n\nGroup the table using the store_id\n\n2\n\nFilter only stores with total_amount greater than 600\n\n\n\n\n\n\n\n\n\n\n\n\nGrouped Records\n  \n    \n      store_id\n      total_amount\n    \n  \n  \n    101\n900\n    102\n600\n    103\n1250\n  \n  \n  \n\n\n\n\n\n\nFiltered Records\n  \n    \n      store_id\n      total_amount\n    \n  \n  \n    101\n900\n    103\n1250\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\n\nWhy HAVING when there is WHERE\n\n\n\nHAVING is used because WHERE can’t filter on aggregate functions (like SUM, AVG, COUNT) that are often used with grouped data.\n\n\nExample:\n\n\n\nSQL\n\n-- find stores with total sales greater than N300:\n1SELECT store_id, SUM(amount) AS total_sales_amount\nFROM sales\n2GROUP BY store_id\n3HAVING SUM(amount) &gt; 300;\n\n\n\n1\n\nSum up all the total amount of sales per store.\n\n2\n\nGroup all rows by each unique store id.\n\n3\n\nFilter all total_sales_amount greater than 300.\n\n\n\n\n\n\n\n\n\n  \n    \n      store_id\n      total_sales_amount\n    \n  \n  \n    101\n900\n    102\n600\n    103\n1250\n  \n  \n  \n\n\n\n\n\n\n\n\n7.1.5 GROUP BY with DATE\nYou can also group by date or time intervals.\n\n\n\nSQL\n\n-- find the total sales per day:\n1SELECT sales_date, SUM(amount) AS daily_sales\nFROM sales\n2GROUP BY sales_date;\n\n\n\n1\n\nSum up all the total amount of sales per day.\n\n2\n\nGroup all rows by each unique date (day).\n\n\n\n\n\n\n\n\n\n  \n    \n      sales_date\n      daily_sales\n    \n  \n  \n    2024-01-01\n250\n    2024-01-02\n450\n    2024-01-03\n450\n    2024-01-04\n450\n    2024-01-05\n600\n    2024-01-06\n550\n  \n  \n  \n\n\n\n\n\n\n7.1.6 GROUP BY with expressions\nYou can also use expressions or functions in GROUP BY\n\n\n\nSQL\n\n-- Group by the year of the sales date:\n\nSELECT  \n1    EXTRACT(DAY FROM sales_date) AS sales_day,\n2    SUM(amount) AS daily_sales\nFROM sales\n3GROUP BY EXTRACT(DAY FROM sales_date);\n\n\n\n1\n\nExtract the day from the date.\n\n2\n\nSum up all the total amount of sales per day.\n\n3\n\nGroup all rows by each unique day.\n\n\n\n\n\n\n\n\n\n  \n    \n      sales_day\n      daily_sales\n    \n  \n  \n    1\n250\n    2\n450\n    3\n450\n    4\n450\n    5\n600\n    6\n550\n  \n  \n  \n\n\n\n\n\n\n7.1.7 GROUP BY with ORDER BY\nYou can order the results of a GROUP BY query by the aggregated values.\n\n\n\nSQL\n\nSELECT \n    store_id, \n1    SUM(amount) AS total_sales_amount\nFROM sales\n2GROUP BY store_id\n3ORDER BY total_sales_amount DESC;\n\n\n\n1\n\nSum up all the total amount of sales per store.\n\n2\n\nGroup all rows by each unique store id.\n\n3\n\nSort the aggregated output by the total sales amount in descending order.\n\n\n\n\n\n\n\n\n\n  \n    \n      store_id\n      total_sales_amount\n    \n  \n  \n    103\n1250\n    101\n900\n    102\n600\n  \n  \n  \n\n\n\n\n\n\n7.1.8 Grouping with a conditional aggregate\nTo calculate the number of sales and the total amount for each store, but only for sales over $100:\n\n\n\nSQL\n\nSELECT\n1    COUNT(CASE WHEN amount &gt; 100 THEN 1 END) AS high_value_sales_count,\n2    SUM(CASE WHEN amount &gt; 100 THEN amount ELSE 0 END) AS high_value_total_amount\nFROM sales\nGROUP BY store_id;\n\n\n\n1\n\nIf sales amount is greater than 100 count it.\n\n2\n\nIf sales amount is greater than 100 then add sales amount else add zero.\n\n\n\n\n\n\n\n\n\n  \n    \n      store_id\n      high_value_sales_count\n      high_value_total_amount\n    \n  \n  \n    101\n3\n800\n    102\n3\n600\n    103\n5\n1250\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\nGroup by Summary\n\n\n\n\nIt is often used with aggregate functions to perform calculations on each group.\nHAVING clause can be used to filter groups after the aggregation.\nORDER BY can be combined with GROUP BY to sort the results by the aggregated values.",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Grouping Data</span>"
    ]
  },
  {
    "objectID": "sql_group_windows_function.html#window-function",
    "href": "sql_group_windows_function.html#window-function",
    "title": "7  Grouping Data",
    "section": "7.2 Window Function",
    "text": "7.2 Window Function\nWindow functions perform calculations across a set of table rows related to the current row. Unlike aggregate functions, which return a single value after grouping rows, window functions return multiple rows with calculated values.\n\n\n\nSQL\n\nSELECT \n  col_name1, \n1  window_function() OVER ([PARTITION BY col_name2] [ORDER BY col_name3]) AS alias_name\nFROM table_name;\n\n\n\n1\n\nDefine the window function and how it should be grouped and sorted.\n\n\n\n\n\n\n\n\n\n\nThe Key Concepts of Window Function\n\n\n\n\nOVER() Clause defines the window of rows the function operates on.\nPARTITION BY divides the result set into partitions (like a GROUP BY).\nORDER BY defines the order of rows within each partition.\n\n\n\n\n7.2.1 ROW_NUMBER\nThis function will assign a unique row number within a partition.\n\n\nQuick illustration of window function\nA Simple example of how window function works.\n\n\n\nSQL\n\nSELECT\n  month, \n  product, \n  amount,\n  ROW_NUMBER() OVER (PARTITION BY month ORDER BY amount DESC) AS row_number\nFROM sales;\n\n\n\n\n\n\n\n  \n    \n    \n    \n    \n  \n  \n    \n      month\n      product\n      amount\n      row_number\n    \n  \n  \n    Jan\nShoe\n120\n1\n    Jan\nShoe\n100\n2\n    Jan\nCup\n20\n3\n    Feb\nT-Shirt\n80\n1\n    Feb\nT-Shirt\n70\n2\n    Feb\nCup\n30\n3\n  \n  \n  \n\n\n\n\n \n\nUnordered\n\n\n\nSQL\n\nSELECT \n    store_id, \n    sales_date, \n    amount,\n1    ROW_NUMBER() OVER (PARTITION BY store_id) AS row_num\nFROM sales;\n\n\n\n1\n\nPartition the sales table by the unique store id then get the row number for each partition.\n\n\n\n\n\n\n\n\n\n  \n    \n      store_id\n      sales_date\n      amount\n      row_num\n    \n  \n  \n    101\n2024-01-01\n100\n1\n    101\n2024-01-01\n150\n2\n    102\n2024-01-02\n200\n1\n    103\n2024-01-02\n250\n1\n    101\n2024-01-03\n300\n3\n    103\n2024-01-03\n150\n2\n    102\n2024-01-04\n200\n2\n    103\n2024-01-04\n250\n3\n    101\n2024-01-05\n350\n4\n    103\n2024-01-05\n250\n4\n    102\n2024-01-06\n200\n3\n    103\n2024-01-06\n350\n5\n  \n  \n  \n\n\n\n\n\n\nOrdered\n\n\n\nSQL\n\nSELECT \n    store_id, \n    sales_date, \n    amount,\n1    ROW_NUMBER() OVER (PARTITION BY store_id ORDER BY sales_date) AS row_num\nFROM sales;\n\n\n\n1\n\nPartition the sales table by the unique store id, then order by the sales date. Then get the row number by the partition. In other words, the rows are numbered sequentially for each store_id based on sales_date.\n\n\n\n\n\n\n\n\n\n  \n    \n      store_id\n      sales_date\n      amount\n      row_num\n    \n  \n  \n    101\n2024-01-01\n100\n1\n    101\n2024-01-01\n150\n2\n    101\n2024-01-03\n300\n3\n    101\n2024-01-05\n350\n4\n    102\n2024-01-02\n200\n1\n    102\n2024-01-04\n200\n2\n    102\n2024-01-06\n200\n3\n    103\n2024-01-02\n250\n1\n    103\n2024-01-03\n150\n2\n    103\n2024-01-04\n250\n3\n    103\n2024-01-05\n250\n4\n    103\n2024-01-06\n350\n5\n  \n  \n  \n\n\n\n\n  \n\n\n\n7.2.2 Aggregate function: SUM() as a Window Function\n\n7.2.2.1 Quick Illustration of window aggregate functions\n\n\n\nSQL\n\nSELECT\n  month, \n  product, \n  amount,\n1  SUM(amount) OVER (PARTITION BY month) AS total_amount\nFROM tableName;\n\n\n\n1\n\nGet the total amount of each partition.\n\n\n\n\n\n\n\n\n\n  \n    \n    \n    \n    \n  \n  \n    \n      month\n      product\n      amount\n      total_amount\n    \n  \n  \n    Jan\nShoe\n100\n240\n    Jan\nShoe\n120\n240\n    Jan\nCup\n20\n240\n    Feb\nT-Shirt\n80\n180\n    Feb\nT-Shirt\n70\n180\n    Feb\nCup\n30\n180\n  \n  \n  \n\n\n\n\n\n\n\nSQL\n\nSELECT \n    store_id, \n    sales_date, \n    amount,\n    SUM(amount) OVER (PARTITION BY store_id ORDER BY sales_date) AS running_total\nFROM sales;\n\n\n\n\n\n\n\n  \n    \n      store_id\n      sales_date\n      amount\n      running_total\n    \n  \n  \n    101\n2024-01-01\n100\n250\n    101\n2024-01-01\n150\n250\n    101\n2024-01-03\n300\n550\n    101\n2024-01-05\n350\n900\n    102\n2024-01-02\n200\n200\n    102\n2024-01-04\n200\n400\n    102\n2024-01-06\n200\n600\n    103\n2024-01-02\n250\n250\n    103\n2024-01-03\n150\n400\n    103\n2024-01-04\n250\n650\n    103\n2024-01-05\n250\n900\n    103\n2024-01-06\n350\n1250\n  \n  \n  \n\n\n\n\n  \n\n\n\n7.2.3 RANK\nRanks the rows within a partition. Ties result in the same rank, but with gaps in the sequence.\n\n7.2.3.1 Quick Illustration\n\n\n\nSQL\n\nSELECT \n    month, \n    product,\n    amount\n    RANK() OVER (PARTITION BY month ORDER BY amount DESC) AS rank\nFROM tableName;\n\n\n\n\n\n\n\n  \n    \n    \n    \n    \n  \n  \n    \n      month\n      product\n      amount\n      rank\n    \n  \n  \n    Jan\nShoe\n120\n1\n    Jan\nShoe\n120\n1\n    Jan\nShoe\n100\n3\n    Jan\nCup\n20\n4\n    Feb\nT-Shirt\n80\n1\n    Feb\nT-Shirt\n70\n2\n    Feb\nCup\n30\n3\n    Feb\nCup\n30\n3\n  \n  \n  \n\n\n\n\nExample:\n\n\n\nSQL\n\nSELECT \n    store_id, \n    amount,\n    RANK() OVER (PARTITION BY store_id ORDER BY amount DESC) AS rank\nFROM sales;\n\n\n\n\n\n\n\n  \n    \n      store_id\n      amount\n      rank\n    \n  \n  \n    101\n350\n1\n    101\n300\n2\n    101\n150\n3\n    101\n100\n4\n    102\n200\n1\n    102\n200\n1\n    102\n200\n1\n    103\n350\n1\n    103\n250\n2\n    103\n250\n2\n    103\n250\n2\n    103\n150\n5\n  \n  \n  \n\n\n\n\nIf two rows have the same amount within the same store_id, they will get the same rank, and the next rank will be skipped.\n  \n\n\n\n7.2.4 DENSE_RANK\nSimilar to RANK(), but without gaps in the ranking sequence.\n\n7.2.4.1 Quick Illustration\n\n\n\nSQL\n\nSELECT \n    month, \n    product,\n    amount\n    DENSE_RANK() OVER (PARTITION BY month ORDER BY amount DESC) AS dense_rank\nFROM tableName;\n\n\n\n\n\n\n\n  \n    \n    \n    \n    \n  \n  \n    \n      month\n      product\n      amount\n      dense_rank\n    \n  \n  \n    Jan\nShoe\n120\n1\n    Jan\nShoe\n120\n1\n    Jan\nShoe\n100\n2\n    Jan\nCup\n20\n3\n    Feb\nT-Shirt\n80\n1\n    Feb\nT-Shirt\n70\n2\n    Feb\nCup\n30\n3\n    Feb\nCup\n30\n3\n  \n  \n  \n\n\n\n\nExample:\n\n\n\nSQL\n\nSELECT \n    store_id, \n    amount,\n    DENSE_RANK() OVER (PARTITION BY store_id ORDER BY amount DESC) AS dense_rank\nFROM sales;\n\n\n\n\n\n\n\n  \n    \n      store_id\n      amount\n      rank\n    \n  \n  \n    101\n350\n1\n    101\n300\n2\n    101\n150\n3\n    101\n100\n4\n    102\n200\n1\n    102\n200\n1\n    102\n200\n1\n    103\n350\n1\n    103\n250\n2\n    103\n250\n2\n    103\n250\n2\n    103\n150\n3\n  \n  \n  \n\n\n\n\nThis will rank rows without gaps, even if there are ties.\n  \n\n\n\n7.2.5 NTILE\nDivides the result set into a specified number of buckets.\n\n7.2.5.1 Quick illustration\n\n\n\nSQL\n\nSELECT \n    month, \n    product, \n    amount,\n    NTILE(3) OVER (ORDER BY amount DESC) AS bucket\nFROM tableName;\n\n\n\n\n\n\n\n  \n    \n    \n    \n    \n  \n  \n    \n      month\n      product\n      amount\n      bucket\n    \n  \n  \n    Jan\nCup\n20\n1\n    Feb\nCup\n30\n1\n    Feb\nCup\n30\n1\n    Feb\nT-Shirt\n70\n2\n    Feb\nT-Shirt\n80\n2\n    Jan\nShoe\n100\n2\n    Jan\nShoe\n120\n3\n    Jan\nShoe\n120\n3\n  \n  \n  \n\n\n\n\nExample:\n\n\n\nSQL\n\nSELECT \n    sales_id, \n    store_id, \n    amount,\n    NTILE(4) OVER (ORDER BY amount DESC) AS bucket\nFROM sales;\n\n\n\n\n\n\n\n  \n    \n      sales_id\n      store_id\n      amount\n      bucket\n    \n  \n  \n    1\n101\n100\n1\n    2\n101\n150\n1\n    6\n103\n150\n1\n    3\n102\n200\n2\n    7\n102\n200\n2\n    11\n102\n200\n2\n    4\n103\n250\n3\n    8\n103\n250\n3\n    10\n103\n250\n3\n    5\n101\n300\n4\n    9\n101\n350\n4\n    12\n103\n350\n4\n  \n  \n  \n\n\n\n\nThis divides the result set into 2 buckets based on the Amount. Rows with the highest amounts go into the first bucket, and so on.\n  \n\n\n\n7.2.6 LAG\nLAG() is a function that allows users to access data from a previous row within the same result set. It is particularly useful for performing comparisons between the current row and its preceding rows.\n\n7.2.6.1 Basic syntax\n\n\n\nSQL\n\nLAG(expression [, offset [, default_value]])\n\n\n\nexpression: This is the column or expression from which you want to retrieve the value from a previous row.\noffset: This optional parameter specifies how many rows back to look. The default value is 1 if not specified.\ndefault_value: This optional parameter defines what value to return if there is no previous row available (e.g., when looking back beyond the first row). If omitted, NULL will be returned.\n\n\n\n7.2.6.2 Quick illustration\n\n\n\nSQL\n\nSELECT \n    month,\n      product,\n    amount,\n1    LAG(amount, 1, 0) OVER (ORDER BY sales_date) AS previous_amount\nFROM tableName;\n\n\n\n1\n\nretrieve the value from the previous row in the amount column.\n\n\n\n\n\n\n\n\n\n  \n    \n    \n    \n    \n  \n  \n    \n      month\n      product\n      amount\n      previous_amount\n    \n  \n  \n    Jan\nShoe\n100\n0\n    Jan\nShoe\n120\n100\n    Jan\nCup\n20\n120\n    Feb\nT-Shirt\n80\n20\n    Feb\nT-Shirt\n70\n80\n    Feb\nCup\n30\n70\n  \n  \n  \n\n\n\n\nExample: Get the previous row’s amount.\n\n\n\nSQL\n\nSELECT \n    store_id,\n      sales_date,\n    amount,\n    LAG(amount, 1, 0) OVER (ORDER BY sales_date) AS previous_amount\nFROM sales;\n\n\n\n\n\n\n\n  \n    \n      store_id\n      sales_date\n      amount\n      previous_amount\n    \n  \n  \n    101\n2024-01-01\n100\n0\n    101\n2024-01-01\n150\n100\n    102\n2024-01-02\n200\n150\n    103\n2024-01-02\n250\n200\n    101\n2024-01-03\n300\n250\n    103\n2024-01-03\n150\n300\n    102\n2024-01-04\n200\n150\n    103\n2024-01-04\n250\n200\n    101\n2024-01-05\n350\n250\n    103\n2024-01-05\n250\n350\n    102\n2024-01-06\n200\n250\n    103\n2024-01-06\n350\n200\n  \n  \n  \n\n\n\n\n\n\nPARTITION BY store_id\n\n\n\nSQL\n\nSELECT \n    store_id,\n      sales_date,\n    amount,\n    LAG(amount, 1, 0) OVER (PARTITION BY store_id ORDER BY sales_date) AS previous_amount\nFROM sales;\n\n\n\n\n\n\n\n  \n    \n      store_id\n      sales_date\n      amount\n      previous_amount\n    \n  \n  \n    101\n2024-01-01\n100\n0\n    101\n2024-01-01\n150\n100\n    101\n2024-01-03\n300\n150\n    101\n2024-01-05\n350\n300\n    102\n2024-01-02\n200\n0\n    102\n2024-01-04\n200\n200\n    102\n2024-01-06\n200\n200\n    103\n2024-01-02\n250\n0\n    103\n2024-01-03\n150\n250\n    103\n2024-01-04\n250\n150\n    103\n2024-01-05\n250\n250\n    103\n2024-01-06\n350\n250\n  \n  \n  \n\n\n\n\n  \n\n\n\n7.2.7 LEAD\nThe LEAD() function allows users to access data from subsequent rows in a result set. It is particularly useful for comparing values between the current row and one or more following rows.\n\n7.2.7.1 Basic syntax\n\n\n\nSQL\n\nLEAD(expression [, offset [, default_value]])\n\n\n\nexpression: This is the column or expression whose value you want to retrieve from the following row.\noffset: This optional parameter specifies how many rows forward from the current row you want to look. If not specified, it defaults to 1.\ndefault_value: This optional parameter defines what value should be returned if there is no following row available (e.g., at the end of a dataset). By default, this is NULL.\n\n\n\n7.2.7.2 Quick illustration\n\n\n\nSQL\n\nSELECT \n    month,\n      product,\n    amount,\n1    LEAD(amount, 1, 0) OVER (ORDER BY amount) AS next_amount\nFROM sales;\n\n\n\n1\n\nretrieve the value from the next row in the amount column.\n\n\n\n\n\n\n\n\n\n  \n    \n    \n    \n    \n  \n  \n    \n      month\n      product\n      amount\n      next_amount\n    \n  \n  \n    Jan\nShoe\n100\n120\n    Jan\nShoe\n120\n20\n    Jan\nCup\n20\n80\n    Feb\nT-Shirt\n80\n70\n    Feb\nT-Shirt\n70\n30\n    Feb\nCup\n30\n0\n  \n  \n  \n\n\n\n\nExample: Get the next row’s amount.\n\n\n\nSQL\n\nSELECT \n    store_id,\n      sales_date,\n    amount,\n    LEAD(amount, 1, 0) OVER (ORDER BY sales_date) AS next_amount\nFROM sales;\n\n\n\n\n\n\n\n  \n    \n      store_id\n      sales_date\n      amount\n      previous_amount\n    \n  \n  \n    101\n2024-01-01\n100\n150\n    101\n2024-01-01\n150\n200\n    102\n2024-01-02\n200\n250\n    103\n2024-01-02\n250\n300\n    101\n2024-01-03\n300\n150\n    103\n2024-01-03\n150\n200\n    102\n2024-01-04\n200\n250\n    103\n2024-01-04\n250\n350\n    101\n2024-01-05\n350\n250\n    103\n2024-01-05\n250\n200\n    102\n2024-01-06\n200\n350\n    103\n2024-01-06\n350\n0\n  \n  \n  \n\n\n\n\n\n\nPARTITION BY store_id\n\n\n\nSQL\n\nSELECT \n    store_id,\n      sales_date,\n    amount,\n    LEAD(amount, 1, 0) OVER (PARTITION BY store_id ORDER BY sales_date) AS next_amount\nFROM sales;\n\n\n\n\n\n\n\n  \n    \n      store_id\n      sales_date\n      amount\n      previous_amount\n    \n  \n  \n    101\n2024-01-01\n100\n150\n    101\n2024-01-01\n150\n300\n    101\n2024-01-03\n300\n350\n    101\n2024-01-05\n350\n0\n    102\n2024-01-02\n200\n200\n    102\n2024-01-04\n200\n200\n    102\n2024-01-06\n200\n0\n    103\n2024-01-02\n250\n150\n    103\n2024-01-03\n150\n250\n    103\n2024-01-04\n250\n250\n    103\n2024-01-05\n250\n350\n    103\n2024-01-06\n350\n0\n  \n  \n  \n\n\n\n\n  \n\n\n\n7.2.8 Combining multiple window functions\nYou can combine multiple window functions in a single query.\n\n\n\nSQL\n\nSELECT \n    store_id, \n    amount,\n    ROW_NUMBER() OVER (PARTITION BY store_id ORDER BY amount DESC) AS row_num,\n    SUM(amount) OVER (PARTITION BY store_id) AS total_amount,\n    LAG(amount, 1, 0) OVER (ORDER BY sales_date) AS previous_amount\nFROM sales;\n\n\nThis query assigns a row number, calculates the total amount per store, and retrieves the previous amount for each sale.\n\n\n\n\n\n\nFRAME Clause\n\n\n\n\n\n\n\n\nSQL\n\n\nAVG(sale) OVER (PARTITION BY col_name2 ORDER BY col_name3 ROWS BETWEEN CURRENT ROW AND UNBOUNDED PRECEDING)\n\n\n\nROWS: The frame type. values such as ROWS or RANGE\nCURRENT ROW: The frame boundary (Lower value). It can include values such as CURRENT ROW, N PRECEDING or UNBOUNDED PRECEDING\nUNBOUNDED PRECEDING: The frame Boundary (Higher value). It can include values such as CURRENT ROW, N PRECEDING or UNBOUNDED PRECEDING.\n\n\nRules: - You can only use the Frame clause with Order by clause.\n\nThe lower value should be placed before the higher value.",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Grouping Data</span>"
    ]
  },
  {
    "objectID": "sql_group_windows_function.html#task",
    "href": "sql_group_windows_function.html#task",
    "title": "7  Grouping Data",
    "section": "7.3 Task",
    "text": "7.3 Task",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Grouping Data</span>"
    ]
  },
  {
    "objectID": "sql_join.html",
    "href": "sql_join.html",
    "title": "8  Joins",
    "section": "",
    "text": "Example Tables\ncustomer_id\n      customer_name\n    \n  \n  \n    1\nPaul\n    2\nKelvin\n    3\nJohn\n    4\nDavid\norder_id\n      customer_id\n      order_date\n    \n  \n  \n    101\n1\n2024-08-01\n    102\n2\n2024-08-02\n    103\n1\n2024-08-03\n    104\n3\n2024-08-04",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "sql_join.html#inner-join",
    "href": "sql_join.html#inner-join",
    "title": "8  Joins",
    "section": "8.1 INNER JOIN",
    "text": "8.1 INNER JOIN\nINNER JOIN returns records that have matching values in both tables. This means that only the rows that meet the specified condition are included in the result set. If there are no matches, those rows are excluded.\n\n\n\nSQL\n\n-- Syntax\nSELECT table1.id, table1.X_col, table2.Y_col\n1FROM table1\n2INNER JOIN table2\n3ON table1.id  = table2.id;\n\n\n\n1\n\nThis specifies the primary table from which you want to retrieve data.\n\n2\n\nThis indicates that you are performing an INNER JOIN operation with table2\n\n3\n\nThis line specifies the condition for the join. The ON keyword is used to define how the two tables are related.\n\n\n\n\n\n\n\n\n\n\n\n\ntable1\n  \n    \n    \n  \n  \n    \n      id\n      X_col\n    \n  \n  \n    1\nX1\n    2\nX2\n    3\nX3\n  \n  \n  \n\n\n\n\n\n\ntable2\n  \n    \n    \n  \n  \n    \n      id\n      Y_col\n    \n  \n  \n    1\nY1\n    2\nY2\n    4\nY3\n  \n  \n  \n\n\n\n\n\n\ntable1 INNER JOIN table2\n  \n    \n    \n    \n  \n  \n    \n      id\n      X_col\n      Y_col\n    \n  \n  \n    1\nX1\nY1\n    2\nX2\nY2\n  \n  \n  \n\n\n\n\n\n\nExample\nShow customers who have orders.\n\n\n\nSQL\n\nSELECT \n    customers.customer_id, \n    customers.customer_name, \n    orders.order_id\nFROM customers\nINNER JOIN orders\n    ON customers.customer_id = orders.customer_id;\n\n\n\n\n\n\n\n  \n    \n      customer_id\n      customer_name\n      order_id\n    \n  \n  \n    1\nPaul\n101\n    1\nPaul\n103\n    2\nKelvin\n102\n    3\nJohn\n104\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\nUsing Alias AS\n\n\n\nThe above join query can easily be written as follows:\n\n\n\nSQL\n\nSELECT c.customer_name, o.order_id\nFROM customers AS c\nINNER JOIN orders AS o\n    ON c.customer_id = o.customer_id;",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "sql_join.html#left-join-left-outer-join",
    "href": "sql_join.html#left-join-left-outer-join",
    "title": "8  Joins",
    "section": "8.2 LEFT JOIN (LEFT OUTER JOIN)",
    "text": "8.2 LEFT JOIN (LEFT OUTER JOIN)\nThis returns all records from the left table and the matched records from the right table. If there are no matches in the right table, the result set will still include all rows from the left table, but the columns from the right table will contain NULL values.\n\n\n\nSQL\n\n-- Syntax\nSELECT table1.id, table1.X_col, table2.Y_col\n1FROM table1\n2LEFT JOIN table2\n3ON table1.id  = table2.id ;\n\n\n\n1\n\nThis indicates the primary table from which the query will start retrieving data.\n\n2\n\nThis specifies that you are performing a LEFT JOIN with table2. The LEFT JOIN keyword indicates that all records from the left table table1 will be included in the result, along with matching records from the right table table2.\n\n3\n\nThis specifies the condition for the join operation. The id is a column that exists in both table1 and table2.\n\n\n\n\n\n\n\n\n\n\n\n\ntable1\n  \n    \n    \n  \n  \n    \n      id\n      X_col\n    \n  \n  \n    1\nX1\n    2\nX2\n    3\nX3\n  \n  \n  \n\n\n\n\n\n\ntable2\n  \n    \n    \n  \n  \n    \n      id\n      Y_col\n    \n  \n  \n    1\nY1\n    2\nY2\n    4\nY3\n  \n  \n  \n\n\n\n\n\n\ntable1 LEFT JOIN table2\n  \n    \n    \n    \n  \n  \n    \n      id\n      X_col\n      Y_col\n    \n  \n  \n    1\nX1\nY1\n    2\nX2\nY2\n    3\nX3\nNULL\n  \n  \n  \n\n\n\n\n\n\nExample\nShows all customers, including those without orders (with NULLs in order_id).\n\n\n\nSQL\n\nSELECT \n    customers.customer_id, \n    customers.customer_name, \n    orders.order_id\nFROM customers\nLEFT JOIN orders\n    ON customers.customer_id = orders.customer_id;\n\n\n\n\n\n\n\n  \n    \n      customer_id\n      customer_name\n      order_id\n    \n  \n  \n    1\nPaul\n101\n    1\nPaul\n103\n    2\nKelvin\n102\n    3\nJohn\n104\n    4\nDavid\nNULL",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "sql_join.html#right-join-right-outer-join",
    "href": "sql_join.html#right-join-right-outer-join",
    "title": "8  Joins",
    "section": "8.3 RIGHT JOIN (RIGHT OUTER JOIN)",
    "text": "8.3 RIGHT JOIN (RIGHT OUTER JOIN)\nThis type of join is the opposite of the LEFT JOIN. It returns all records from the right table and the matched records from the left table. If there are no matches in the left table, the result will still include all rows from the right table, with NULLs in the columns from the left table.\n\n\n\nSQL\n\n-- Syntax\nSELECT table2.id, table1.X_col, table2.Y_col\n1FROM table1\n2RIGHT JOIN table2\n3ON table1.id  = table2.id;\n\n\n\n1\n\nThis indicates the primary table from which the query will retrieve the data.\n\n2\n\nThis specifies that you are performing a RIGHT JOIN with table2. The RIGHT JOIN keyword indicates that all records from the right table table2 will be included in the result, along with matching records from the left table table1.\n\n3\n\nThis specifies the condition for the join operation. The id is a column that exists in both table1 and table2.\n\n\n\n\n\n\n\n\n\n\n\n\ntable1\n  \n    \n    \n  \n  \n    \n      id\n      X_col\n    \n  \n  \n    1\nX1\n    2\nX2\n    3\nX3\n  \n  \n  \n\n\n\n\n\n\ntable2\n  \n    \n    \n  \n  \n    \n      id\n      Y_col\n    \n  \n  \n    1\nY1\n    2\nY2\n    4\nY3\n  \n  \n  \n\n\n\n\n\n\ntable1 RIGHT JOIN table2\n  \n    \n    \n    \n  \n  \n    \n      id\n      X_col\n      Y_col\n    \n  \n  \n    1\nX1\nY1\n    2\nX2\nY2\n    4\nNULL\nY3\n  \n  \n  \n\n\n\n\n\n\nExample\nShow all orders, including those without customers (with potential NULLs in customer_name).\n\n\n\nSQL\n\nSELECT \n    customers.customer_id, \n    customers.customer_name, \n    orders.order_id\nFROM customers\nRIGHT JOIN orders\n    ON Customers.customer_id = orders.customer_id;\n\n\n\n\n\n\n\n  \n    \n      customer_id\n      customer_name\n      order_id\n    \n  \n  \n    1\nPaul\n101\n    1\nPaul\n103\n    2\nKelvin\n102\n    3\nJohn\n104",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "sql_join.html#full-join-full-outer-join",
    "href": "sql_join.html#full-join-full-outer-join",
    "title": "8  Joins",
    "section": "8.4 FULL JOIN (FULL OUTER JOIN)",
    "text": "8.4 FULL JOIN (FULL OUTER JOIN)\nThe FULL JOIN combines the results of both LEFT and RIGHT joins. It returns all records from both tables, with matched records where available. If there is no match, the result will include NULLs for the columns of the table that does not have a corresponding entry.\n\n\n\nSQL\n\n-- Syntax\nSELECT table1.id, table1.X_col, table2.Y_col,\n1FROM table1\n2FULL JOIN table2\n3ON table1.id  = table2.id ;\n\n\n\n1\n\nThis indicates the primary table from which the query will retrieve the data.\n\n2\n\nThis indicates that a FULL JOIN being performed with table2. The FULL JOIN keyword tells SQL to return all records from both tables involved in the join, regardless of whether there are matching records in the other table.\n\n3\n\nThis specifies the condition for the join operation. The id is a column that exists in both table1 and table2.\n\n\n\n\n\n\n\n\n\n\n\n\ntable1\n  \n    \n    \n  \n  \n    \n      id\n      X_col\n    \n  \n  \n    1\nX1\n    2\nX2\n    3\nX3\n  \n  \n  \n\n\n\n\n\n\ntable2\n  \n    \n    \n  \n  \n    \n      id\n      Y_col\n    \n  \n  \n    1\nY1\n    2\nY2\n    4\nY3\n  \n  \n  \n\n\n\n\n\n\ntable1 FULL JOIN table2\n  \n    \n    \n    \n  \n  \n    \n      id\n      X_col\n      Y_col\n    \n  \n  \n    1\nX1\nY1\n    2\nX2\nY2\n    3\nX3\nNULL\n    4\nNULL\nY3\n  \n  \n  \n\n\n\n\n\n\nExample\nShow all customers and orders, including customers without orders and orders without customers.\n\n\n\nSQL\n\nSELECT \n    customers.customer_id, \n    customers.customer_name, \n    orders.order_id\nFROM customers\nFULL OUTER JOIN orders\n    ON customers.customer_id = orders.customer_id;\n\n\n\n\n\n\n\n  \n    \n      customer_id\n      customer_name\n      order_id\n    \n  \n  \n    1\nPaul\n101\n    1\nPaul\n103\n    2\nKelvin\n102\n    3\nJohn\n104\n    4\nDavid\nNULL",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "sql_join.html#cross-join",
    "href": "sql_join.html#cross-join",
    "title": "8  Joins",
    "section": "8.5 CROSS JOIN",
    "text": "8.5 CROSS JOIN\nThe CROSS JOIN produces a Cartesian product of the two tables, this means that it returns every possible combination of rows from both tables. This type of join does not require a condition to join the tables.\n\n\n\n\n\n\nCartesian product\n\n\n\nBecause CROSS JOIN does not require a condition to join the tables, this can lead to a large number of results, especially if both tables contain many rows.\n\n\n\n\n\nSQL\n\n-- Syntax\nSELECT table1.id, table1.X_col, table2.id, table2.Y_col\n1FROM table1\n2CROSS JOIN table2\n\n\n\n1\n\nThis indicates the primary table from which the query will retrieve the data.\n\n2\n\nThis indicates that a CROSS JOIN being performed with table2. The CROSS JOIN keyword tells SQL to return all every row from table1 combined with every row from table2.\n\n\n\n\n\n\n\n\n\n\n\n\ntable1\n  \n    \n    \n  \n  \n    \n      id\n      X_col\n    \n  \n  \n    1\nX1\n    2\nX2\n    3\nX3\n  \n  \n  \n\n\n\n\n\n\ntable2\n  \n    \n    \n  \n  \n    \n      id\n      Y_col\n    \n  \n  \n    1\nY1\n    2\nY2\n    4\nY3\n  \n  \n  \n\n\n\n\n\n\ntable1 CROSS JOIN table2\n  \n    \n    \n    \n    \n  \n  \n    \n      X_id\n      X_col\n      Y_id\n      Y_col\n    \n  \n  \n    1\nX1\n1\nY1\n    1\nX1\n2\nY2\n    1\nX1\n4\nY3\n    2\nX2\n1\nY1\n    2\nX2\n2\nY2\n    2\nX2\n4\nY3\n    3\nX3\n1\nY1\n    3\nX3\n2\nY2\n    3\nX3\n4\nY3\n  \n  \n  \n\n\n\n\n\n\nExample\nShow every customer paired with every order.\n\n\n\nSQL\n\nSELECT\n    customers.customer_id, \n    Customers.customer_name, \n    orders.order_id\nFROM Customers\nCROSS JOIN orders;\n\n\n\n\n\n\n\n  \n    \n      customer_id\n      customer_name\n      order_id\n    \n  \n  \n    1\nPaul\n101\n    1\nPaul\n102\n    1\nPaul\n103\n    1\nPaul\n104\n    2\nKelvin\n101\n    2\nKelvin\n102\n    2\nKelvin\n103\n    2\nKelvin\n104\n    3\nJohn\n101\n    3\nJohn\n102\n    3\nJohn\n103\n    3\nJohn\n104\n    4\nDavid\n101\n    4\nDavid\n102\n    4\nDavid\n103\n    4\nDavid\n104",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "sql_join.html#self-join",
    "href": "sql_join.html#self-join",
    "title": "8  Joins",
    "section": "8.6 SELF JOIN",
    "text": "8.6 SELF JOIN\nThis is a regular join but the table is joined with itself. Often used to compare rows within the same table.\n\n\n\nSQL\n\n-- Syntax\n1SELECT x.column_name, y.column_name\n2FROM table1 AS x, table1 AS y\n3WHERE x.id &lt;&gt; y.id;\n\n\n\n1\n\nSelect columns from the two table1 using the separate table to distinguish between records.\n\n2\n\nThis indicates the data is being selected from table1 twice only and an alias is created to distinguish between the two records.\n\n3\n\nThis specifies the condition for the join operation. The id is a column that exists in both table1 and table2.\n\n\n\n\n\n\n\n\n\n\n\n\ntable1\n  \n    \n    \n  \n  \n    \n      id\n      X_col\n    \n  \n  \n    1\nX1\n    2\nX2\n    3\nX3\n  \n  \n  \n\n\n\n\n\n\ntable1 SELF JOIN table1\n  \n    \n    \n  \n  \n    \n      id\n      Y_col\n    \n  \n  \n    1\nY1\n    2\nY2\n    4\nY3\n  \n  \n  \n\n\n\n\n\n\n\n  \n    \n    \n    \n    \n  \n  \n    \n      X_id\n      Y_id\n      X_col\n      Y_col\n    \n  \n  \n    1\n2\nX1\nY2\n    1\n4\nX1\nY3\n    2\n1\nX2\nY1\n    2\n4\nX2\nY3\n    3\n1\nX3\nY1\n    3\n2\nX3\nY2\n    3\n4\nX3\nY3\n  \n  \n  \n\n\n\n\n\n\nExample\nPairs of customers with their orders.\n\n\n\nSQL\n\nSELECT \n    a.customer_id AS a_customer_id,\n    b.customer_id AS b_customer_id,\n    a.customer_name AS customer1, \n    b.customer_name AS customer2\nFROM customers AS a, customers AS b\nWHERE a.customer_id &lt;&gt; b.customer_id;\n\n\n\n\n\n\n\n  \n    \n      a_customer_id\n      b_customer_id\n      a_customer_name\n      b_customer_name\n    \n  \n  \n    2\n1\nPaul\nKelvin\n    3\n1\nJohn\nKelvin\n    4\n1\nDavid\nKelvin\n    1\n2\nKelvin\nPaul\n    3\n2\nJohn\nPaul\n    4\n2\nDavid\nPaul\n    1\n3\nKelvin\nJohn\n    2\n3\nPaul\nJohn\n    4\n3\nDavid\nJohn\n    1\n4\nKelvin\nDavid\n    2\n4\nPaul\nDavid\n    3\n4\nJohn\nDavid",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "sql_join.html#union",
    "href": "sql_join.html#union",
    "title": "8  Joins",
    "section": "8.7 UNION",
    "text": "8.7 UNION\nThe UNION operator combines the results of two or more SELECT statements into one. It automatically removes duplicate rows from the final result set, ensuring that only unique records are displayed.\n\n\n\nSQL\n\nSELECT id, col\nFROM table1\nUNION\nSELECT id, col\nFROM table2;\n\n\n\n\n\n\n\n\nKey important points about the UNION operator\n\n\n\n\nThe number and order of columns in all SELECT statements must match.\nThe data types of corresponding columns must be compatible.\nUNION removes duplicate rows.\n\n\n\n\n\n\n\n\n\n\n\ntable1\n  \n    \n    \n  \n  \n    \n      id\n      col\n    \n  \n  \n    1\nX1\n    2\nX2\n    3\nX3\n  \n  \n  \n\n\n\n\n\n\ntable2\n  \n    \n    \n  \n  \n    \n      id\n      col\n    \n  \n  \n    1\nX1\n    2\nX2\n    4\nX4\n  \n  \n  \n\n\n\n\n\n\ntable1 UNION table2\n  \n    \n    \n  \n  \n    \n      id\n      col\n    \n  \n  \n    1\nX1\n    2\nX2\n    3\nX3\n    4\nX4\n  \n  \n  \n\n\n\n\n\n\nExample\n\n\n\nSQL\n\nSELECT product_id, product_name\nFROM Products_A\nUNION\nSELECT product_id, product_name\nFROM Products_B;\n\n\n\n\n\n\n\n  \n    \n      product_id\n      product_name\n    \n  \n  \n    1\nLaptop\n    2\nSmartphone\n    3\nTablet",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "sql_join.html#union-all",
    "href": "sql_join.html#union-all",
    "title": "8  Joins",
    "section": "8.8 UNION ALL",
    "text": "8.8 UNION ALL\nUNION ALL is similar to UNION but does not remove duplicate rows. This means it combines all rows from the queries, including duplicates.\n\n\n\nSQL\n\nSELECT id, col\nFROM table1\nUNION ALL\nSELECT id, col\nFROM table2;\n\n\n\n\n\n\n\n\n\n\ntable1\n  \n    \n    \n  \n  \n    \n      id\n      col\n    \n  \n  \n    1\nX1\n    2\nX2\n    3\nX3\n  \n  \n  \n\n\n\n\n\n\ntable2\n  \n    \n    \n  \n  \n    \n      id\n      col\n    \n  \n  \n    1\nX1\n    2\nX2\n    4\nX4\n  \n  \n  \n\n\n\n\n\n\ntable1 UNION ALL table2\n  \n    \n    \n  \n  \n    \n      id\n      col\n    \n  \n  \n    1\nX1\n    2\nX2\n    3\nX3\n    1\nX1\n    2\nX2\n    4\nX4\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\n\nKey important points about the UNION ALL operator\n\n\n\n\nThis does not remove duplicate rows.\nFaster than UNION because no duplicate-checking is performed.\n\n\n\n\nExample\n\n\n\nSQL\n\nSELECT product_id, product_name\nFROM Products_A\nUNION ALL\nSELECT product_id, product_name\nFROM Products_B;\n\n\n\n\n\n\n\n  \n    \n      product_id\n      product_name\n    \n  \n  \n    1\nLaptop\n    2\nSmartphone\n    2\nSmartphone\n    3\nTablet",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "sql_sub_queries_cte.html",
    "href": "sql_sub_queries_cte.html",
    "title": "9  Subquery & CTE",
    "section": "",
    "text": "9.1 Subquery\nA subquery, also known as a nested query or inner query, is a query within another SQL query. It allows you to construct complex queries by embedding one query inside another. Subqueries can be used in various parts of SQL statements, including SELECT, INSERT, UPDATE, and DELETE statements.",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Subquery & CTE</span>"
    ]
  },
  {
    "objectID": "sql_sub_queries_cte.html#subquery",
    "href": "sql_sub_queries_cte.html#subquery",
    "title": "9  Subquery & CTE",
    "section": "",
    "text": "Key characteristics of subqueries\n\n\n\n\nThey are enclosed in parentheses.\nThey can be used in the SELECT, FROM, WHERE, HAVING, and JOIN clauses of the main query.\nThey can return a single value, a single row, a single column, or a table of results depending on how they’re constructed.\n\n\n\n\n9.1.1 Scalar subquery\nA scalar subquery returns a single value and can be used wherever a single value expression is allowed.\nRetrieve products from the product table where the unit price exceeds the overall average unit price.\nSubquery: Let us try to get the average price per unit of each product.\n\n\n\nSQL\n\nSELECT AVG(unit_price) AS average_unit_price FROM Products;\n\n\n\n\n\n\n\n  \n    \n      average_unit_price\n    \n  \n  \n    449.99\n  \n  \n  \n\n\n\n\nFull query: Retrieve products with a unit price higher than the average using a subquery.\n\n\n\nSQL\n\nSELECT \n    product_name,                                            \n    unit_price\nFROM Products\n1WHERE unit_price &gt; (SELECT AVG(unit_price) FROM Products);\n\n\n\n1\n\nInclude a subquery to calculate the average price per unit of each product.\n\n\n\n\n\n\n\n\n\n  \n    \n      product_name\n      unit_price\n    \n  \n  \n    Laptop\n999.99\n    Smartphone\n599.99\n  \n  \n  \n\n\n\n\n  \n\n\n9.1.2 Multi-row subquery\nThis subquery returns multiple rows, but typically a single column. and it is used with operators like IN, ANY, or ALL to compare a value against a list of results.\nRetrieve the names and unit prices of products that cost more than any product in the electronic product category.\nSubquery: Retrieve the unit prices of electronic products.\n\n\n\nSQL\n\nSELECT unit_price\nFROM Products\n1WHERE category = 'Electronics';\n\n\n\n1\n\nAll records where the product category is ‘Electronics’.\n\n\n\n\n\n\n\n\n\n  \n    \n      unit_price\n    \n  \n  \n    999.99\n    599.99\n    149.99\n  \n  \n  \n\n\n\n\nFull Query: We can finally compare and filter only product with unit price greater than any product in the ‘Electronics’ category.\n\n\n\nSQL\n\nSELECT product_name, unit_price\nFROM Products\n1WHERE unit_price &gt; ANY (\n2    SELECT unit_price\n    FROM Products\n    WHERE category = 'Electronics'\n);\n\n\n\n1\n\nGet unit_price greater than any of the products in the ‘Electronics’ category.\n\n2\n\nAdd the subquery.\n\n\n\n\n\n\n\n\n\n  \n    \n      product_name\n      unit_price\n    \n  \n  \n    Laptop\n999.99\n    Smartphone\n599.99\n    Desk Chair\n199.99\n    Coffee Table\n299.99\n  \n  \n  \n\n\n\n\n  \n\n\n9.1.3 Correlated subquery\nA correlated subquery is a subquery that depends on the outer query for its values and is executed once for each row in the outer query.\nWe can retrieve products with a price higher than the average price in their category: Subquery: To do this let’s get the average price per unit for each category.\n\n\n\nSQL\n\n1SELECT category, AVG(unit_price) AS average_unit_price\nFROM Products\n2GROUP BY category;\n\n\n\n1\n\nGet the average unit price and give it the name average_unit_price.\n\n2\n\nGroup the records by product category.\n\n\n\n\n\n\n\n\n\n  \n    \n      category\n      average_unit_price\n    \n  \n  \n    Electronics\n583.3233\n    Furniture\n249.9900\n  \n  \n  \n\n\n\n\nFull query: Now we can retrieve products with a unit price higher than the average for their category.\n\n\n\nSQL\n\nSELECT \n    p1.product_id, \n    p1.product_name, \n    p1.unit_price, \n    p1.category\nFROM Products p1\nWHERE p1.unit_price &gt; (\n    SELECT AVG(p2.unit_price)\n    FROM Products p2\n    WHERE p2.category = p1.category\n);\n\n\n\nThe process\n\nIt looks at each product (p1) in the outer query.\nFor each product, it calculates the average price of products in the same category (p2).\nThen it compares the product’s price to this average.\nIf the product’s price is higher than the average for its category, it’s included in the results.\n\n\n\n\n\n\n  \n    \n      product_id\n      product_name\n      unit_price\n      category\n    \n  \n  \n    1\nLaptop\n999.99\nElectronics\n    2\nSmartphone\n599.99\nElectronics\n    5\nCoffee Table\n299.99\nFurniture\n  \n  \n  \n\n\n\n\n  \n\n\n\n9.1.4 Nested Subquery\nA nested subquery is a subquery within another subquery.\nRetrieve the names and unit prices of products purchased after March:\nFirst subquery: Get the ids of orders placed after March:\n\n\n\nSQL\n\nSELECT order_id\nFROM Orders\n1WHERE MONTH(order_date) &gt; 3;\n\n\n\n1\n\nFilter only months after March.\n\n\n\n\n\n\n\n\n\n  \n    \n      order_id\n    \n  \n  \n    4\n    5\n  \n  \n  \n\n\n\n\nSecond Subquery: Retrieve the order IDs of orders placed after March by selecting the resulting order IDs from the inner query.\n\n\n\nSQL\n\nSELECT DISTINCT(product_id)\nFROM OrderDetails\n1WHERE order_id IN (\n2    SELECT order_id\n    FROM Orders\n    WHERE  MONTH(order_date) &gt; 3\n);\n\n\n\n1\n\nGet orders after March.\n\n2\n\nAdd the subquery.\n\n\n\n\n\n\n\n\n\n  \n    \n      product_id\n    \n  \n  \n    2\n    3\n    4\n    5\n  \n  \n  \n\n\n\n\nFull query: Retrieve the names and unit prices of products purchased in orders placed after March, using the product IDs obtained from the subquery.\n\n\n\nSQL\n\nSELECT product_name, unit_price\nFROM Products\nWHERE product_id IN (\n1    SELECT product_id\n    FROM OrderDetails\n    WHERE order_id IN (\n2        SELECT order_id\n        FROM Orders\n        WHERE  MONTH(order_date) &gt; 3\n    )\n);\n\n\n\n1\n\nSubquery\n\n2\n\nInner Subquery.\n\n\n\n\n\n\n\n\n\n  \n    \n      product_name\n      unit_price\n    \n  \n  \n    Smartphone\n599.99\n    Headphones\n149.99\n    Desk Chair\n199.99\n    Coffee Table\n299.99",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Subquery & CTE</span>"
    ]
  },
  {
    "objectID": "sql_sub_queries_cte.html#common-table-expressions-ctes",
    "href": "sql_sub_queries_cte.html#common-table-expressions-ctes",
    "title": "9  Subquery & CTE",
    "section": "9.2 Common table expressions (CTEs)",
    "text": "9.2 Common table expressions (CTEs)\nCTEs are a feature in SQL that provide a way to create temporary result sets that can be referenced within a SELECT, INSERT, UPDATE, or DELETE statement. Unlike subqueries, CTEs make queries easier to understand and can be reused within the main query.\n\n\n\nSQL\n\n-- Basic syntax of a CTE\nWITH CTE_name (column_name1, column_name2, ...) AS (\n    -- CTE Query\n    SELECT column_list\n    FROM table_name\n    WHERE condition\n)\n-- Main query using the CTE\nSELECT column_name1, column_name2\nFROM CTE_name\nWHERE condition;\n\n\n\n\n\n\n\n\nAbout the CTE query\n\n\n\n\n\n\nWITH: This keyword is used to define a CTE. It tells SQL Server that a CTE is about to be declared.\nCTE_name: This is the name of the CTE, it is is a temporary, virtual table name that can be used within the scope of the statement.\n(column_name1, column_name2, ...): These are optional column aliases that specify the names of the columns in the CTE. If not specified, the columns from the inner SELECT query will be used by default.\nAS (): This keyword specifies the beginning of the CTE definition.\n\n\n\n\n\n9.2.1 Simple CTE\nTo retrieve all products and product categories with unit price above the average unit price:\n\nWe need to first get the average unit price.\n\n\n\n\nSQL\n\n1SELECT AVG(unit_price) AS average_unit_price\nFROM Products;\n\n\n\n1\n\nAverage price per unit of all products.\n\n\n\n\n\n\n\n\n\n  \n    \n      average_unit_price\n    \n  \n  \n    449.99\n  \n  \n  \n\n\n\n\n\nUse the calculated average unit price from the CTE to filter products with a unit price higher than the average.\n\n\n\n\nSQL\n\nWITH avg_unit_price_cte AS (\n1    SELECT AVG(unit_price) AS average_unit_price\n    FROM Products\n)\nSELECT product_name, category\nFROM Products, avg_unit_price_cte\n2WHERE unit_price &gt; average_unit_price;\n\n\n\n1\n\nThe average price per unit of all products\n\n2\n\nUsing the average_unit_price value from the CTE table avg_unit_price_cte to get unit_price that are greater than the average.\n\n\n\n\n\n\n\n\n\n  \n    \n      product_name\n      category\n    \n  \n  \n    Laptop\nElectronics\n    Smartphone\nElectronics\n  \n  \n  \n\n\n\n\n   \n\n\n9.2.2 Recursive CTE\nUsed for hierarchical data, like organizational structures or tree data.\n\n\n\nSQL\n\nWITH RECURSIVE RecursiveOrderDetails AS (\n    -- Anchor member: Start with the first order detail\n    SELECT \n        order_detail_id, \n        product_id, \n        quantity, \n        quantity AS cumulative_quantity\n    FROM OrderDetails\n    WHERE order_detail_id = 1  -- Start from the first OrderDetail (or any base case)\n\n    UNION ALL\n\n    -- Recursive member: Incrementally add quantities of the next order detail\n    SELECT \n        od.order_detail_id, \n        od.product_id, \n        od.quantity, \n        rod.cumulative_quantity + od.quantity AS cumulative_quantity\n    FROM OrderDetails od\n    INNER JOIN RecursiveOrderDetails rod \n        ON od.order_detail_id = rod.order_detail_id + 1  -- Go to the next order detail\n)\n-- Main query using the CTE\nSELECT \n    order_detail_id, \n    product_id, \n    quantity, \n    cumulative_quantity\nFROM RecursiveOrderDetails\nORDER BY order_detail_id;\n\n\n\n\n\n\n\n  \n    \n      order_detail_id\n      order_id\n      product_id\n      quantity\n      cumulative_quantity\n    \n  \n  \n    1\n1\n1\n1\n1\n    2\n1\n2\n2\n3\n    3\n2\n2\n1\n4\n    4\n2\n3\n3\n7\n    5\n3\n1\n1\n8\n    6\n3\n3\n2\n10\n    7\n4\n2\n1\n11\n    8\n4\n4\n2\n13\n    9\n5\n3\n2\n15\n    10\n5\n5\n1\n16\n  \n  \n  \n\n\n\n\n   \n\n\n9.2.3 Multiple CTEs\nCombining multiple CTEs in a single query.\nIdentify the highest unit price for each product category, and then list products with a unit price exceeding 80% of their respective category’s highest unit price.\n\nLet’s determine the highest unit price for each product category.\n\n\n\n\nSQL\n\n1SELECT category, MAX(unit_price) AS max_unit_price_per_cat\nFROM Products\nGROUP BY category;\n\n\n\n1\n\nMaximum unit price by product category.\n\n\n\n\n\n\n\n\n\n  \n    \n      category\n      max_unit_price_per_cat\n    \n  \n  \n    Electronics\n999.99\n    Furniture\n299.99\n  \n  \n  \n\n\n\n\n\nRetrieve products with a unit price exceeding 80% of the maximum unit price within their respective product categories.\n\n\n\n\nSQL\n\nWITH cat_max_unit_price_cte AS (\n    SELECT category, MAX(unit_price) AS max_unit_price_per_cat\n    FROM Products\n    GROUP BY category\n)\nSELECT \n    p.product_id, \n    p.product_name, \n    p.unit_price,\n    c.category, \n    c.max_unit_price_per_cat,\n    0.8 * c.max_unit_price_per_cat AS unit_price_80_percent\nFROM Products AS p\nINNER JOIN cat_max_unit_price_cte AS c\n    ON p.category = c.category\nWHERE p.unit_price &gt; 0.8 * max_unit_price_per_cat;\n\n\n\n\n\n\n\n  \n    \n      product_id\n      product_name\n      unit_price\n      category\n      max_unit_price_per_cat\n      unit_price_80_percent\n    \n  \n  \n    1\nLaptop\n999.99\nElectronics\n999.99\n799.992\n    5\nCoffee Table\n299.99\nFurniture\n299.99\n239.992\n  \n  \n  \n\n\n\n\n\nSelect the product, category and unit price greater than 80% of the unit price in their category. NOTE that we can add more complex query from the resulting records of the high_products CTE\n\n\n\n\nSQL\n\nWITH cat_max_unit_price_cte AS (\n    SELECT category, MAX(unit_price) AS max_unit_price_per_cat\n    FROM Products\n    GROUP BY category\n),\nhigh_products AS (\n    SELECT \n        p.product_id, \n        p.product_name, \n        p.unit_price,\n        c.category, \n        c.max_unit_price_per_cat\n    FROM Products AS p\n    INNER JOIN cat_max_unit_price_cte AS c\n        ON p.category = c.category\n    WHERE p.unit_price &gt; 0.8 * max_unit_price_per_cat\n)\nSELECT \n    product_name, \n    category, \n    unit_price\nFROM high_products;\n\n\n\n\n\n\n\n  \n    \n      product_name\n      category\n      unit_price\n    \n  \n  \n    Laptop\nElectronics\n999.99\n    Coffee Table\nFurniture\n299.99",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Subquery & CTE</span>"
    ]
  },
  {
    "objectID": "sql_sub_queries_cte.html#task",
    "href": "sql_sub_queries_cte.html#task",
    "title": "9  Subquery & CTE",
    "section": "9.3 Task",
    "text": "9.3 Task",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Subquery & CTE</span>"
    ]
  },
  {
    "objectID": "sql_project.html",
    "href": "sql_project.html",
    "title": "10  Project",
    "section": "",
    "text": "10.1 Performance Insights Overview for a Coffee Store Business\nThis analysis aims to provide a in-depth overview of key aspects of the coffee store’s operations and service. The focus will be on extracting valuable insights that highlight performance metrics across the various dimensions of the business. The analysis will cover the following areas:",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Project</span>"
    ]
  },
  {
    "objectID": "sql_project.html#performance-insights-overview-for-a-coffee-store-business",
    "href": "sql_project.html#performance-insights-overview-for-a-coffee-store-business",
    "title": "10  Project",
    "section": "",
    "text": "10.1.1 Product Performance Analysis:\n\n\n10.1.2 Operational efficiency Analysis:\n\n\n10.1.3 Customer Behavior Analysis:",
    "crumbs": [
      "SQL",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Project</span>"
    ]
  },
  {
    "objectID": "r_basics.html",
    "href": "r_basics.html",
    "title": "11  Basics",
    "section": "",
    "text": "11.1 Basic Syntax\nUnderstanding the basic syntax of R is essential for effectively utilizing its features. An R program consists of three main components: - variables - comments - keywords",
    "crumbs": [
      "R",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Basics</span>"
    ]
  },
  {
    "objectID": "r_basics.html#basic-syntax",
    "href": "r_basics.html#basic-syntax",
    "title": "11  Basics",
    "section": "",
    "text": "Printing R code:\n\n\n\n\n\nAbout print\n\n\n\nR\n\n\"Hello World\"\n\n\n[1] \"Hello World\"\n\n\nOR using the print function.\n\n\n\nR\n\nprint(\"Hello World\")\n\n\n[1] \"Hello World\"\n\n\n\n\n\n\n11.1.1 Variables\nvariables are used to store data. They can be assigned values using different assignment operators:\n\nLeftward Assignment ( &lt;- )\nExample:\n\n\n\nR\n\n1string &lt;- \"Hello World!!\"\n\n2string\n\n\n\n1\n\nAssign the string “Hello World!!” to the variable string\n\n2\n\nget the value from the variable string\n\n\n\n\n[1] \"Hello World!!\"\n\n\n\n\nRightward Assignment ( -&gt; )\nExample:\n\n\n\nR\n\n1\"Hello World!!\" -&gt; string\n\n2string\n\n\n\n1\n\nAssign the string “Hello World!!” to the variable string\n\n2\n\nget the value from the variable string\n\n\n\n\n[1] \"Hello World!!\"\n\n\n\n\nSimple Assignment ( = )\nExample:\n\n\n\nR\n\n1string = \"Hello World!!\"\n\n2string\n\n\n\n1\n\nAssign the string “Hello World!!” to the variable string\n\n2\n\nget the value from the variable string\n\n\n\n\n[1] \"Hello World!!\"\n\n\n  \n\n\n\n11.1.2 Comments:\nComments are crucial for improving code readability and documentation. In R, comments begin with the # symbol and are ignored by the interpreter during execution. comments can be written as follows:\nExample of single line comments:\n\n\n\nR\n\n# This is a single-line comment\n\n\nExample of multiple line comments:\n\n\n\nR\n\n# This is a comment\n# that can spans multiple lines\n# without any problem\n\n\n\n\n\n\n\n\nDeclaring a variable with a comment\n\n\n\nWhen you assign a variable after the # sign, that particular variable is not …\nExample:\n\n\n\nR\n\n# new_string &lt;- \"Hello World\"\nnew_string                                                    \n\n\nError: object ‘new_string’ not found\nThe variable new_string is not …\n\n\n  \n\n\n11.1.3 Keywords\nKeywords are reserved words in R that have special meanings and cannot be used as variable names. Examples include control-flow statements like if, else, for, and constants like TRUE, FALSE, and NULL.\n\n\n\n\n\n\n\n\nConcept\nKeyword\nDescription\n\n\n\n\ncontrol-flow\nif\nUsed to execute a block of code conditionally\n\n\ncontrol-flow\nelse\nUsed with `if` to provide an alternative block of code that executes\n\n\ncontrol-flow\nfor\niterate over a sequence and execute a block of code for each element\n\n\ncontrol-flow\nwhile\ncontinues executing a block of code as long as a condition remains TRUE\n\n\nBoolean\nTRUE or T\nIt represents a logical truth\n\n\nBoolean\nFALSE or F\nIt represents a logical falsehood\n\n\nconstants\nNULL\nIt represents the absence of a value or an undefined state",
    "crumbs": [
      "R",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Basics</span>"
    ]
  },
  {
    "objectID": "r_basics.html#data-types",
    "href": "r_basics.html#data-types",
    "title": "11  Basics",
    "section": "11.2 Data Types",
    "text": "11.2 Data Types\nIn R, data types is crucial as they dictate how data is stored, manipulated, and analyzed.\n\nR is dynamically typed, meaning that variables do not need to be declared with a specific type and can change type during execution.\n\n\n11.2.1 Atomic Data Types\nAtomic data types are the most basic types in R and include individual values that are not broken down further.\n\n11.2.1.1 Numeric\nThey represents real numbers (double precision by default), they also include integers and floating-point numbers. for example 10, 10.5, etc\n\n\nInteger\nThe integer data type in R is used to represent whole numbers without any decimal points. In R, integers can be explicitly defined by appending the letter L to the numeric value.\n\n\n\nR\n\n# Example\n100L\n\n# Check that a value is of integer data type\n1is.integer(100L)\n\n\n\n1\n\nThe function is.integer() is used to check whether a value is an integer\n\n\n\n\n[1] 100\n[1] TRUE\n\n\nConvert to Integer Convert a string to an integer data type.\n\n\n\nR\n\nint &lt;- as.integer(\"100\")\n\n# Check that a value is of integer data type\n1is.integer(int)\n\n\n\n1\n\nThe function is.integer() is used to check whether a value is an integer\n\n\n\n\n[1] TRUE\n\n\n\n\n\n\n\n\nCheck functions in R\n\n\n\nfunctions that begin with the prefix is. are primarily designed to check the type or class of an object. These functions return a Boolean value (TRUE or FALSE) indicating whether the specified condition is met for the given object. This is particularly useful for validating data types before performing operations on them, ensuring that your code behaves as expected.\nFor example is.numeric() to check for numeric data type or is.character() to check for character data type.\n\n\n\n\n\n\n\n\nCoercion or conversion functions in R\n\n\n\nfunctions that start with the prefix as. are designed for type conversion, allowing users to transform data from one class to another. These functions are essential for ensuring that data is in the appropriate format for analysis or computation.\nFor example as.numeric() to convert string numbers (e.g “10”) or logical value (e.g TRUE) to numeric data types.\n\n\n\n\n\nDouble (double precision)\nThe double data type in R refers specifically to double-precision floating-point numbers, which are used to represent real numbers that can include decimal values.\n\n\n\nR\n\n# Example\n100\n1is.double(100)\n\n# And\n100.0\nis.double(100.0)\n\n\n\n1\n\nThe function is.double() is used to check whether a value is a double.\n\n\n\n\n[1] 100\n[1] TRUE\n[1] 100\n[1] TRUE\n\n\nConvert to Double\n\n\n\nR\n\ndbl &lt;- as.double(\"100.45\")\n\n1is.double(dbl)\n\n\n\n1\n\nCheck that the variable dbl is of integer data type.\n\n\n\n\n[1] TRUE\n\n\n \n\n\nBasic arithmetics\nAddition:\n\n\n\nR\n\n10 + 10\n\n\n[1] 20\n\n\nSubtraction:\n\n\n\nR\n\n10 - 5\n\n\n[1] 5\n\n\nMultiplication:\n\n\n\nR\n\n100 / 10\n\n\n[1] 10\n\n\nDivision:\n\n\n\nR\n\n20 / 2\n\n\n[1] 10\n\n\n  \n\n\n11.2.1.2 Character\nThey are also known as strings, character data types store text or string values enclosed in quotes and this character strings can be created using either single quotes (‘ ’) or double quotes (“ “) for example:\n\n\n\nR\n\n1print('Hello World!!')\n                                   \n# OR\n\n2print(\"Hello World!!\")\n\n\n\n1\n\nSingle Quotes: create a character string using single quotes\n\n2\n\nDouble Quotes: create a character string using double quotes\n\n\n\n\n[1] \"Hello World!!\"\n[1] \"Hello World!!\"\n\n\n\n\nIncluding quotes within strings\nWhen your string contains the same type of quote used to define it, you need to escape those inner quotes or use the other type of quote to avoid syntax errors.\n\nUsing Escaping with Backslashes: f you want to include a single quote inside a string defined by single quotes, you must escape it with a backslash (\\):\n\n\n\n\nR\n\n'It\\'s a beautiful day!'\n\n\n[1] \"It's a beautiful day!\"\n\n\n\n\nUsing different quote types\nAlternatively, you can use double quotes to define the string if it contains single quotes:\n\n\n\nR\n\n\"It's a beautiful day!\"\n\n\n[1] \"It's a beautiful day!\"\n\n\n\n\nNested quotes\nYou can also nest different types of quotes within each other:\n\n\n\nR\n\n\"She said, 'Hello!'\"\n\n\n[1] \"She said, 'Hello!'\"\n\n\nIn this case, the outer string uses double quotes while the inner string uses single quotes.\n\n\n\n\n\n\nMixing single and double quotes\n\n\n\nUnderstanding how to mix these quote types effectively is essential for handling strings that contain quotes themselves, as well as for improving code readability.\n\n\n\nR\n\n\"Hello World'\n\n# OR\n\n'Hello World\"\n\n\nBut you can use a type of quote inside another type of quote. For example\n\n\n\nR\n\nprint(\"Hello 'World'!!\")\n\n\n[1] \"Hello 'World'!!\"\n\n# OR\n\nprint('Hello \"World\"!!')\n\n[1] \"Hello \\\"World\\\"!!\"\n\n\n\n\n\n\nConvert to character\nEven numeric characters will be treated as character if enclosed in quotes.\n\n\n\nR\n\nchr &lt;- as.character(100)\n\nis.character(chr)\n\n\n[1] TRUE\n\n\n\n\nConcatenating strings\n\n\n\nR\n\n1str_one &lt;- \"Hello\"\nstr_two &lt;- \"World!!\"\n\n# combine the two strings together\n2paste(str_one, str_two)\n\n\n\n1\n\nAssign the string “Hello” and “World!!” to the variable str_one & str_two respectively.\n\n2\n\nThe paste() function helps to combine two or more string into a single string.\n\n\n\n\n[1] \"Hello World!!\"\n\n\nYou can also use the cat() function.\n\n\n\nR\n\n1cat(str_one, str_two)\n\n\n\n1\n\nCombine str_one and str_two into a single line output.\n\n\n\n\nHello World!!\n\n\n\n\n\nR\n\n1cat(str_one, \"\\n\", str_two)\n\n\n\n1\n\nCombine str_one and str_two into multiple lines output.\n\n\n\n\nHello \n World!!\n\n\n  \n\n\n11.2.1.3 Logical\nLogical data type is used to represent Boolean values, which are values that are either TRUE or FALSE and it is often used in conditions, comparisons, and control flow for decision-making processes.\nExample:\n\n\n\nR\n\n1is.logical(TRUE)\n\n# OR\n\n2is.logical(T)\n\n\n\n1\n\nCheck that the value TRUE is a logical type of data.\n\n2\n\nCheck that the value T is a logical type of data.\n\n\n\n\n[1] TRUE\n[1] TRUE\n\n\n\n\n\n\n\n\nVariations of Logical values\n\n\n\nR also recognizes the values T and F, which are shorthand for TRUE and FALSE respectively, but it’s better to use TRUE and FALSE to avoid accidental re-assignment.\n\n\n\n\n\nR\n\n1is.logical(FALSE)\n\n# OR\n\n2is.logical(F)\n\n\n\n1\n\nCheck that the value FALSE is a logical type of data.\n\n2\n\nCheck that the value F is a logical type of data.\n\n\n\n\n[1] TRUE\n[1] TRUE\n\n\n  \n\n\n\n11.2.2 Special Values\nThese are unique values used to represent special conditions.\n\n11.2.2.1 NA (Not Available):\nThe NA value stands for “Not Available” and is used to represent missing or undefined data. It is a placeholder that indicates that a particular value is not present in the dataset.\nExample:\n\n\n\nR\n\nNA\n\n\n[1] NA\n\n# Check if the value NA is True.\nis.na(NA)\n\n[1] TRUE\n\n\nNA can occur in various data types, including numeric, character, and logical vectors.\n\n\n11.2.2.2 NaN (Not a Number):\nNaN stands for “Not a Number.” It is a special value used to represent undefined or unrepresentable numerical results. This typically occurs in situations where mathematical operations do not yield a valid number. (e.g., 0/0)\n\n\n\nR\n\n0/0\n\n\n[1] NaN\n\n# Check if it is `Not a Number`\nis.nan(0/0)\n\n[1] TRUE\n\n\n\n\n11.2.2.3 Inf and -Inf:\nThis represents positive and negative infinity, respectively. and they can be returned from calculations like division by zero (1/0).\n\n\n\nR\n\n1/0\n\n\n[1] Inf\n\n# Check if the output 1/0 is Inf \nis.infinite(1/0)\n\n[1] TRUE\n\n\n\n\n\n11.2.3 Composite Data Types\n\n11.2.3.1 Factor\nThey represent qualitative data with predefined levels. It stores data as integer vectors with labels. and it is useful for statistical modeling and plotting. It is Created using the function factor()\nExample:\n\n\n\nR\n\n1quantity &lt;- factor(\"Low\")\nquantity\n\n\n\n1\n\nCreate a single category “Low” as a factor using the function factor()\n\n\n\n\n[1] Low\nLevels: Low\n\n\n\n1levels(quantity)\n\n\n1\n\nGet access to the levels attribute of the quantity variable.\n\n\n\n\n[1] \"Low\"\n\n\n\n\n\nR\n\n# check if it is a factor\nis.factor(quantity)\n\n\n[1] TRUE\n\n\n\n\n\n11.2.4 Dates\nDates in R are stored as Date objects\n\nCreating Dates:\nUse as.Date() to create date objects from strings.\n\n\n\nR\n\n1as.Date(\"2024-09-08\")\n2as.Date(\"09/08/2024\", format = \"%m/%d/%Y\")\n\n\n\n1\n\nISO format (YYYY-MM-DD)\n\n2\n\nCustom format\n\n\n\n\n[1] \"2024-09-08\"\n[1] \"2024-09-08\"\n\n\nCurrent Date and Time\n\n\n\nR\n\n# Get the current date (today)\n1Sys.Date()\n\n# Get the current date & Time (today)\n2Sys.time()\n\n\n\n1\n\nUse Sys.Date() to get the current date only.\n\n2\n\nUse Sys.time() to get the current date and time.\n\n\n\n\n[1] \"2024-10-23\"\n[1] \"2024-10-23 03:39:40 WAT\"\n\n\n\n\n\n11.2.5 Checking Data Types\nTo check the data type of a variable in R, you can use the class() function or any of the specific function relating to the data type starting with the word is.\n\nFormatting Dates:\nUse format() to display dates in different formats.\n\n\n\nR\n\n1format(Sys.Date(), \"%B %d, %Y\")\n\n\n\n1\n\nGet the date as a string of words and numbers.\n\n\n\n\n[1] \"October 23, 2024\"",
    "crumbs": [
      "R",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Basics</span>"
    ]
  },
  {
    "objectID": "r_basics.html#pipe-operator",
    "href": "r_basics.html#pipe-operator",
    "title": "11  Basics",
    "section": "11.3 Pipe Operator |>",
    "text": "11.3 Pipe Operator |&gt;\nThe pipe operator (|&gt;) is a tool that allows you to chain function calls together in a more readable and concise way. It takes the output of one function and passes it as the first argument to the next function. This eliminates the need for temporary variables and makes your code easier to understand and maintain. The basic syntax for using the pipe operator is:\n\n\n\nR\n\nexpression |&gt; function1(arg2, ...) |&gt; function2(arg2, ...)\n\n# A rewrite of this code:\nfunction2(function1(expression, arg2, ...), arg2, ...)\n\n\nA breakdown of what happens: - expression: This is the expression or object that you want to pipe. - function1: This is the first function that will be applied to the output of expression. - function2: This is the second function that will be applied to the output of function1. - arg2, …: These are any additional arguments that you want to pass to a function.\nYou can chain as many functions together as you need, creating a pipeline of operations.\n\nExample\n\n\n\nR\n\n1is.double(as.double(\"10\"))\n\n\n\n1\n\nConvert the string (Character) “10” to a double and check if it is a double data type.\n\n\n\n\n[1] TRUE\n\n\nThe above code can be clearly written as follows\n\n\n\nR\n\n1\"10\" |&gt; as.double() |&gt; is.double()\n\n\n\n1\n\nConvert the string (Character) “10” to a double and check if it is a double data type.\n\n\n\n\n[1] TRUE",
    "crumbs": [
      "R",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Basics</span>"
    ]
  },
  {
    "objectID": "r_data_structure.html",
    "href": "r_data_structure.html",
    "title": "12  Data Structure",
    "section": "",
    "text": "12.1 Vectors\nA vector is a basic data structure that holds elements of the same type. It can be numeric, character, logical, or complex. Vectors are one-dimensional arrays that can store multiple values under a single variable name.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Data Structure</span>"
    ]
  },
  {
    "objectID": "r_data_structure.html#vectors",
    "href": "r_data_structure.html#vectors",
    "title": "12  Data Structure",
    "section": "",
    "text": "Creating vectors\nVectors can be created using the c() function, which combines elements.\n\n\n12.1.1 Types of vectors\n\nNumeric\nThey includes both integers and real numbers.\nExample:\n\n\n\nR\n\n1num_vec &lt;- c(1, 2, 3)\n\nnum_vec\n\n\n\n1\n\nA numeric vector with a length of 3 and three unique values.\n\n\n\n\n[1] 1 2 3\n\n\n\n\n\nCharacter\nThey usually contain multiple text or string values.\nExample:\n\n\n\nR\n\n1chr_vec &lt;- c(\"low\", \"medium\", \"high\")\n\nchr_vec\n\n\n\n1\n\nA character vector with a length of 3 and three unique values.\n\n\n\n\n[1] \"low\"    \"medium\" \"high\"  \n\n\n\n\n\nLogical\nThey usually contain a series of Boolean values.\n\n\n\nR\n\n1lgc_vec &lt;- c(TRUE, T, FALSE, F)\n\nlgc_vec\n\n\n\n1\n\nA logical vector with a length of 3 and three unique values.\n\n\n\n\n[1]  TRUE  TRUE FALSE FALSE\n\n\n\n\n\n\n\n\n\nCoercion and Conversion\n\n\n\nCoercion refers to the automatic or manual conversion of data types within a vector to ensure uniformity. Each vector can only contain one type of data; if you attempt to mix types, R will coerce them into the most flexible type.\n\nLogical to Numeric: TRUE becomes 1 and FALSE becomes 0.\n\n\n\n\nR\n\n1c(TRUE, 1, F, 0)\n\n\n\n1\n\nA vector containing multiple data types including logical and double.\n\n\n\n\n[1] 1 1 0 0\n\n\n\nNumeric to Character: Numbers are converted to strings.\n\n\n\n\nR\n\n1c(\"10\", 10.5, \"11\", 11.5)\n\n\n\n1\n\nA vector containing multiple data types including character and double.\n\n\n\n\n[1] \"10\"   \"10.5\" \"11\"   \"11.5\"\n\n\n\nLogical to Character: Boolean are converted to strings (TRUE becomes “TRUE”).\n\n\n\n\nR\n\n1c(TRUE, \"One\", FALSE, \"Zero\")\n\n\n\n1\n\nA vector containing multiple data types including logical and characters.\n\n\n\n\n[1] \"TRUE\"  \"One\"   \"FALSE\" \"Zero\" \n\n\n\n\n\n\n\n\n12.1.2 Explicit conversion\nManual conversion of data types can be performed using functions like as.numeric(), as.character(), as.logical(), etc. For example:\n\n\n\nR\n\n1num_vec &lt;- c(\"1\", \"2\", \"3\")\n\n2as.numeric(num_vec)\n\n\n\n1\n\nCreate a character vector with a length of three unique values.\n\n2\n\nConvert the vector to a numeric data type (double).\n\n\n\n\n[1] 1 2 3\n\n\n\n\n\nR\n\n1log_vec &lt;- c(1, 0, 1)\n\n2as.logical(log_vec)\n\n\n\n1\n\nCreate a numeric vector with a length of three unique values.\n\n2\n\nConvert the vector to a logical data type (double).\n\n\n\n\n[1]  TRUE FALSE  TRUE\n\n\n  \n\n\nUsing (:)\nThe colon operator (:) is used to create sequences of numbers in R. It is often the simplest way to generate numeric vectors with a regular sequence.\nExample In ascending order:\n\n\n\nR\n\n1seq_asc_num_vec &lt;- 1:10\n\nseq_asc_num_vec\n\n\n\n1\n\nGenerates a sequence from 1 to 10: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10.\n\n\n\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nExample In descending order:\n\n\n\nR\n\n1seq_desc_num_vec &lt;- 10:1\n\nseq_desc_num_vec\n\n\n\n1\n\nGenerates a sequence from 10 to 1: 10, 9, 8, 7, 6, 5, 4, 3, 2, 1.\n\n\n\n\n [1] 10  9  8  7  6  5  4  3  2  1\n\n\n  \n\n\n12.1.3 Get the length\nYou can get the number of elements in a vector by using the length() function:\n\n\n\nR\n\nseq_asc_num_vec\n\n1length(seq_asc_num_vec)\n\n\n\n1\n\nGet the length of elements in a vector.\n\n\n\n\n [1]  1  2  3  4  5  6  7  8  9 10\n[1] 10\n\n\n  \n\n\n12.1.4 Check for unique values\nTo retrieve the unique elements in a vector, you can use the unique() function:\n\n\n\nR\n\nvec &lt;- c(\"High\", \"Low\", \"Medium\", \"High\", \"Medium\")\n\n1unique(vec)\n\n\n\n1\n\nRetrieve only unique values from the vector.\n\n\n\n\n[1] \"High\"   \"Low\"    \"Medium\"\n\n\n  \n\n\n12.1.5 Names\nvector names are labels or identifiers assigned to individual elements within a vector. They provide a way to reference specific elements without having to know their numerical index. This can make your code more readable and easier to maintain.\n\n\n\nR\n\n1new_vec &lt;- c(a = 10, b = 20, c = 30)\n\nnew_vec\n\n\n\n1\n\nCreate a numeric vector with names.\n\n\n\n\n a  b  c \n10 20 30 \n\n\nYou can also use the names() function to assign names:\n\n\n\nR\n\n1new_vec &lt;- c(10, 20, 30)\n\nprint(new_vec)\n\n\n\n1\n\nCreate a numeric vector\n\n\n\n\n[1] 10 20 30\n\n\n\n\n\nR\n\n1names(new_vec) &lt;- c(\"a\", \"b\", \"c\")\n\nprint(new_vec)\n\n\n\n1\n\nAssign the names “a”, “b”, “c” to the values in the new_vec respectively.\n\n\n\n\n a  b  c \n10 20 30 \n\n\n\nAccessing elements by name\nTo access an element in a named vector, the square brackets [] (an extract function) can be very useful.\n\n\n\nR\n\n1new_vec[\"a\"]\n\n\n\n1\n\nGet the value with the name “a”\n\n\n\n\n a \n10 \n\n\n\n\nModifying elements by name\nAny element in a vector can be changed by reassigning new values using the element name.\n\n\n\nR\n\n1new_vec[\"a\"] &lt;- 100\n\nnew_vec\n\n\n\n1\n\nChange the value of a from 10 to 100\n\n\n\n\n  a   b   c \n100  20  30 \n\n\n\n\nRemoving names\nThe names of a vector can be dropped by assigning NULL to the names using the names() function.\n\n\n\nR\n\n1names(new_vec) &lt;- NULL\n\nnew_vec\n\n\n\n1\n\nRemove the names assigned to the vector.\n\n\n\n\n[1] 100  20  30\n\n\n  \n\n\n\n12.1.6 Important Vector Operations\n\n12.1.6.1 Indexing:\nAccess elements using square brackets.\n\n\n\nR\n\nvec &lt;- c(10, 20, 30)\n\n1vec[2]\n\n\n\n1\n\nAccess the second element: 20\n\n\n\n\n[1] 20\n\n\n\n\n\n12.1.6.2 Vector arithmetic:\nThe operations on vectors are element-wise.\n\n\n\nR\n\nvec_1 &lt;- c(1, 2, 3)\n\nvec_2 &lt;- c(4, 5, 6)\n\n1vec_1 + vec_2\n\n\n\n1\n\nAdds corresponding elements: (1+4), (2+5), (3+6)\n\n\n\n\n[1] 5 7 9\n\n\n\n\n\n12.1.6.3 Vector Recycling:\nWhen vectors of different lengths are combined, the shorter one is recycled.\n\n\n\nR\n\nvec_1 &lt;- c(1, 2)\n\nvec_2 &lt;- c(3, 4, 5, 6)\n\n1vec_1 + vec_2\n\n\n\n1\n\nRecycles vec_1: (1+3), (2+4), (1+5), (2+6)\n\n\n\n\n[1] 4 6 6 8\n\n\n\n\n\n12.1.6.4 Filtering with logical vectors:\nYou can use logical vectors to subset data.\n\n\n\nR\n\nvec &lt;- c(10, 20, 30, 40)\n\n1vec[vec &gt; 20]\n\n\n\n1\n\nFilters elements greater than 20\n\n\n\n\n[1] 30 40\n\n\n\n\n\n12.1.6.5 Combining vectors:\nYou can combine multiple vectors using the c() function:\n\n\n\nR\n\nvec_1 &lt;- c(1, 2)\n\nvec_2 &lt;- c(3, 4)\n\nc(vec_1, vec_2) \n\n\n[1] 1 2 3 4",
    "crumbs": [
      "R",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Data Structure</span>"
    ]
  },
  {
    "objectID": "r_data_structure.html#matrix",
    "href": "r_data_structure.html#matrix",
    "title": "12  Data Structure",
    "section": "12.2 Matrix",
    "text": "12.2 Matrix\nA matrix represent a two-dimensional arrays of data arranged in rows and columns. Matrices are essentially vectors with a dimension attribute and they are particularly useful for mathematical computations and data analysis.\n\n12.2.1 Creating Matrices\nThe matrix() function is the primary way to create matrices in R. The basic syntax is:\n\n\n\nR\n\nmatrix(data, nrow, ncol, byrow = FALSE, dimnames = NULL)\n\n\n\ndata: The elements to be included in the matrix (usually a vector).\nnrow: The number of rows.\nncol: The number of columns.\nbyrow: A logical value indicating whether to fill the matrix by rows (TRUE) or by columns (FALSE).\ndimnames: Optional names of row and column names.\n\nExamples:\n\n\n\nR\n\n11:6\n\n\n\n1\n\nCreate a sequence of numeric values from 1 to 6\n\n\n\n\n[1] 1 2 3 4 5 6\n\n\n\nColumn-wise filling:\n\n\n\nR\n\n1matrix(1:6, nrow = 2, ncol = 3)\n\n\n\n1\n\nFill the matrix by column (top =&gt; down =&gt; right)\n\n\n\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\n\n\nRow-wise filling:\n\n\n\nR\n\n1matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE)\n\n\n\n1\n\nFill the matrix by row (top =&gt; right =&gt; down)\n\n\n\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\n\n\n\n\n\n12.2.2 Accessing elements in a matrix:\nYou can access elements, rows, columns, or subsets of a matrix using indexing with square brackets [].\n\n\n\nR\n\n1mat &lt;- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE)\n\nmat\n\n\n\n1\n\nCreate a row-wise filling matrix.\n\n\n\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\n\n\nSingle element:\n\n\n\nR\n\n1mat[1, 1]\n\n\n\n1\n\nAccess element in the 1st row, 1st column.\n\n\n\n\n[1] 1\n\n\n\n\n\nR\n\n1mat[1, 2]\n\n\n\n1\n\nAccess element in the 1st row, 2nd column.\n\n\n\n\n[1] 2\n\n\n\n\n\nEntire row:\n\n\n\nR\n\n1mat[1, ]\n\n\n\n1\n\nAccess all elements in the 1st row.\n\n\n\n\n[1] 1 2 3\n\n\n\n\n\nR\n\n1mat[2, ]\n\n\n\n1\n\nAccess all elements in the 2nd row.\n\n\n\n\n[1] 4 5 6\n\n\n\n\n\nEntire column:\n\n\n\nR\n\n1mat[, 1]\n\n\n\n1\n\nAccess all elements in the 1st column.\n\n\n\n\n[1] 1 4\n\n\n\n\n\nR\n\n1mat[, 3]\n\n\n\n1\n\nAccess all elements in the 3rd column.\n\n\n\n\n[1] 3 6\n\n\n\n\n\nSub-matrix:\n\n\n\nR\n\n1mat[1:2, 2:3]\n\n\n\n1\n\nAccess a sub-matrix with rows 1 to 2 and columns 2 to 3\n\n\n\n\n     [,1] [,2]\n[1,]    2    3\n[2,]    5    6\n\n\n\n\n\n12.2.3 Adding rows and columns\nTo add rows or columns to a matrix: - Use rbind() to add a row. - Use cbind() to add a column.\n\nAdd new row:\n\n\n\nR\n\n1mat &lt;- rbind(mat, c(7, 8, 9))\n\nmat\n\n\n\n1\n\nAdd a new row to the matrix using a vector c(7, 8, 9)\n\n\n\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n\n\n\nAdd new column:\n\n\n\nR\n\n1cbind(mat, c(0, 0, 0))\n\n\n\n1\n\nAdd a new column to the matrix using a vector c(0, 0, 0)\n\n\n\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    2    3    0\n[2,]    4    5    6    0\n[3,]    7    8    9    0\n\n\n \n\n\n\n12.2.4 Matrix operations\nMatrices support various operations, including arithmetic operations, matrix multiplication, transposition, and element-wise functions.\n\n\n\nR\n\nmat_1 &lt;- matrix(1:4, nrow = 2)\nmat_2 &lt;- matrix(5:8, nrow = 2)\n\nmat_1\n\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\nmat_2\n\n     [,1] [,2]\n[1,]    5    7\n[2,]    6    8\n\n\n\nArithmetic operations\nAddition element-wise:\n\n\n\nR\n\n1mat_1 + mat_2\n\n\n\n1\n\nAdds corresponding elements.\n\n\n\n\n     [,1] [,2]\n[1,]    6   10\n[2,]    8   12\n\n\nMultiplication element-wise:\n\n\n\nR\n\n1mat_1 * mat_2\n\n\n\n1\n\nMultiplies corresponding elements.\n\n\n\n\n     [,1] [,2]\n[1,]    5   21\n[2,]   12   32\n\n\n\n\n\nTransposing a matrix\nUsing the t() function to transpose a matrix e.i. swap rows and columns\n\n\n\nR\n\nt(mat)\n\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\n\n\n\nMatrix multiplication\nUse %*% for matrix multiplication (dot product), not element-wise\n\n\n\nR\n\n1mat_1 %*% t(mat_2)\n\n\n\n1\n\nMultiplies mat_1 with the transpose of mat_2\n\n\n\n\n     [,1] [,2]\n[1,]   26   30\n[2,]   38   44",
    "crumbs": [
      "R",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Data Structure</span>"
    ]
  },
  {
    "objectID": "r_data_structure.html#list",
    "href": "r_data_structure.html#list",
    "title": "12  Data Structure",
    "section": "12.3 List",
    "text": "12.3 List\nLists in R are versatile data structures that can hold elements of different types, including vectors, matrices, data frames, and even other lists. They are essential for organizing complex and heterogeneous data.\n\n12.3.1 Creating lists\nThe primary way to create a list in R is by using the list() function. The basic Syntax:\n\n\n\nR\n\nlist(element1, element2, ...)\n\n\nExamples:\n\nCreating a simple list\n\n\n\nR\n\n1list(1, \"apple\", TRUE, 3.14)\n\n\n\n1\n\nCreate a list with different data types.\n\n\n\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] \"apple\"\n\n[[3]]\n[1] TRUE\n\n[[4]]\n[1] 3.14\n\n\n\n\nCreating a named list\n\n\n\nR\n\n1list(number = 1, fruit = \"apple\", logic = TRUE, pi = 3.14)\n\n\n\n1\n\nCreate a named list with different data types.\n\n\n\n\n$number\n[1] 1\n\n$fruit\n[1] \"apple\"\n\n$logic\n[1] TRUE\n\n$pi\n[1] 3.14\n\n\n\n\n\n\n12.3.2 Accessing elements in a list:\nYou can access elements in a list using single brackets [], double brackets [[]], or the $ operator for named elements.\n\n\n\nR\n\nmy_list &lt;- list(\n  numbers = 1:10,\n  letters = c(\"a\", \"b\", \"c\", \"d\"),\n  logic = c(TRUE, FALSE),\n  date = c(\"2024-01-01\", \"2024-02-01\", \"2024-03-01\")\n)\n\nmy_list\n\n\n$numbers\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$letters\n[1] \"a\" \"b\" \"c\" \"d\"\n\n$logic\n[1]  TRUE FALSE\n\n$date\n[1] \"2024-01-01\" \"2024-02-01\" \"2024-03-01\"\n\n\n\n\n\n\n\n\nGet names of a named list\n\n\n\nYou can get the names of a named list using the names() function:\n\n\n\nR\n\nnames(my_list)\n\n\n[1] \"numbers\" \"letters\" \"logic\"   \"date\"   \n\n\n\n\n\nUsing single brackets [ ]\nThis will returns a subset of a list while preserving the list structure.\nExample:\n\n\n\nR\n\n1my_list[1]\n\n\n\n1\n\nReturns a list containing the first element. numbers\n\n\n\n\n$numbers\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\n\n\nUsing double brackets [[ ]]\nThis will extracts the actual element, not as a list but in its original form.\nExample:\n\n\n\nR\n\n1my_list[[1]]\n\n\n\n1\n\nReturns the first element itself.\n\n\n\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\n\n\nUsing the $ operator\nThis is used to easily access named elements.\nExample:\n\n\n\nR\n\n1my_list$date\n\n\n\n1\n\nReturns the element named “date”\n\n\n\n\n[1] \"2024-01-01\" \"2024-02-01\" \"2024-03-01\"\n\n\n\n\n\n\n\n\nThe [[ ]] for accessing named elements.\n\n\n\nYou can also use the double brackets [[ ]] to access an element in a list using the assigned name of the element. To do this you need to place the name in between a quote.\nExample:\n\n\n\nR\n\n1my_list[[\"date\"]]\n\n\n\n1\n\nReturns the element named “date”\n\n\n\n\n[1] \"2024-01-01\" \"2024-02-01\" \"2024-03-01\"\n\n\n\n\n \n\n\n\n12.3.3 Modifying lists\nYou can modify elements in a list by assigning new values using the indexing methods.\n\nModifying elements:\n\n\n\nR\n\n1my_list[[1]] &lt;- 20:30\n2my_list$date &lt;- c(\"2024-04-15\", \"2024-05-30\")\n\nmy_list\n\n\n\n1\n\nChanges the first element to a sequence of 20 to 30 numbers.\n\n2\n\nChanges the “date” element\n\n\n\n\n$numbers\n [1] 20 21 22 23 24 25 26 27 28 29 30\n\n$letters\n[1] \"a\" \"b\" \"c\" \"d\"\n\n$logic\n[1]  TRUE FALSE\n\n$date\n[1] \"2024-04-15\" \"2024-05-30\"\n\n\n\n\nAdding new elements:\nYou can add new elements to a list. This will append the new element to the main list.\n\n\n\nR\n\n1my_list$new_element &lt;- c(1.5, 2.5, 3.5)\n\nmy_list\n\n\n\n1\n\nAdds a new element (a vector with double data type) with name “new_element”\n\n\n\n\n$numbers\n [1] 20 21 22 23 24 25 26 27 28 29 30\n\n$letters\n[1] \"a\" \"b\" \"c\" \"d\"\n\n$logic\n[1]  TRUE FALSE\n\n$date\n[1] \"2024-04-15\" \"2024-05-30\"\n\n$new_element\n[1] 1.5 2.5 3.5\n\n\n\n\nRemoving elements:\n\n\n\nR\n\n1my_list[[\"logic\"]] &lt;- NULL\n\nmy_list\n\n\n\n1\n\nRemoves the element named “logic”\n\n\n\n\n$numbers\n [1] 20 21 22 23 24 25 26 27 28 29 30\n\n$letters\n[1] \"a\" \"b\" \"c\" \"d\"\n\n$date\n[1] \"2024-04-15\" \"2024-05-30\"\n\n$new_element\n[1] 1.5 2.5 3.5\n\n\n \n\n\n\n12.3.4 List operations\nA list can be manipulated using various functions and operators.\n\nCombining lists\nYou can use c() to combine multiple lists into a single list.\n\n\n\nR\n\nlist_1 &lt;- list(1, 2, 3)\n\nlist_2 &lt;- list(\"a\", \"b\", \"c\")\n\n1c(list_1, list_2)\n\n\n\n1\n\nCombine list_1 and list_2 into a single list\n\n\n\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 2\n\n[[3]]\n[1] 3\n\n[[4]]\n[1] \"a\"\n\n[[5]]\n[1] \"b\"\n\n[[6]]\n[1] \"c\"\n\n\n\n\n\nApplying functions to lists\nUse lapply() and sapply() to apply functions over list elements.\n\nUsing lapply() will returns a list.\n\n\n\n\nR\n\n1sum(1:5)\n2sum(6:10)\n\n\n\n1\n\nGet the sum of the sequence 1 to 5: 1, 2, 3, 4, 5\n\n2\n\nGet the sum of the sequence 6 to 10: 6, 7, 8, 9, 10\n\n\n\n\n[1] 15\n[1] 40\n\n\n\n\n\nR\n\nnum_list &lt;- list(a = 1:5, b = 6:10)\nnum_list\n\n\n$a\n[1] 1 2 3 4 5\n\n$b\n[1]  6  7  8  9 10\n\n\n\n\n\nR\n\n1lapply(num_list, sum)\n\n\n\n1\n\nApplies the sum function to each list element\n\n\n\n\n$a\n[1] 15\n\n$b\n[1] 40\n\n\n\nUsing sapply() Tries to simplify the result (returns a vector or matrix if possible).\n\n\n\n\nR\n\n1sapply(num_list, sum)\n\n\n\n1\n\nReturns a vector of sums\n\n\n\n\n a  b \n15 40 \n\n\n\n\n\nFlattening a List\nYou can use the function unlist() to convert a list into a vector.\n\n\n\nR\n\nnum_list &lt;- list(1:10, 11:20, 20:25)\n\n\n\nunlist(num_list)\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 20 21 22 23 24\n[26] 25",
    "crumbs": [
      "R",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Data Structure</span>"
    ]
  },
  {
    "objectID": "r_data_structure.html#data-frames",
    "href": "r_data_structure.html#data-frames",
    "title": "12  Data Structure",
    "section": "12.4 Data Frames",
    "text": "12.4 Data Frames\nA data frame in R is a two-dimensional data structure that can store different types of data in a tabular format. It’s similar to a spreadsheet or a table in a database where each column can contain values of different types (numeric, character, factor, etc.), and each row represents an observation. It is essentially a list of vectors of equal length.\n\n\n\n\n\n\nKey characteristics of data frames:\n\n\n\n\n\n\nColumns: Represent variables or attributes (e.g., age, height, income).\nRows: Represent individual observations or cases (e.g., people, products, experiments).\nData types: Each column can store data of different types (e.g., numeric, character, factor, logical).\nHomogeneous rows: All rows must have the same number of elements. I.e equal length\n\n\n\n\n\n12.4.1 Creating Data Frames\nThe most common way to create a data frame in base R is with the data.frame() function.\n\n\n\nR\n\ndata.frame(column_name1 = values1, column_name2 = values2, ...)\n\n\nExample:\n\n\n\nR\n\ndf &lt;- data.frame(\n  id = 1:4,\n  name = c(\"Alice\", \"Bob\", \"Charlie\", \"David\"),\n  age = c(23, 25, 30, 28),\n1  stringsAsFactors = FALSE\n)\n\ndf\n\n\n\n1\n\nPrevents automatic conversion of strings to factors.\n\n\n\n\n  id    name age\n1  1   Alice  23\n2  2     Bob  25\n3  3 Charlie  30\n4  4   David  28\n\n\n\n12.4.1.1 Converting other objects to data frames\nYou can convert matrices, lists, and vectors into data frames.\n\n\nFrom vectors:\n\nid_vec &lt;- 1:4\nname_vec &lt;- c(\"Alice\", \"Bob\", \"Charlie\", \"David\")\nage_vec &lt;- c(23, 25, 30, 28)\n\ndata.frame(id = id_vec, name = name_vec, age = age_vec)\n\n  id    name age\n1  1   Alice  23\n2  2     Bob  25\n3  3 Charlie  30\n4  4   David  28\n\n\n\n\nFrom a matrix:\n\n\n\nR\n\nmat &lt;- matrix(1:9, nrow = 3)\n\nmat\n\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\n\n\n\nR\n\nas.data.frame(mat)\n\n\n  V1 V2 V3\n1  1  4  7\n2  2  5  8\n3  3  6  9\n\n\n\n\nFrom a list:\nYou can easily convert a named list to a data frame by placing the list as the data.frame() argument.\n\n\n\nR\n\nmy_list &lt;- list(\n  name = c(\"Eve\", \"Frank\"),\n  score = c(88, 92)\n)\n\nmy_list\n\n\n$name\n[1] \"Eve\"   \"Frank\"\n\n$score\n[1] 88 92\n\n\n\n\n\nR\n\nas.data.frame(my_list)\n\n\n   name score\n1   Eve    88\n2 Frank    92\n\n\n \n\n\n\n12.4.2 Accessing elements in data frames\n\n$ Operator\nA column can be accessed by its name using the $ operator.\n\n\n\nR\n\n1df$name\n\n\n\n1\n\nGet the values in the name column (returns a vector)\n\n\n\n\n[1] \"Alice\"   \"Bob\"     \"Charlie\" \"David\"  \n\n\n\n\n[] Indexing\n\n\nSingle Brackets []\nAccessing elements in a data frame using a single bracket returns a data frame as the output\nAccess rows\n\n\n\nR\n\n1df[1, ]\n\n\n\n1\n\nAccess only the first row in the data frame including all columns (id, name, age)\n\n\n\n\n  id  name age\n1  1 Alice  23\n\n\nAccess columns\n\n\n\nR\n\n1df[, 1]\n\n\n\n1\n\nAccess the first column (id) in a data frame including all rows (records) in that specific column.\n\n\n\n\n[1] 1 2 3 4\n\n\nOR\n\n\n\nR\n\n1df[1]\n\n\n\n1\n\nThe will return a data frame.\n\n\n\n\n  id\n1  1\n2  2\n3  3\n4  4\n\n\nAccess single elements\n\n\n\nR\n\n1df[1, 1]\n\n\n\n1\n\nAccess the first row and first column in the data frame. This will return a single value.\n\n\n\n\n[1] 1\n\n\nAccess multiple elements\n\n\n\nR\n\n1df[c(1, 3), c(1, 3)]\n\n\n\n1\n\nAccess the first and third rows as well as the first and third columns.\n\n\n\n\n  id age\n1  1  23\n3  3  30\n\n\n\n\n\nDouble Brackets [[]]:\n\n\n\nR\n\n1df[[2]]\n\n\n\n1\n\nAccess the second column as a vector\n\n\n\n\n[1] \"Alice\"   \"Bob\"     \"Charlie\" \"David\"  \n\n\nOR\n\n\n\nR\n\ndf[[\"name\"]]\n\n\n[1] \"Alice\"   \"Bob\"     \"Charlie\" \"David\"  \n\n\n\n\n\nsubset():\nThe subset() function helps to filter rows based on conditions.\n\n\n\nR\n\n1subset(df, age &gt; 25)\n\n\n\n1\n\nReturns row where age &gt; 25\n\n\n\n\n  id    name age\n3  3 Charlie  30\n4  4   David  28\n\n\n  \n\n\n\n12.4.3 Modifying data frames\n\nAdding new columns\n\n\n\nR\n\n1df$gender &lt;- c(\"Female\", \"Male\", \"Male\", \"Female\")\n\ndf\n\n\n\n1\n\nAdds a new column “gender” to the data frame.\n\n\n\n\n  id    name age gender\n1  1   Alice  23 Female\n2  2     Bob  25   Male\n3  3 Charlie  30   Male\n4  4   David  28 Female\n\n\nOR\n\n\n\nR\n\n1df[[\"gender\"]] &lt;- c(\"Female\", \"Male\", \"Male\", \"Female\")\n\ndf\n\n\n\n1\n\nAdds a new column “gender” to the data frame.\n\n\n\n\n  id    name age gender\n1  1   Alice  23 Female\n2  2     Bob  25   Male\n3  3 Charlie  30   Male\n4  4   David  28 Female\n\n\n\n\n\nModifying existing columns\n\n\n\nR\n\n1df$age &lt;- df$age + 1\n\ndf\n\n\n\n1\n\nIncrements all values in “age” by 1\n\n\n\n\n  id    name age gender\n1  1   Alice  24 Female\n2  2     Bob  26   Male\n3  3 Charlie  31   Male\n4  4   David  29 Female\n\n\n\n\nRemoving columns\n\n\n\nR\n\n1df$gender &lt;- NULL\n\n\n\n1\n\nRemoves the “gender” column from the data frame by setting it value to NULL\n\n\n\n\n\n\n\n\n12.4.4 Manipulating records\n\nAdding new rows\n\n\n\nR\n\nnew_row &lt;- data.frame(id = 5, name = \"Ellen\", age = 24)\n\nnew_row\n\n\n  id  name age\n1  5 Ellen  24\n\n\n\n\n\nR\n\n1df &lt;- rbind(df, new_row)\n\n\n\n1\n\nAdds a new row using the rbind() function.\n\n\n\n\n\n\nRemoving rows\n\n\n\nR\n\n1df &lt;- df[-2, ]\n\n\n\n1\n\nRemoves the second row.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Data Structure</span>"
    ]
  },
  {
    "objectID": "r_operators.html",
    "href": "r_operators.html",
    "title": "13  Operators",
    "section": "",
    "text": "13.1 Comparison operators\nComparison operators are essential tools that allow you to compare values and make logical decisions based on the results. These operators return a logical value (TRUE or FALSE) depending on the outcome of the comparison.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Operators</span>"
    ]
  },
  {
    "objectID": "r_operators.html#comparison-operators",
    "href": "r_operators.html#comparison-operators",
    "title": "13  Operators",
    "section": "",
    "text": "13.1.1 Equality Operators\n\nEqual to ( == )\nThis operator checks if two values are equal. If they are equal, it returns TRUE, otherwise, it returns FALSE.\nExample\n\n\n\nR\n\n110 == 10\n\n\n\n1\n\nCheck if 10 equal to 10.\n\n\n\n\n[1] TRUE\n\n\n\n\n\nR\n\n1\"Hello\" == \"Hello\"\n\n\n\n1\n\nCheck if both strings the same.\n\n\n\n\n[1] TRUE\n\n\n\n\nNot equal to ( != )\nThis operator checks if two values are not equal. It returns TRUE if the values differ and FALSE if they are the same.\nExample\n\n\n\nR\n\n110 != 10\n\n\n\n1\n\nCheck if 10 not equal to 10.\n\n\n\n\n[1] FALSE\n\n\n\n\n\nR\n\n1TRUE != FALSE\n\n\n\n1\n\nCheck if TRUE not equal to FALSE\n\n\n\n\n[1] TRUE\n\n\n\n\n\n13.1.2 Relational operators\n\nGreater than ( &gt; )\nThis operator checks if the left operand is greater than the right operand.\nExample\n\n\n\nR\n\n1100 &gt; 50\n\n\n\n1\n\nCheck if 100 is greater than 50\n\n\n\n\n[1] TRUE\n\n\n\n\nGreater than or equal to ( &gt;= )\nThis operator checks if the left operand is greater than or equal to the right operand.\nExample\n\n\n\nR\n\n1100 &gt;= 100\n\n\n\n1\n\nCheck if 100 is greater than or equal to 100\n\n\n\n\n[1] TRUE\n\n\n\n\nLess than ( &lt; )\nThis operator checks if the left operand is less than the right operand. It returns TRUE if this condition holds true.\nExample\n\n\n\nR\n\n1100 &lt; 50\n\n\n\n1\n\nCheck if 100 is less than 50.\n\n\n\n\n[1] FALSE\n\n\n\n\nLess than or equal to ( &lt;= )\nThis operator checks if the left operand is less than or equal to the right operand.\nExample\n\n\n\nR\n\n150 &lt;= 120\n\n\n\n1\n\nCheck if 50 is less than or equal to 120.\n\n\n\n\n[1] TRUE\n\n\n\n\nIN ( %in% )\nThe %in% operator in R is a built-in infix operator used to determine if elements of one vector are present in another vector. It returns a logical vector indicating whether each element of the first vector matches any element of the second vector\nExample\n\n\n\nR\n\n5 %in% c(3, 5, 7, 9)\n\n\n[1] TRUE\n\n\nThis operator is particularly useful for value matching and can be applied to both numeric and character vectors.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Operators</span>"
    ]
  },
  {
    "objectID": "r_operators.html#logical-operators",
    "href": "r_operators.html#logical-operators",
    "title": "13  Operators",
    "section": "13.2 Logical operators",
    "text": "13.2 Logical operators\nLogical can operators combine multiple conditions and evaluate them:\n\nAND ( & )\nThe & operator is known as the element-wise AND operator. It takes two logical vectors and compares them element by element. The result is a new logical vector where each element is TRUE if both corresponding elements from the input vectors are TRUE; otherwise, it is FALSE.\nExample:\n\n\n\nR\n\n1(10 &gt; 5) & (5 &lt; 50)\n\n\n\n1\n\nCheck whether both left and right hand side is TRUE\n\n\n\n\n[1] TRUE\n\n\n\n\nOR ( | )\nThe | operator functions as the element-wise OR operator. It also compares two logical vectors element by element but returns TRUE if at least one of the corresponding elements is TRUE. If both are FALSE, then it returns FALSE.\nExample:\n\n\n\nR\n\n1(10 &gt; 100) | (20 &lt;= 50)\n\n\n\n1\n\nCheck whether any of the left and right hand side is TRUE\n\n\n\n\n[1] TRUE",
    "crumbs": [
      "R",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Operators</span>"
    ]
  },
  {
    "objectID": "r_operators.html#negation-operator-not",
    "href": "r_operators.html#negation-operator-not",
    "title": "13  Operators",
    "section": "Negation operator ( Not ! )",
    "text": "Negation operator ( Not ! )\nThe ! operator represents logical negation NOT. It takes a single logical value and returns its opposite: if the input value is TRUE, it returns FALSE; if it’s FALSE, it returns TRUE.\nExample:\n\n\n\nR\n\n1!(10 &gt; 5)\n\n\n\n1\n\nNegate the output of the value 10 &gt; 5\n\n\n\n\n[1] FALSE",
    "crumbs": [
      "R",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Operators</span>"
    ]
  },
  {
    "objectID": "r_operators.html#special-comparison-operators",
    "href": "r_operators.html#special-comparison-operators",
    "title": "13  Operators",
    "section": "Special comparison operators",
    "text": "Special comparison operators\n\nidentical()\nThis checks whether two objects are exactly identical in terms of attributes and types.\n\nobj_1 &lt;- c(1, 2, 3)\nobj_2 &lt;- c(1, 2, 3)\n\nidentical(obj_1, obj_2)\n\n[1] TRUE",
    "crumbs": [
      "R",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Operators</span>"
    ]
  },
  {
    "objectID": "r_operators.html#control-flow",
    "href": "r_operators.html#control-flow",
    "title": "13  Operators",
    "section": "13.3 Control Flow",
    "text": "13.3 Control Flow\n\n13.3.1 IF ELSE\nThis is used to execute code conditionally based on whether one or more conditions are true. This structure allows you to make decisions within your code and perform different actions depending on the outcome of those conditions.\n\nBasic Structure and Syntax\nThe structure allows for multiple conditions to be checked in sequence. The first true condition will have its corresponding block of code executed, and the rest will be skipped.\n\n\n\nR\n\nif (condition1) {\n  # Code to execute if condition1 is TRUE\n} else if (condition2) {\n  # Code to execute if condition2 is TRUE\n} else {\n  # Code to execute if none of the above conditions are TRUE\n}\n\n\n\nif Statement: Checks the first condition. If it’s true, the code block inside the if statement is executed.\n\nelse if Statement: Checks the next condition if the previous if or else if was false. You can have multiple else if statements.\n\nelse Statement: Executes a block of code if none of the preceding if or else if conditions are true. The else statement is optional.\n\n\n\n\n\n\n\nHow it works\n\n\n\n\nThe if condition is evaluated first.\nIf the if condition is true, its block of code runs, and the rest (else if and else) are skipped.\nIf the if condition is false, the next else if condition is evaluated.\nThis process continues through all else if conditions.\nIf no if or else if conditions are true, the else block is executed.\n\n\n\nExamples Basic Example\n\n\n\nR\n\nx &lt;- 200\n\nif (x &lt; 10) {\n  print(\"x is less than 10\")\n} else if (x &gt; 200) {\n  print(\"x is greater then 200\")\n} else {\n  print(\"x is equal 200\")\n}\n\n\n[1] \"x is equal 200\"\n\n\nUsing Multiple else if Statements\n\n\n\nR\n\nscore &lt;- 105\n\nif (score &gt;= 90) {\n  grade &lt;- \"A\"\n} else if (score &gt;= 80) {\n  grade &lt;- \"B\"\n} else if (score &gt;= 70) {\n  grade &lt;- \"C\"\n} else if (score &gt;= 60) {\n  grade &lt;- \"D\"\n} else {\n  grade &lt;- \"F\"\n}\n\nprint(grade)\n\n\n[1] \"A\"\n\n\n\n\n\nNested if…else statements\nif...else statements can be nested within each other, allowing for more complex decision trees.\nExample:\n\n\n\nR\n\nx &lt;- 5\ny &lt;- 10\n\nif (x &gt; 0) {\n  \n  if (y &gt; 5) {\n    \n    print(\"x is positive and y is greater than 5\")\n    \n  } else {\n    \n    print(\"x is positive and y is 5 or less\")\n    \n  }\n  \n} else {\n  \n  print(\"x is zero or negative\")\n  \n}\n\n\n[1] \"x is positive and y is greater than 5\"\n\n\n\n\nifelse() for vectorized operations\nFor vectorized operations, ifelse() function is preferred over if...else because it works element-wise on vectors, matrices, or arrays.\nBasic Syntax:\n\n\n\nR\n\nifelse(test_expression_or_condition, value_if_true, value_if_false)\n\n\nExample\n\n\n\nR\n\n1ifelse(10 &gt; 5, \"Condition is true\", \"Condition is false\")\n\n\n\n1\n\nUse ifelse() function to return a value based on the condition.\n\n\n\n\n[1] \"Condition is true\"\n\n\n\nNested option\n\n\n\nR\n\nx &lt;- c(5, 15, 25)\n\n1ifelse(x &lt; 10, \"Low\", ifelse(x &lt; 20, \"Medium\", \"High\"))\n\n\n\n1\n\nUse ifelse() function to classify values.\n\n\n\n\n[1] \"Low\"    \"Medium\" \"High\"  \n\n\n\n\nHandling complex conditions\nConditions can use logical operators (&&, ||, &, |, !) to combine multiple tests within a single if statement.\n\n\n\nR\n\nage &lt;- 30\nincome &lt;- 60000\n\n1if (age &gt; 25 && income &gt; 50000) {\n  \n  print(\"Eligible for the loan\")\n  \n} else if (age &gt; 25 || income &gt; 50000) {\n  \n  print(\"Partially eligible for the loan\")\n  \n} else {\n  \n  print(\"Not eligible for the loan\")\n  \n}\n\n\n\n1\n\nCheck whether age is greater than 25 and income is greater than 50000\n\n\n\n\n[1] \"Eligible for the loan\"\n\n\n\n\n\n\n\n\nKey points to remember\n\n\n\n\nCondition evaluation: Conditions must return TRUE or FALSE. Non-logical values are coerced to logical (e.g., 0 is FALSE and non-zero numbers are TRUE).\nShort-circuiting in && and ||: Use && and || for scalar comparisons and avoid evaluating unnecessary conditions for performance efficiency.\nElement-wise operations: For element-wise operations on vectors, always use & and | instead of && and ||.\n\n\n\n  \n\n\n\n13.3.2 For loop\nThe for loop is used to repeat a block of code for a specified number of iterations, typically by iterating over elements in a sequence, vector, list, or any iterable object. It is a control structure that helps automate repetitive tasks, making your code more efficient and readable.\nBasic Structure and Syntax\n\n\n\nR\n\nfor (variable in sequence) {\n  # Code to execute on each iteration\n}\n\n\n\nvariable: This is the loop variable that takes on each value in the sequence one at a time.\nsequence: This is the iterable object, such as a vector, list, or sequence, over which the loop iterates.\nLoop Body: The block of code inside the braces { } that is executed on each iteration.\n\n\n\n\n\n\n\nHow the for loop works\n\n\n\n\nThe loop starts by initializing the loop variable to the first value in the sequence.\nThe code inside the loop body is executed.\nThe loop variable is then updated to the next value in the sequence.\nSteps 2-3 are repeated until all values in the sequence have been processed.\n\n\n\nExamples: #### Basic for loop iterating over a vector {.unnumbered}\n\n\n\nR\n\n1for (i in 1:5) {\n2  print(i)\n}\n\n\n\n1\n\nUsing a sequence of 1 to 5\n\n2\n\nprint the current sequence variable.\n\n\n\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\n\nIterating over a character vector\n\n\n\nR\n\nstudent_names &lt;- c(\"Alice\", \"Bob\", \"Charlie\")\n\n1for (name in student_names) {\n2  print(name)\n}\n\n\n\n1\n\nUsing the student_names as the sequence of value.\n\n2\n\nPrint the current student name for that particular sequence.\n\n\n\n\n[1] \"Alice\"\n[1] \"Bob\"\n[1] \"Charlie\"\n\n\n\n\nnested for loops\nYou can nest for loops within each other to perform more complex iterations, such as iterating over rows and columns of a matrix.\n\n\n\nR\n\nmy_matrix &lt;- matrix(1:9, nrow=3)\n\n1for (i in 1:nrow(my_matrix)) {\n  \n2  for (j in 1:ncol(my_matrix)) {\n    print(my_matrix[i, j])\n  }\n  \n}\n\n\n\n1\n\nThe main for loop, iterating using i\n\n2\n\nThe nested for loop, iterating using j and i\n\n\n\n\n[1] 1\n[1] 4\n[1] 7\n[1] 2\n[1] 5\n[1] 8\n[1] 3\n[1] 6\n[1] 9\n\n\n\n\n\n13.3.3 Controlling loop execution\n\nbreak statement\nExits the loop immediately, skipping the remaining iterations.\n\n\n\nR\n\n1for (i in 1:5) {\n  \n2  if (i == 3) {\n    \n3    break\n    \n  }\n  \n4  print(i)\n}\n\n\n\n1\n\nUse a sequence from 1 to 5\n\n2\n\ncheck if the current sequence variable is 3\n\n3\n\nIf current variable sequence is 3 exit loop.\n\n4\n\nprint sequence variable until the value 3.\n\n\n\n\n[1] 1\n[1] 2\n\n\n\n\nnext statement\nSkips the current iteration and moves to the next one.\n\n\n\nR\n\n1for (i in 1:5) {\n  \n2  if (i == 3) {\n    \n3    next\n    \n  }\n  \n4  print(i)\n} \n\n\n\n1\n\nUse a sequence from 1 to 5\n\n2\n\ncheck if the current sequence variable is 3.\n\n3\n\nIf current variable sequence is 3 move to the next loop.\n\n4\n\nprint sequence variable as long as the value is not 3.\n\n\n\n\n[1] 1\n[1] 2\n[1] 4\n[1] 5\n\n\n\n\n13.3.3.1 Performance considerations: (Vectorization)\nWhenever possible, use vectorized functions like apply(), lapply(), sapply()\n\n\napply()\nThe apply() function allows us to perform operations on rows or columns of a matrix efficiently.\n\n\n\nR\n\nnew_matrix &lt;- matrix(1:12, nrow = 3)\n\n# calculate the sum of each row in the matrix\n1apply(new_matrix, MARGIN = 1, FUN = sum)\n\n\n\n1\n\nUse the apply() function to calculate the sum of each row.\n\n\n\n\n[1] 22 26 30\n\n\n\n\n\nR\n\n# calculate the mean of each column by setting MARGIN to 2\napply(new_matrix, MARGIN = 2, FUN = mean)\n\n\n[1]  2  5  8 11\n\n\n\n\nlapply()\nThe lapply() function is used to apply a function over a list or vector, returning a list of the same length as the input. Now we can use lapply() to get the square root of each element in the vector\n\n\n\nR\n\n1lapply(c(1, 2, 3, 4, 5), \\(x) x^2)\n\n\n\n1\n\nGet the square root of each element in the c(1, 2, 3, 4, 5)\n\n\n\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 4\n\n[[3]]\n[1] 9\n\n[[4]]\n[1] 16\n\n[[5]]\n[1] 25\n\n\n\n\nsapply()\nThe sapply() function is used for applying a function to each element of a vector or list and simplifying the output.\n\n\n\nR\n\n1sapply(c(1, 2, 3, 4, 5), \\(x) x^2)\n\n\n\n1\n\nGet the square root of each element in the c(1, 2, 3, 4, 5)\n\n\n\n\n[1]  1  4  9 16 25\n\n\n \n\n\n\n13.3.4 While loop\nThe while loop is used to repeatedly execute a block of code as long as a specified condition remains true. Unlike the for loop, which iterates over a sequence of values, the while loop relies on a condition and continues to loop until that condition is no longer met. It’s useful when the number of iterations is not known beforehand.\n\nBasic structure and syntax\n\n\n\nR\n\nwhile (condition) {\n  # Code to execute as long as the condition is TRUE\n}\n\n\n\ncondition: A logical expression that is evaluated before each iteration of the loop. If it evaluates to TRUE, the loop body is executed. If it evaluates to FALSE, the loop terminates.\nLoop Body: The block of code inside the braces { } that runs repeatedly as long as the condition is true.\n\n\n\n\n\n\n\nHow it works\n\n\n\n\nBefore each iteration, the condition is checked.\nIf the condition is true, the code inside the loop body is executed.\nAfter executing the loop body, the condition is checked again.\nThe loop continues until the condition becomes false.\n\n\n\nExamples\n\n\n\nR\n\n1counter &lt;- 1\n\n2while (counter &lt;= 5) {\n  print(counter)\n3  counter &lt;- counter + 1\n}\n\n\n\n1\n\nInitialize a counter starting from 1\n\n2\n\nLoop as long as counter is less than or equal to 5\n\n3\n\nIncrement the counter with 1\n\n\n\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\n\n\nUsing while loop for conditional repetition\n\n\n\nR\n\n1roll &lt;- 0\n\n2while (roll != 6) {\n3  roll &lt;- sample(1:6, 1)\n4  print(roll)\n}\n\n\n\n1\n\nInitial roll value\n\n2\n\nContinue to re-execute the loop as long as the roll values is not 6\n\n3\n\nRoll a die again\n\n4\n\nprint the current output of the die roll.\n\n\n\n\n[1] 4\n[1] 6\n\n\n\n\n\n13.3.5 Controlling the while loop execution\n\nbreak statement\nImmediately exits the loop, stopping further iterations.\n\n\n\nR\n\n1counter &lt;- 1\n\n2while (counter &lt;= 5) {\n  \n3  if (counter == 3) {\n4    break\n  }\n  \n5  print(counter)\n6  counter &lt;- counter + 1\n}\n\n\n\n1\n\nInitialize a counter starting from 1\n\n2\n\nContinue the loop as long as the counter is less than or equal to 5.\n\n3\n\nCheck if the current counter value is 3\n\n4\n\nExit loop when counter reaches 3\n\n5\n\nprint out the current counter value.\n\n6\n\nIncrement the counter with 1\n\n\n\n\n[1] 1\n[1] 2\n\n\n\n\nnext statement\nSkips the current iteration and moves to the next one.\n\n\n\nR\n\n1counter &lt;- 1\n\n2while (counter &lt;= 5) {\n  \n3  counter &lt;- counter + 1\n  \n4  if (counter == 3) {\n5    next\n  }\n  \n6  print(counter)\n}\n\n\n\n1\n\nInitialize a counter starting from 1\n\n2\n\nContinue the loop as long as the counter is less than or equal to 5.\n\n3\n\nIncrement the counter with 1\n\n4\n\nCheck if the current counter value is 3\n\n5\n\nSkip printing the number 3\n\n6\n\nPrint the current counter value.\n\n\n\n\n[1] 2\n[1] 4\n[1] 5\n[1] 6",
    "crumbs": [
      "R",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Operators</span>"
    ]
  },
  {
    "objectID": "r_operators.html#functions",
    "href": "r_operators.html#functions",
    "title": "13  Operators",
    "section": "13.4 Functions",
    "text": "13.4 Functions\nFunctions are essential for organizing and reusing code, making your programming more efficient and modular. They allow you to encapsulate blocks of code that perform specific tasks, which can then be executed with different inputs as needed.\n\nBasic Structure of Functions\nSyntax for Creating a Function:\n\n\n\nR\n\nfunction_name &lt;- function(arg1, arg2, ...) {\n  # Code to execute\n  # Return a value (optional)\n}\n\n# OR using the lambda function Syntax\n\nfunction_name &lt;- \\(arg1, arg2, ...) {\n  # Code to execute\n}\n\n\n\nfunction_name: The name of the function that you’ll use to call it later.\nArguments (arg1, arg2, …): Inputs to the function. These can have default values.\nFunction Body: The code inside the braces { } that defines what the function does.\nReturn Value: The result of the function, which can be explicitly returned using the return() function or implicitly as the last evaluated expression.\n\nExample\n\n\n\nR\n\n# Function to add two numbers\nadd_numbers &lt;- function(a, b) {\n1  summed_values &lt;- a + b\n2  return(summed_values)\n}\n\n# Call the function\nadd_numbers(5, 3) \n\n\n\n1\n\nAdd the values assigned to the arguments.\n\n2\n\nReturn the summed value.\n\n\n\n\n[1] 8\n\n\n\n\n13.4.1 Function arguments\n\nRequired arguments: Arguments that must be provided when calling the function.\nDefault arguments: Arguments that have default values, allowing the function to be called without specifying those arguments explicitly.\nNamed arguments: Arguments can be specified by name when calling the function, which is useful when you want to provide values out of order.\n\n\nExample with default arguments:\n\n\n\nR\n\n1multiply &lt;- function(a, b = 2) {\n2  return(a * b)\n}\n\n\n\n1\n\nFunction with a default value of for the b argument\n\n2\n\nReturn the multiplied value.\n\n\n\n\n\n\n\nR\n\n# Calls with and without the second argument\n1multiply(5)\n\n\n\n1\n\nUses default b = 2 to multiple the value 5.\n\n\n\n\n[1] 10\n\n\n\n\n\nR\n\n# Overrides default\nmultiply(5, 3)  \n\n\n[1] 15\n\n\nNamed arguments\n\n\n\nR\n\nadd_numbers(b = 3, a = 5)\n\n\n[1] 8\n\n\n\n\n\n13.4.2 Anonymous functions\nThis are functions without a name, often used for quick, one-time operations, especially as arguments to other functions like lapply().\nExample:\n\n1sapply(1:5, \\(x) x^2)\n\n\n1\n\nUse an anonymous function within sapply()\n\n\n\n\n[1]  1  4  9 16 25",
    "crumbs": [
      "R",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Operators</span>"
    ]
  },
  {
    "objectID": "r_tidyverse.html",
    "href": "r_tidyverse.html",
    "title": "14  Tidyverse",
    "section": "",
    "text": "14.1 Install tidyverse meta package\nR\n\n1install.packages(\"tidyverse\")\n \n2library(tidyverse)\n\n\n\n1\n\nInstall the tidyverse Meta package\n\n2\n\nLoad all the packages in the tidyverse",
    "crumbs": [
      "R",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "r_tidyverse.html#install-tidyverse-meta-package",
    "href": "r_tidyverse.html#install-tidyverse-meta-package",
    "title": "14  Tidyverse",
    "section": "",
    "text": "Packages in the tidyverse\n\n\n\n\n\n\nreadr: For reading and writing data in R.\ndplyr: Allows users to manipulate, transform and summarize tabular data.\ntidyr: Focuses on tidying data by reshaping it into a format suitable for analysis.\nstringr: Provides a cohesive set of functions for string manipulation\npurrr: Provides functional programming capabilities by providing tools for working with lists and vectors.\nlubridate: Simplifies date-time manipulation.\nggplot2: For creating static graphics based on the Grammar of Graphics framework.\nforcats: Designed specifically for working with categorical variables (factors).",
    "crumbs": [
      "R",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "r_tidyverse.html#importing-data",
    "href": "r_tidyverse.html#importing-data",
    "title": "14  Tidyverse",
    "section": "14.2 Importing Data",
    "text": "14.2 Importing Data\nR provides functions to import data from various formats, such as CSV, TSV, and fixed-width files.\n\n14.2.1 .CSV file\n\nBase R{readr}\n\n\n\n\n\nR\n\n1data &lt;- read.csv(\"path/to/data.csv\")\n\n\n\n1\n\nImport a csv file as a data frame using the read.csv() from the specified path\n\n\n\n\n\n\n\n1data &lt;- read_csv(\"path/to/data.csv\")\n\n\n1\n\nImport a csv file as a data frame using the read_csv() from the specified path\n\n\n\n\n\n\n\n\n\n\nPath to the data\n\n\n\nUnderstanding how to specify paths for local files and internet resources is crucial for effective data handling.\n\nLocal file paths: Importing data from a local file involves specifying the path to the file on your computer.\nInternet file paths: Importing data from the internet requires a URL pointing directly to a CSV file.\n\n\n\n\n\n\nR\n\ndata &lt;- read_csv(\n1  file = \"path/to/data.csv\",\n2  col_names = c(\"column1\", \"column2\", \"column3\", \"column4\"),\n3  col_types = cols(\n    column1 = col_double(),\n    column2 = col_double(),\n    column3 = col_date(),\n    column4 = col_character()\n  ),\n4  col_select = c(column1, column2, column3, column4),\n5  na = c(\"\", \"--\", \"-/-\", \"NA\"),\n)\n\n\n\n1\n\nSpecifies the path to the CSV file that you want to import.\n\n2\n\nManually specify the names of the columns in your dataset.\n\n3\n\nDefines how each column in your dataset should be interpreted based on its data type.\n\n4\n\nSelect which columns to import from the CSV file.\n\n5\n\nSpecifies what strings should be interpreted as missing values (NA) when importing data.\n\n\n\n\n\n\n\n\n\n14.2.2 .xlsx file\n\n1data &lt;- read_xlsx(\"path/to/data.csv\", sheet = \"sheet 1\")\n\n\n1\n\nRead the data in the worksheet from the provided path, and from the sheet name: ‘sheet 1’",
    "crumbs": [
      "R",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "r_tidyverse.html#dplyr",
    "href": "r_tidyverse.html#dplyr",
    "title": "14  Tidyverse",
    "section": "14.3 {dplyr}",
    "text": "14.3 {dplyr}\n\n14.3.1 Selecting columns\nTo select specific columns from a data frame you can use the select() function. It extracts one or more columns, keeping only the columns you specify.\n\n\n\nR\n\n# Basic syntax\nselect(data, colum1, ....)\n\n\nExample:\n\n1select(starwars, name, height, mass, hair_color)\n\n\n1\n\nSelect the first three columns by name.\n\n\n\n\n# A tibble: 87 × 4\n   name               height  mass hair_color   \n   &lt;chr&gt;               &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;        \n 1 Luke Skywalker        172    77 blond        \n 2 C-3PO                 167    75 &lt;NA&gt;         \n 3 R2-D2                  96    32 &lt;NA&gt;         \n 4 Darth Vader           202   136 none         \n 5 Leia Organa           150    49 brown        \n 6 Owen Lars             178   120 brown, grey  \n 7 Beru Whitesun Lars    165    75 brown        \n 8 R5-D4                  97    32 &lt;NA&gt;         \n 9 Biggs Darklighter     183    84 black        \n10 Obi-Wan Kenobi        182    77 auburn, white\n# ℹ 77 more rows\n\n\n\nUsing the : for selecting a range of consecutive variables.\n\n\n\n\nR\n\n1select(starwars, name:hair_color)\n\n\n\n1\n\nselect the first three columns using the : operator.\n\n\n\n\n# A tibble: 87 × 4\n   name               height  mass hair_color   \n   &lt;chr&gt;               &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;        \n 1 Luke Skywalker        172    77 blond        \n 2 C-3PO                 167    75 &lt;NA&gt;         \n 3 R2-D2                  96    32 &lt;NA&gt;         \n 4 Darth Vader           202   136 none         \n 5 Leia Organa           150    49 brown        \n 6 Owen Lars             178   120 brown, grey  \n 7 Beru Whitesun Lars    165    75 brown        \n 8 R5-D4                  97    32 &lt;NA&gt;         \n 9 Biggs Darklighter     183    84 black        \n10 Obi-Wan Kenobi        182    77 auburn, white\n# ℹ 77 more rows\n\n\n\nUsing the ! for taking the complement of a set of variables.\n\n\n\n\nR\n\n1select(starwars, !name)\n\n\n\n1\n\nselect all columns except the name column\n\n\n\n\n# A tibble: 87 × 13\n   height  mass hair_color    skin_color  eye_color birth_year sex    gender   \n    &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;    \n 1    172    77 blond         fair        blue            19   male   masculine\n 2    167    75 &lt;NA&gt;          gold        yellow         112   none   masculine\n 3     96    32 &lt;NA&gt;          white, blue red             33   none   masculine\n 4    202   136 none          white       yellow          41.9 male   masculine\n 5    150    49 brown         light       brown           19   female feminine \n 6    178   120 brown, grey   light       blue            52   male   masculine\n 7    165    75 brown         light       blue            47   female feminine \n 8     97    32 &lt;NA&gt;          white, red  red             NA   none   masculine\n 9    183    84 black         light       brown           24   male   masculine\n10    182    77 auburn, white fair        blue-gray       57   male   masculine\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\nUsing the c() for combining selections.\n\n\n\n\nR\n\n1select(starwars, c(name, mass, eye_color))\n\n\n\n1\n\nSelect a vector of names. specifically useful when picking multiple columns from different column position.\n\n\n\n\n# A tibble: 87 × 3\n   name                mass eye_color\n   &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;    \n 1 Luke Skywalker        77 blue     \n 2 C-3PO                 75 yellow   \n 3 R2-D2                 32 red      \n 4 Darth Vader          136 yellow   \n 5 Leia Organa           49 brown    \n 6 Owen Lars            120 blue     \n 7 Beru Whitesun Lars    75 blue     \n 8 R5-D4                 32 red      \n 9 Biggs Darklighter     84 brown    \n10 Obi-Wan Kenobi        77 blue-gray\n# ℹ 77 more rows\n\n\n\neverything()\nThis is a selection helper primarily used for selecting all variables from a data frame or tibble.\n\n\n\nR\n\nselect(starwars, everything())\n\n\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 &lt;NA&gt;       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 &lt;NA&gt;       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 &lt;NA&gt;       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\nstart_with()\nThis is a selection helper function that allows users to select variables from a data frame whose names begin with a specified prefix. It is particularly useful for tasks where you want to focus on specific groups of variables without having to manually specify each one.\n\n\n\nR\n\n1head(iris, n = 3)\n\n\n\n1\n\nRetrieve the first 3 rows from the iris data.frame\n\n\n\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n\n\n\n\n\nR\n\n1select(iris, starts_with(\"Sepal\")) |&gt; head(5)\n\n\n\n1\n\nSelect all columns that start with the “Sepal” value.\n\n\n\n\n  Sepal.Length Sepal.Width\n1          5.1         3.5\n2          4.9         3.0\n3          4.7         3.2\n4          4.6         3.1\n5          5.0         3.6\n\n\nMultiple matches:\n\n\n\nR\n\n1select(iris, starts_with(c(\"Petal\", \"Sepal\"))) |&gt; head(5)\n\n\n\n1\n\nSelect all columns that start with the “Petal” and “Sepal” values.\n\n\n\n\n  Petal.Length Petal.Width Sepal.Length Sepal.Width\n1          1.4         0.2          5.1         3.5\n2          1.4         0.2          4.9         3.0\n3          1.3         0.2          4.7         3.2\n4          1.5         0.2          4.6         3.1\n5          1.4         0.2          5.0         3.6\n\n\n\n\nends_with()\nThis function allows users to select variables (columns) from a data frame based on whether their names end with a specified suffix. The primary purpose of of the ends_with()\n\n1select(starwars, ends_with(\"color\"))\n\n\n1\n\nSelect all columns that ends with the value “color”.\n\n\n\n\n# A tibble: 87 × 3\n   hair_color    skin_color  eye_color\n   &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt;    \n 1 blond         fair        blue     \n 2 &lt;NA&gt;          gold        yellow   \n 3 &lt;NA&gt;          white, blue red      \n 4 none          white       yellow   \n 5 brown         light       brown    \n 6 brown, grey   light       blue     \n 7 brown         light       blue     \n 8 &lt;NA&gt;          white, red  red      \n 9 black         light       brown    \n10 auburn, white fair        blue-gray\n# ℹ 77 more rows\n\n\n\n\ncontains()\nThis function allows users to select variables from a data frame based on whether their names contain a specific substring.\n\n\n\nR\n\n1select(starwars, contains(\"color\"))\n\n\n\n1\n\nSelect all columns that have the value “color”.\n\n\n\n\n# A tibble: 87 × 3\n   hair_color    skin_color  eye_color\n   &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt;    \n 1 blond         fair        blue     \n 2 &lt;NA&gt;          gold        yellow   \n 3 &lt;NA&gt;          white, blue red      \n 4 none          white       yellow   \n 5 brown         light       brown    \n 6 brown, grey   light       blue     \n 7 brown         light       blue     \n 8 &lt;NA&gt;          white, red  red      \n 9 black         light       brown    \n10 auburn, white fair        blue-gray\n# ℹ 77 more rows\n\n\n\n\nall_of()\nThis function is specifically designed to facilitate the selection of variables from data frames using character vectors and it is particularly useful when you want to ensure that all specified variables are present in the data frame.\n\n\n\nR\n\n1select(starwars, all_of(c(\"name\", \"height\", \"mass\")))\n\n\n\n1\n\nSelect the name, height, and mass variables\n\n\n\n\n# A tibble: 87 × 3\n   name               height  mass\n   &lt;chr&gt;               &lt;int&gt; &lt;dbl&gt;\n 1 Luke Skywalker        172    77\n 2 C-3PO                 167    75\n 3 R2-D2                  96    32\n 4 Darth Vader           202   136\n 5 Leia Organa           150    49\n 6 Owen Lars             178   120\n 7 Beru Whitesun Lars    165    75\n 8 R5-D4                  97    32\n 9 Biggs Darklighter     183    84\n10 Obi-Wan Kenobi        182    77\n# ℹ 77 more rows\n\n\n\n\n\n\n\n\nStrict selection\n\n\n\nThe primary characteristic of all_of() is that it performs strict selection. This means that if any variable specified in the character vector does not exist in the data frame, an error will be thrown. This feature ensures that users are aware of any missing variables.\n\n\n\nR\n\n1select(starwars, all_of(c(\"name\", \"height\", \"mass\", \"max\")))\n\n\n\n1\n\nThe max value is not a valid column name in the starwars table.\n\n\n\n\nError in `all_of()`:\n! Can't subset columns that don't exist.\n✖ Column `max` doesn't exist.\n\n\n\n\n\n\nany_of()\nThis function is particularly useful when you want to select variables from a data frame based on a character vector of variable names. The key feature of any_of() is its leniency regarding missing variables.\n\n\n\nR\n\n1select(starwars, any_of(c(\"name\", \"height\", \"mass\", \"max\")))\n\n\n\n1\n\nIgnores the max column name which does not exist in the table.\n\n\n\n\n# A tibble: 87 × 3\n   name               height  mass\n   &lt;chr&gt;               &lt;int&gt; &lt;dbl&gt;\n 1 Luke Skywalker        172    77\n 2 C-3PO                 167    75\n 3 R2-D2                  96    32\n 4 Darth Vader           202   136\n 5 Leia Organa           150    49\n 6 Owen Lars             178   120\n 7 Beru Whitesun Lars    165    75\n 8 R5-D4                  97    32\n 9 Biggs Darklighter     183    84\n10 Obi-Wan Kenobi        182    77\n# ℹ 77 more rows\n\n\n\n\n\n\n\n\nIgnores non-existent column names\n\n\n\nIf any of the specified variable names do not exist in the data frame, any_of() will simply ignore those names without throwing an error.\n\n\n\n\nwhere()\nThis function allows users to select columns from a data frame based on a predicate function that returns either TRUE or FALSE. The predicate function can be any custom function defined by the user or built-in functions such as is.numeric, is.factor, etc.\n\n\n\nR\n\n1select(starwars, where(is.numeric))\n\n\n\n1\n\nSelect only numeric columns\n\n\n\n\n# A tibble: 87 × 3\n   height  mass birth_year\n    &lt;int&gt; &lt;dbl&gt;      &lt;dbl&gt;\n 1    172    77       19  \n 2    167    75      112  \n 3     96    32       33  \n 4    202   136       41.9\n 5    150    49       19  \n 6    178   120       52  \n 7    165    75       47  \n 8     97    32       NA  \n 9    183    84       24  \n10    182    77       57  \n# ℹ 77 more rows\n\n\nOR using a full lambda function\n\n\n\nR\n\nselect(starwars, where(\\(x) is.numeric(x)))\n\n\n# A tibble: 87 × 3\n   height  mass birth_year\n    &lt;int&gt; &lt;dbl&gt;      &lt;dbl&gt;\n 1    172    77       19  \n 2    167    75      112  \n 3     96    32       33  \n 4    202   136       41.9\n 5    150    49       19  \n 6    178   120       52  \n 7    165    75       47  \n 8     97    32       NA  \n 9    183    84       24  \n10    182    77       57  \n# ℹ 77 more rows\n\n\n\n\n\nR\n\n1select(mtcars, where(\\(x) mean(x) &gt; 100)) |&gt;\n2  as_tibble()\n\n\n\n1\n\nSelect all numeric columns where the average value is greater than 100.\n\n2\n\nconvert the data frame to a tibble.\n\n\n\n\n# A tibble: 32 × 2\n    disp    hp\n   &lt;dbl&gt; &lt;dbl&gt;\n 1  160    110\n 2  160    110\n 3  108     93\n 4  258    110\n 5  360    175\n 6  225    105\n 7  360    245\n 8  147.    62\n 9  141.    95\n10  168.   123\n# ℹ 22 more rows\n\n\n\n\n\nCombining selection helpers\n\n\n\nR\n\n1select(starwars, ends_with(\"color\") | contains(\"year\"))\n\n\n\n1\n\nSelect columns that ends with the value “color” or that contains the value “year”\n\n\n\n\n# A tibble: 87 × 4\n   hair_color    skin_color  eye_color birth_year\n   &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt;\n 1 blond         fair        blue            19  \n 2 &lt;NA&gt;          gold        yellow         112  \n 3 &lt;NA&gt;          white, blue red             33  \n 4 none          white       yellow          41.9\n 5 brown         light       brown           19  \n 6 brown, grey   light       blue            52  \n 7 brown         light       blue            47  \n 8 &lt;NA&gt;          white, red  red             NA  \n 9 black         light       brown           24  \n10 auburn, white fair        blue-gray       57  \n# ℹ 77 more rows\n\n\n   \n\n\n\n14.3.2 Renaming columns\nThe dplyr package provides several functions to rename columns in a data frame. Two of the most commonly used functions for this purpose are rename() and rename_with().\n\nrename()\nThe rename() function allows you to change the names of specific columns in a data frame. The syntax for the function is as follows:\n\n\n\nR\n\n1rename(data, new_name = old_name)\n\n\n\n1\n\nThe old_name is the present name in the column and the new_name it the new name that particular column is expected to be renamed to.\n\n\n\n\n\ndata: This is the data frame you want to modify.\n\nnew_name: This is the new name you want to assign to an existing column.\n\nold_name: This is the current name of the column you wish to rename.\n\nExample:\n\n\n\nR\n\n1as_tibble(mtcars) |&gt;\n  rename(\n2    miles_per_gallon = mpg,\n    displacement = disp,\n    horsepower = hp\n  )\n\n\n\n1\n\nConvert the mtcars data frame to a tibble\n\n2\n\nrename the columns mpg, disp and hp to miles_per_gallon, displacement and horsepower respectively.\n\n\n\n\n# A tibble: 32 × 11\n   miles_per_gallon   cyl displacement horsepower  drat    wt  qsec    vs    am\n              &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1             21       6         160         110  3.9   2.62  16.5     0     1\n 2             21       6         160         110  3.9   2.88  17.0     0     1\n 3             22.8     4         108          93  3.85  2.32  18.6     1     1\n 4             21.4     6         258         110  3.08  3.22  19.4     1     0\n 5             18.7     8         360         175  3.15  3.44  17.0     0     0\n 6             18.1     6         225         105  2.76  3.46  20.2     1     0\n 7             14.3     8         360         245  3.21  3.57  15.8     0     0\n 8             24.4     4         147.         62  3.69  3.19  20       1     0\n 9             22.8     4         141.         95  3.92  3.15  22.9     1     0\n10             19.2     6         168.        123  3.92  3.44  18.3     1     0\n# ℹ 22 more rows\n# ℹ 2 more variables: gear &lt;dbl&gt;, carb &lt;dbl&gt;\n\n\n\n\nrename_with()\nThe rename_with() function provides more flexibility by allowing you to apply a function to all or some column names. The syntax for this function is:\n\n\n\nR\n\nrename_with(data, .fn, .cols)\n\n\n\ndata: The data frame you want to modify.\n.fn: A function that will be applied to the selected column names.\n.cols: Specifies which columns should be renamed (you can use tidyselect helpers like starts_with(), contains(), etc.).\n\nExample:\n\n\n\nR\n\n1as_tibble(iris)\n\n\n\n1\n\nConvert the iris data frame to a tibble.\n\n\n\n\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ℹ 140 more rows\n\n\n\n\n\nR\n\nas_tibble(iris) |&gt;\n1  rename_with(\\(x) gsub(\"\\\\.\", \"_\", x))\n\n\n\n1\n\nreplace the . in all the column name to _ using the gsub() in base r.\n\n\n\n\n# A tibble: 150 × 5\n   Sepal_Length Sepal_Width Petal_Length Petal_Width Species\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ℹ 140 more rows\n\n\n\n\n\nR\n\n1rename_with(starwars, toupper)\n\n\n\n1\n\nConvert all the column names in the starwars data frame to upper case.\n\n\n\n\n# A tibble: 87 × 14\n   NAME     HEIGHT  MASS HAIR_COLOR SKIN_COLOR EYE_COLOR BIRTH_YEAR SEX   GENDER\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 &lt;NA&gt;       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 &lt;NA&gt;       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 &lt;NA&gt;       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: HOMEWORLD &lt;chr&gt;, SPECIES &lt;chr&gt;, FILMS &lt;list&gt;,\n#   VEHICLES &lt;list&gt;, STARSHIPS &lt;list&gt;\n\n\n   \n\n\n\n14.3.3 Reorder columns\nThe relocate() function allows users to change the order of columns in a data frame or tibble, making it easier to organize data according to specific needs.\n\nMoving one or more columns to front\n\n\n\nR\n\n1relocate(starwars, hair_color, skin_color, eye_color)\n\n\n\n1\n\nMake the hair_color, skin_color and eye_color as the first set of columns.\n\n\n\n\n# A tibble: 87 × 14\n   hair_color    skin_color eye_color name  height  mass birth_year sex   gender\n   &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;  &lt;int&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 blond         fair       blue      Luke…    172    77       19   male  mascu…\n 2 &lt;NA&gt;          gold       yellow    C-3PO    167    75      112   none  mascu…\n 3 &lt;NA&gt;          white, bl… red       R2-D2     96    32       33   none  mascu…\n 4 none          white      yellow    Dart…    202   136       41.9 male  mascu…\n 5 brown         light      brown     Leia…    150    49       19   fema… femin…\n 6 brown, grey   light      blue      Owen…    178   120       52   male  mascu…\n 7 brown         light      blue      Beru…    165    75       47   fema… femin…\n 8 &lt;NA&gt;          white, red red       R5-D4     97    32       NA   none  mascu…\n 9 black         light      brown     Bigg…    183    84       24   male  mascu…\n10 auburn, white fair       blue-gray Obi-…    182    77       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\nMoving one or more columns after another column\n\n\n\nR\n\n1relocate(starwars, hair_color, skin_color, eye_color, .after = name)\n\n\n\n1\n\nMove the hair_color, skin_color and eye_color after the name column\n\n\n\n\n# A tibble: 87 × 14\n   name     hair_color skin_color eye_color height  mass birth_year sex   gender\n   &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk… blond      fair       blue         172    77       19   male  mascu…\n 2 C-3PO    &lt;NA&gt;       gold       yellow       167    75      112   none  mascu…\n 3 R2-D2    &lt;NA&gt;       white, bl… red           96    32       33   none  mascu…\n 4 Darth V… none       white      yellow       202   136       41.9 male  mascu…\n 5 Leia Or… brown      light      brown        150    49       19   fema… femin…\n 6 Owen La… brown, gr… light      blue         178   120       52   male  mascu…\n 7 Beru Wh… brown      light      blue         165    75       47   fema… femin…\n 8 R5-D4    &lt;NA&gt;       white, red red           97    32       NA   none  mascu…\n 9 Biggs D… black      light      brown        183    84       24   male  mascu…\n10 Obi-Wan… auburn, w… fair       blue-gray    182    77       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\nmoving one or more columns before another column\n\n\n\nR\n\n1relocate(starwars, hair_color, skin_color, eye_color, .before = name)\n\n\n\n1\n\nMove the hair_color, skin_color and eye_color before the name column\n\n\n\n\n# A tibble: 87 × 14\n   hair_color    skin_color eye_color name  height  mass birth_year sex   gender\n   &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;  &lt;int&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 blond         fair       blue      Luke…    172    77       19   male  mascu…\n 2 &lt;NA&gt;          gold       yellow    C-3PO    167    75      112   none  mascu…\n 3 &lt;NA&gt;          white, bl… red       R2-D2     96    32       33   none  mascu…\n 4 none          white      yellow    Dart…    202   136       41.9 male  mascu…\n 5 brown         light      brown     Leia…    150    49       19   fema… femin…\n 6 brown, grey   light      blue      Owen…    178   120       52   male  mascu…\n 7 brown         light      blue      Beru…    165    75       47   fema… femin…\n 8 &lt;NA&gt;          white, red red       R5-D4     97    32       NA   none  mascu…\n 9 black         light      brown     Bigg…    183    84       24   male  mascu…\n10 auburn, white fair       blue-gray Obi-…    182    77       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n   \n\n\n\n14.3.4 Filter records\nTo subset rows in a data frame (or tibble) based on specific conditions you can use the filter() function. Keeps only rows where the specified condition(s) are TRUE.\nBasic Syntax:\n\n\n\nR\n\nfilter(.data, condition1, condition2, ...)\n\n\n\n.data: The data frame or tibble you are working with.\ncondition1, condition2, …: Logical conditions that define which rows to keep. Multiple conditions can be combined using logical operators (& for “and”, | for “or”).\n\nExample:\n\nFiltering rows based on a single condition\n\n\n\nR\n\n1filter(starwars, eye_color == \"blue\")\n\n\n\n1\n\nRetrieve all row where the eye_color is blue.\n\n\n\n\n# A tibble: 19 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk…    172  77   blond      fair       blue            19   male  mascu…\n 2 Owen La…    178 120   brown, gr… light      blue            52   male  mascu…\n 3 Beru Wh…    165  75   brown      light      blue            47   fema… femin…\n 4 Anakin …    188  84   blond      fair       blue            41.9 male  mascu…\n 5 Wilhuff…    180  NA   auburn, g… fair       blue            64   male  mascu…\n 6 Chewbac…    228 112   brown      unknown    blue           200   male  mascu…\n 7 Jek Ton…    180 110   brown      fair       blue            NA   &lt;NA&gt;  &lt;NA&gt;  \n 8 Lobot       175  79   none       light      blue            37   male  mascu…\n 9 Mon Mot…    150  NA   auburn     fair       blue            48   fema… femin…\n10 Qui-Gon…    193  89   brown      fair       blue            92   male  mascu…\n11 Finis V…    170  NA   blond      fair       blue            91   male  mascu…\n12 Ric Olié    183  NA   brown      fair       blue            NA   male  mascu…\n13 Adi Gal…    184  50   none       dark       blue            NA   fema… femin…\n14 Mas Ame…    196  NA   none       blue       blue            NA   male  mascu…\n15 Cliegg …    183  NA   brown      fair       blue            82   male  mascu…\n16 Luminar…    170  56.2 black      yellow     blue            58   fema… femin…\n17 Barriss…    166  50   black      yellow     blue            40   fema… femin…\n18 Jocasta…    167  NA   white      fair       blue            NA   fema… femin…\n19 Tarfful     234 136   brown      brown      blue            NA   male  mascu…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\nFiltering with multiple conditions\nYou can filter based on multiple conditions using & (AND) or | (OR).\n\n\n\nR\n\n1filter(starwars, eye_color == \"blue\" & skin_color == \"light\")\n\n\n\n1\n\nRetrieve all row where the eye_color is blue and skin color is light.\n\n\n\n\n# A tibble: 3 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 Owen Lars    178   120 brown, gr… light      blue              52 male  mascu…\n2 Beru Whi…    165    75 brown      light      blue              47 fema… femin…\n3 Lobot        175    79 none       light      blue              37 male  mascu…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\n\nR\n\n1filter(starwars, sex == \"female\" | hair_color %in% c(\"brown\", \"black\"))\n\n\n\n1\n\nRetrieve all records where sex is female or the hair color is either brown or black.\n\n\n\n\n# A tibble: 39 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Leia Or…    150  49   brown      light      brown           19   fema… femin…\n 2 Beru Wh…    165  75   brown      light      blue            47   fema… femin…\n 3 Biggs D…    183  84   black      light      brown           24   male  mascu…\n 4 Chewbac…    228 112   brown      unknown    blue           200   male  mascu…\n 5 Han Solo    180  80   brown      fair       brown           29   male  mascu…\n 6 Wedge A…    170  77   brown      fair       hazel           21   male  mascu…\n 7 Jek Ton…    180 110   brown      fair       blue            NA   &lt;NA&gt;  &lt;NA&gt;  \n 8 Boba Fe…    183  78.2 black      fair       brown           31.5 male  mascu…\n 9 Lando C…    177  79   black      dark       brown           31   male  mascu…\n10 Mon Mot…    150  NA   auburn     fair       blue            48   fema… femin…\n# ℹ 29 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\nFiltering with comparison operators\n\n\n\nR\n\n1filter(starwars, height &gt; 180 & mass &gt;= 80 & birth_year &lt;= 80)\n\n\n\n1\n\nRetrieve all records where height is greater than 180 and mass is greater than or equal to 80 and birth year is less than or equal to 80.\n\n\n\n\n# A tibble: 7 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 Darth Va…    202   136 none       white      yellow          41.9 male  mascu…\n2 Biggs Da…    183    84 black      light      brown           24   male  mascu…\n3 Anakin S…    188    84 blond      fair       blue            41.9 male  mascu…\n4 IG-88        200   140 none       metal      red             15   none  mascu…\n5 Bossk        190   113 none       green      red             53   male  mascu…\n6 Mace Win…    188    84 none       dark       brown           72   male  mascu…\n7 Plo Koon     188    80 none       orange     black           22   male  mascu…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\nUsing functions within filter()\nYou can use other functions within filter(), such as is.na() for handling missing values or string functions like grepl().\n\n\n\nR\n\n1filter(starwars, is.na(hair_color))\n\n\n\n1\n\nFilter records of hair_color with missing values (NA)\n\n\n\n\n# A tibble: 5 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 C-3PO        167    75 &lt;NA&gt;       gold       yellow           112 none  mascu…\n2 R2-D2         96    32 &lt;NA&gt;       white, bl… red               33 none  mascu…\n3 R5-D4         97    32 &lt;NA&gt;       white, red red               NA none  mascu…\n4 Greedo       173    74 &lt;NA&gt;       green      black             44 male  mascu…\n5 Jabba De…    175  1358 &lt;NA&gt;       green-tan… orange           600 herm… mascu…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\n\nR\n\n1filter(starwars, grepl(\"Skywalker\", name))\n\n\n\n1\n\nFilter names with Skywalker\n\n\n\n\n# A tibble: 3 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 Luke Sky…    172    77 blond      fair       blue            19   male  mascu…\n2 Anakin S…    188    84 blond      fair       blue            41.9 male  mascu…\n3 Shmi Sky…    163    NA black      fair       brown           72   fema… femin…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\n\n\n\n\nCommon pitfalls and tips\n\n\n\n\nEnsure data types match: Be mindful of data types when filtering, especially with factors and strings.\nMissing values: By default, comparisons with NA will result in NA. Use is.na() to explicitly handle missing values.\nOrder of conditions matters: Be clear about the logical conditions and their order, especially when combining multiple conditions.\n\n\n\n\n\nbetween()\nFilter between a range of values\n\n\n\nR\n\n1filter(starwars, between(height, 100, 150))\n\n\n\n1\n\nRetrieve records of height between 100 and 150\n\n\n\n\n# A tibble: 5 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 Leia Org…    150    49 brown      light      brown             19 fema… femin…\n2 Mon Moth…    150    NA auburn     fair       blue              48 fema… femin…\n3 Watto        137    NA black      blue, grey yellow            NA male  mascu…\n4 Sebulba      112    40 none       grey, red  orange            NA male  mascu…\n5 Gasgano      122    NA none       white, bl… black             NA male  mascu…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n   \n\n\n\n14.3.5 Create, modify and delete columns\nThe mutate() function is used to create or modify columns in a data frame (or tibble). It allows you to add new columns or change existing ones based on calculations or transformations of other columns.\n\nCreating a new column\n\n\n\nR\n\nstarwars |&gt; \n1  mutate(bmi = mass / (height / 100)^2) |&gt;\n  select(name, mass, height, bmi)\n\n\n\n1\n\ncalculate the Body Mass Index by converting the height from cm to m and squaring before dividing by the mass (weight in kg)\n\n\n\n\n# A tibble: 87 × 4\n   name                mass height   bmi\n   &lt;chr&gt;              &lt;dbl&gt;  &lt;int&gt; &lt;dbl&gt;\n 1 Luke Skywalker        77    172  26.0\n 2 C-3PO                 75    167  26.9\n 3 R2-D2                 32     96  34.7\n 4 Darth Vader          136    202  33.3\n 5 Leia Organa           49    150  21.8\n 6 Owen Lars            120    178  37.9\n 7 Beru Whitesun Lars    75    165  27.5\n 8 R5-D4                 32     97  34.0\n 9 Biggs Darklighter     84    183  25.1\n10 Obi-Wan Kenobi        77    182  23.2\n# ℹ 77 more rows\n\n\n\n\nModifying an existing column\n\n\n\nR\n\nstarwars |&gt;\n1  mutate(height = height * 2)\n\n\n\n1\n\nDouble the height of all characters.\n\n\n\n\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk…    344    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       334    75 &lt;NA&gt;       gold       yellow         112   none  mascu…\n 3 R2-D2       192    32 &lt;NA&gt;       white, bl… red             33   none  mascu…\n 4 Darth V…    404   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    300    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    356   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    330    75 brown      light      blue            47   fema… femin…\n 8 R5-D4       194    32 &lt;NA&gt;       white, red red             NA   none  mascu…\n 9 Biggs D…    366    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    364    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\nUsing conditional statements\n\n\n\nR\n\nstarwars |&gt; \n  mutate(\n1    bmi = mass / (height / 100)^2,\n    brief_bmi_category = if_else(\n2      bmi &gt; 24.9, \"Overweight\", \"Normal weight\"\n    ),\n3    bmi_category = case_when(\n      bmi &lt; 18.5 ~ \"Underweight\",\n      bmi &gt;= 18.5 & bmi &lt;= 24.9 ~ \"Normal weight\",\n      bmi &gt;= 25 & bmi &lt;= 29.9 ~ \"Overweight\",\n      bmi &gt;= 30 ~ \"Obesity\",\n      .default = \"Unknow weight\"\n    )\n  ) |&gt;                   \n  select(name, mass, height, bmi, brief_bmi_category, bmi_category)\n\n\n\n1\n\ncalculate the Body Mass Index by converting the height from cm to m and squaring before dividing by the mass (weight in kg).\n\n2\n\ncreate a brief categorical value of the calculated bmi using the if_else() function.\n\n3\n\ncreate a detailed categorical value of the calculated bmi using the case_when() function.\n\n\n\n\n# A tibble: 87 × 6\n   name                mass height   bmi brief_bmi_category bmi_category \n   &lt;chr&gt;              &lt;dbl&gt;  &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;        \n 1 Luke Skywalker        77    172  26.0 Overweight         Overweight   \n 2 C-3PO                 75    167  26.9 Overweight         Overweight   \n 3 R2-D2                 32     96  34.7 Overweight         Obesity      \n 4 Darth Vader          136    202  33.3 Overweight         Obesity      \n 5 Leia Organa           49    150  21.8 Normal weight      Normal weight\n 6 Owen Lars            120    178  37.9 Overweight         Obesity      \n 7 Beru Whitesun Lars    75    165  27.5 Overweight         Overweight   \n 8 R5-D4                 32     97  34.0 Overweight         Obesity      \n 9 Biggs Darklighter     84    183  25.1 Overweight         Overweight   \n10 Obi-Wan Kenobi        77    182  23.2 Normal weight      Normal weight\n# ℹ 77 more rows\n\n\n   \n\n\n\n14.3.6 Summarise records\nThe summarise() function helps in creating summary statistics for variables in a table. It Reduces multiple rows to a single summary, often used after group_by()\n\ncount()\nThe count() function is used to count occurrences of unique values in a column by grouping the data based on specified columns then count the number of observations.\n\n\n\nR\n\n1count(starwars, eye_color, sort = TRUE, name = \"eye_color_count\")\n\n\n\n1\n\nCount the number of character with the different type of eye colors and arrange the values in descending order.\n\n\n\n\n# A tibble: 15 × 2\n   eye_color     eye_color_count\n   &lt;chr&gt;                   &lt;int&gt;\n 1 brown                      21\n 2 blue                       19\n 3 yellow                     11\n 4 black                      10\n 5 orange                      8\n 6 red                         5\n 7 hazel                       3\n 8 unknown                     3\n 9 blue-gray                   1\n10 dark                        1\n11 gold                        1\n12 green, yellow               1\n13 pink                        1\n14 red, blue                   1\n15 white                       1\n\n\nCount multiple columns unique values:\n\n1count(starwars, eye_color, skin_color, sort = TRUE, name = \"count\")\n\n\n1\n\nCount the number of character with each type of eye and skin color.\n\n\n\n\n# A tibble: 53 × 3\n   eye_color skin_color count\n   &lt;chr&gt;     &lt;chr&gt;      &lt;int&gt;\n 1 blue      fair          10\n 2 brown     light          7\n 3 brown     fair           5\n 4 black     grey           4\n 5 brown     dark           4\n 6 blue      light          3\n 7 black     green          2\n 8 blue      yellow         2\n 9 brown     brown          2\n10 brown     tan            2\n# ℹ 43 more rows\n\n\n\n\ndistinct()\nTo return unique rows and eliminating duplicates, the distinct() is quite versatile given that it filters out duplicate rows based on the specified columns.\n\n\n\nR\n\n1distinct(starwars, sex)\n\n\n\n1\n\nGet the unique values in the sex column.\n\n\n\n\n# A tibble: 5 × 1\n  sex           \n  &lt;chr&gt;         \n1 male          \n2 none          \n3 female        \n4 hermaphroditic\n5 &lt;NA&gt;          \n\n\nGet multiple distinct column values:\n\n\n\nR\n\n1distinct(starwars, sex, gender)\n\n\n\n1\n\nGet the unique value in the sex and gender columns.\n\n\n\n\n# A tibble: 6 × 2\n  sex            gender   \n  &lt;chr&gt;          &lt;chr&gt;    \n1 male           masculine\n2 none           masculine\n3 female         feminine \n4 hermaphroditic masculine\n5 &lt;NA&gt;           &lt;NA&gt;     \n6 none           feminine \n\n\n\n\nsummarise()\nThe summarise() function is used to create summary statistics of variables in a data frame (or tibble). It reduces multiple values down to a single value per group, making it essential for data aggregation and summary analysis.\n\nCalculating a single summary statistic\n\n\n\nR\n\n1summarise(starwars, avg_mass = mean(mass, na.rm = TRUE))\n\n\n\n1\n\nGet the average mass of all character in the dataset.\n\n\n\n\n# A tibble: 1 × 1\n  avg_mass\n     &lt;dbl&gt;\n1     97.3\n\n\n\n\nCalculating multiple summary statistics\n\n\n\nR\n\nstarwars |&gt;\n  summarise(\n1    min_mass = min(mass, na.rm = TRUE),\n2    avg_mass = mean(mass, na.rm = TRUE),\n3    max_mass = max(mass, na.rm = TRUE)\n  )  \n\n\n\n1\n\nGet the minimum mass of all character.\n\n2\n\nGet the average mass\n\n3\n\nGet the maximum mass of all character.\n\n\n\n\n# A tibble: 1 × 3\n  min_mass avg_mass max_mass\n     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1       15     97.3     1358\n\n\n\n\nUsing summarise() with across() for multiple columns\n\n\n\nR\n\nstarwars |&gt;\n  summarise(\n    across(\n1      c(height, mass, birth_year),\n2      \\(x) max(x, na.rm = TRUE),\n3      .names = \"max_{col}\"\n    )\n  )\n\n\n\n1\n\nSummarize across multiple columns\n\n2\n\nUse the max() aggregate function.\n\n3\n\nrename the summarized column.\n\n\n\n\n# A tibble: 1 × 3\n  max_height max_mass max_birth_year\n       &lt;int&gt;    &lt;dbl&gt;          &lt;dbl&gt;\n1        264     1358            896\n\n\n   \n\n\n\n\n14.3.7 Grouped data\n\nAggregate summary\n\n\n\nR\n\nstarwars |&gt; \n1  group_by(sex) |&gt;\n2  summarise(avg_mass = mean(mass, na.rm = TRUE))\n\n\n\n1\n\nGroup the data by character sex (the sex variable)\n\n2\n\nGet the average body mass of each group.\n\n\n\n\n# A tibble: 5 × 2\n  sex            avg_mass\n  &lt;chr&gt;             &lt;dbl&gt;\n1 female             54.7\n2 hermaphroditic   1358  \n3 male               80.2\n4 none               69.8\n5 &lt;NA&gt;               81  \n\n\nThe summarise() function also have an argument called .by which allows a selection of columns to group by for just a single operation.\n\n\n\nR\n\nstarwars |&gt;\n  summarise(\n1    avg_mass = mean(mass, na.rm = TRUE),\n2    .by = sex\n  ) \n\n\n\n1\n\nGet the average body mass of each group.\n\n2\n\nGroup the data by character sex (the sex variable)\n\n\n\n\n# A tibble: 5 × 2\n  sex            avg_mass\n  &lt;chr&gt;             &lt;dbl&gt;\n1 male               80.2\n2 none               69.8\n3 female             54.7\n4 hermaphroditic   1358  \n5 &lt;NA&gt;               81  \n\n\n\n\nWindow function with mutate()\n\n\n\nR\n\nstarwars |&gt;\n1  group_by(skin_color) |&gt;\n2  mutate(skin_color_avg_birth_year = mean(birth_year, na.rm = TRUE)) |&gt;\n3  select(skin_color, birth_year, skin_color_avg_birth_year)\n\n\n\n1\n\nsegment the data by skin_color\n\n2\n\nFor each group, calculate the average birth year.\n\n3\n\nselect only the skin_color, birth_year and the calculated skin_color_avg_birth_year columns\n\n\n\n\n# A tibble: 87 × 3\n# Groups:   skin_color [31]\n   skin_color  birth_year skin_color_avg_birth_year\n   &lt;chr&gt;            &lt;dbl&gt;                     &lt;dbl&gt;\n 1 fair              19                        57.7\n 2 gold             112                       112  \n 3 white, blue       33                        33  \n 4 white             41.9                      41.9\n 5 light             19                        37.5\n 6 light             52                        37.5\n 7 light             47                        37.5\n 8 white, red        NA                       NaN  \n 9 light             24                        37.5\n10 fair              57                        57.7\n# ℹ 77 more rows\n\n\n\n\nUngrouping Data ungroup()\n\n\n\nR\n\ngp_tbl &lt;- starwars |&gt;\n1  group_by(sex, gender)\n\ngp_tbl |&gt;\n2  summarise(count = n())\n\n\n\n1\n\nGroup the data by the sex and gender variables.\n\n2\n\nGet the number of times each group appeared in the data.\n\n\n\n\n`summarise()` has grouped output by 'sex'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 6 × 3\n# Groups:   sex [5]\n  sex            gender    count\n  &lt;chr&gt;          &lt;chr&gt;     &lt;int&gt;\n1 female         feminine     16\n2 hermaphroditic masculine     1\n3 male           masculine    60\n4 none           feminine      1\n5 none           masculine     5\n6 &lt;NA&gt;           &lt;NA&gt;          4\n\n\nAfter performing grouped operations, you may want to remove the grouping structure to perform further operations on the entire dataset.\n\n\n\nR\n\n1is_grouped_df(gp_tbl)\n\n\n\n1\n\nCheck whether the data gp_tbl is a grouped data frame\n\n\n\n\n[1] TRUE\n\n\nUse ungroup() for this purpose.\n\n\n\nR\n\ngp_tbl |&gt;\n1  summarise(count = n()) |&gt;\n2  ungroup()\n\n\n\n1\n\nGet the number of times each group appeared in the data.\n\n2\n\nRemove the group definition from the dataset gp_tbl\n\n\n\n\n`summarise()` has grouped output by 'sex'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 6 × 3\n  sex            gender    count\n  &lt;chr&gt;          &lt;chr&gt;     &lt;int&gt;\n1 female         feminine     16\n2 hermaphroditic masculine     1\n3 male           masculine    60\n4 none           feminine      1\n5 none           masculine     5\n6 &lt;NA&gt;           &lt;NA&gt;          4\n\n\n   \n\n\n\n14.3.8 Sort records\nThe arrange() function is used to reorder rows of a data frame based on the values of one or more columns. It’s a straightforward and highly useful function for sorting data in ascending or descending order, which can help in organizing a dataset.\nExamples:\n\nSorting in ascending order\n\n\n\nR\n\n# Default as Ascending\n1arrange(starwars, height)\n\n\n\n1\n\nSort the starwars data by character height in ascending order.\n\n\n\n\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Yoda         66    17 white      green      brown            896 male  mascu…\n 2 Ratts T…     79    15 none       grey, blue unknown           NA male  mascu…\n 3 Wicket …     88    20 brown      brown      brown              8 male  mascu…\n 4 Dud Bolt     94    45 none       blue, grey yellow            NA male  mascu…\n 5 R2-D2        96    32 &lt;NA&gt;       white, bl… red               33 none  mascu…\n 6 R4-P17       96    NA none       silver, r… red, blue         NA none  femin…\n 7 R5-D4        97    32 &lt;NA&gt;       white, red red               NA none  mascu…\n 8 Sebulba     112    40 none       grey, red  orange            NA male  mascu…\n 9 Gasgano     122    NA none       white, bl… black             NA male  mascu…\n10 Watto       137    NA black      blue, grey yellow            NA male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\nSorting in descending order\n\n\n\nR\n\n1arrange(starwars, desc(height))\n\n\n\n1\n\nSort the starwars data by character height in descending order.\n\n\n\n\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Yarael …    264    NA none       white      yellow          NA   male  mascu…\n 2 Tarfful     234   136 brown      brown      blue            NA   male  mascu…\n 3 Lama Su     229    88 none       grey       black           NA   male  mascu…\n 4 Chewbac…    228   112 brown      unknown    blue           200   male  mascu…\n 5 Roos Ta…    224    82 none       grey       orange          NA   male  mascu…\n 6 Grievous    216   159 none       brown, wh… green, y…       NA   male  mascu…\n 7 Taun We     213    NA none       grey       black           NA   fema… femin…\n 8 Rugor N…    206    NA none       green      orange          NA   male  mascu…\n 9 Tion Me…    206    80 none       grey       black           NA   male  mascu…\n10 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\nSorting by multiple columns\n\n\n\nR\n\n1arrange(starwars, desc(height), desc(mass))\n\n\n\n1\n\nSort by height and mass in descending order.\n\n\n\n\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Yarael …    264    NA none       white      yellow          NA   male  mascu…\n 2 Tarfful     234   136 brown      brown      blue            NA   male  mascu…\n 3 Lama Su     229    88 none       grey       black           NA   male  mascu…\n 4 Chewbac…    228   112 brown      unknown    blue           200   male  mascu…\n 5 Roos Ta…    224    82 none       grey       orange          NA   male  mascu…\n 6 Grievous    216   159 none       brown, wh… green, y…       NA   male  mascu…\n 7 Taun We     213    NA none       grey       black           NA   fema… femin…\n 8 Tion Me…    206    80 none       grey       black           NA   male  mascu…\n 9 Rugor N…    206    NA none       green      orange          NA   male  mascu…\n10 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\n\n\n\n\nSorting with NA values\n\n\n\n\n\nBy default, arrange() function will place NA (missing) values at the end of the sort.\n\n\n\nR\n\narrange(starwars, birth_year) |&gt; tail(10)\n\n\n# A tibble: 10 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Grievous    216   159 none       brown, wh… green, y…         NA male  mascu…\n 2 Tarfful     234   136 brown      brown      blue              NA male  mascu…\n 3 Raymus …    188    79 brown      light      brown             NA male  mascu…\n 4 Sly Moo…    178    48 none       pale       white             NA &lt;NA&gt;  &lt;NA&gt;  \n 5 Tion Me…    206    80 none       grey       black             NA male  mascu…\n 6 Finn         NA    NA black      dark       dark              NA male  mascu…\n 7 Rey          NA    NA brown      light      hazel             NA fema… femin…\n 8 Poe Dam…     NA    NA brown      light      brown             NA male  mascu…\n 9 BB8          NA    NA none       none       black             NA none  mascu…\n10 Captain…     NA    NA none       none       unknown           NA fema… femin…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\n\nR\n\narrange(starwars, desc(birth_year)) |&gt; tail(10)\n\n\n# A tibble: 10 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Grievous    216   159 none       brown, wh… green, y…         NA male  mascu…\n 2 Tarfful     234   136 brown      brown      blue              NA male  mascu…\n 3 Raymus …    188    79 brown      light      brown             NA male  mascu…\n 4 Sly Moo…    178    48 none       pale       white             NA &lt;NA&gt;  &lt;NA&gt;  \n 5 Tion Me…    206    80 none       grey       black             NA male  mascu…\n 6 Finn         NA    NA black      dark       dark              NA male  mascu…\n 7 Rey          NA    NA brown      light      hazel             NA fema… femin…\n 8 Poe Dam…     NA    NA brown      light      brown             NA male  mascu…\n 9 BB8          NA    NA none       none       black             NA none  mascu…\n10 Captain…     NA    NA none       none       unknown           NA fema… femin…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\n\n\n\n\n\n14.3.9 Joins\nJoins are used to combine data from two data frames (or tibbles) based on matching values in specified columns. They are fundamental operations for data manipulation, allowing you to bring together information from different sources into a single dataset.\n\n\n\nR\n\ndf1 &lt;- tibble(\n  id = 1:4,\n  name = c(\"Paul\", \"Jamy\", \"Wendy\", \"David\"),\n  score = c(85, 90, 88, 92)\n)\ndf1\n\n\n# A tibble: 4 × 3\n     id name  score\n  &lt;int&gt; &lt;chr&gt; &lt;dbl&gt;\n1     1 Paul     85\n2     2 Jamy     90\n3     3 Wendy    88\n4     4 David    92\n\n\n\ndf2 &lt;- tibble(\n  id = c(2, 3, 4, 5),\n  subject = c(\"Math\", \"Science\", \"History\", \"Art\"),\n  grade = c(\"A\", \"B\", \"B+\", \"A-\")\n)\ndf2\n\n# A tibble: 4 × 3\n     id subject grade\n  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;\n1     2 Math    A    \n2     3 Science B    \n3     4 History B+   \n4     5 Art     A-   \n\n\n\ninner_join\nThis returns rows with matching values in both data frames.\n\n\n\nR\n\n1inner_join(df1, df2, by = \"id\")\n\n\n\n1\n\nOnly rows with matching id values in both df1 and df2 are returned.\n\n\n\n\n# A tibble: 3 × 5\n     id name  score subject grade\n  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;\n1     2 Jamy     90 Math    A    \n2     3 Wendy    88 Science B    \n3     4 David    92 History B+   \n\n\n\n\nleft_join\nThis returns all rows from the left data frame and matching rows from the right data frame. All rows from the left data frame (df1) will be matched rows from the right data frame (df2). If there’s no match, NA is returned for columns from the right data frame.\n\n\n\nR\n\n1left_join(df1, df2, by = \"id\")\n\n\n\n1\n\nAll rows from df1 are kept. For id = 1, there’s no match in df2, so NA values are filled in for subject and grade.\n\n\n\n\n# A tibble: 4 × 5\n     id name  score subject grade\n  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;\n1     1 Paul     85 &lt;NA&gt;    &lt;NA&gt; \n2     2 Jamy     90 Math    A    \n3     3 Wendy    88 Science B    \n4     4 David    92 History B+   \n\n\n\n\nright_join\nThis returns all rows from the right data frame and matching rows from the left data frame. all rows from the right data frame (df2) will be matched rows from the left data frame (df1). If there’s no match, NA is returned for columns from the left data frame.\n\n\n\nR\n\n1right_join(df1, df2, by = \"id\")\n\n\n\n1\n\nAll rows from df2 are kept. For id = 5, there’s no match in df1, so NA values are filled in for name and score.\n\n\n\n\n# A tibble: 4 × 5\n     id name  score subject grade\n  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;\n1     2 Jamy     90 Math    A    \n2     3 Wendy    88 Science B    \n3     4 David    92 History B+   \n4     5 &lt;NA&gt;     NA Art     A-   \n\n\n\n\nfull_join\nThis returns all rows from both data frames, with matching rows combined. If there’s no match, NA is returned in the unmatched columns.\n\n\n\nR\n\n1full_join(df1, df2, by = \"id\")\n\n\n\n1\n\nAll rows from both df1 and df2 are included. For id = 1 and id = 5, missing values are filled with NA.\n\n\n\n\n# A tibble: 5 × 5\n     id name  score subject grade\n  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;\n1     1 Paul     85 &lt;NA&gt;    &lt;NA&gt; \n2     2 Jamy     90 Math    A    \n3     3 Wendy    88 Science B    \n4     4 David    92 History B+   \n5     5 &lt;NA&gt;     NA Art     A-   \n\n\n\n\nsemi_join\nThis returns rows from the left data frame that have matching values in the right data frame, without bringing columns from the right data frame. The semi_join() returns all rows from the left data frame (df1) that have a match in the right data frame (df2). It does not include any columns from the right data frame.\n\n\n\nR\n\n1semi_join(df1, df2, by = \"id\")\n\n\n\n1\n\nOnly rows from df1 with id values that match df2 are returned, without including columns from df2.\n\n\n\n\n# A tibble: 3 × 3\n     id name  score\n  &lt;int&gt; &lt;chr&gt; &lt;dbl&gt;\n1     2 Jamy     90\n2     3 Wendy    88\n3     4 David    92\n\n\n\n\nanti_join\nThis returns rows from the left data frame that do not have matching values in the right data frame. The anti_join() returns all rows from the left data frame (df1) that do not have a match in the right data frame (df2).\n\n\n\nR\n\n1anti_join(df1, df2, by = \"id\")\n\n\n\n1\n\nOnly rows from df1 where id does not match any value in df2 are returned.\n\n\n\n\n# A tibble: 1 × 3\n     id name  score\n  &lt;int&gt; &lt;chr&gt; &lt;dbl&gt;\n1     1 Paul     85\n\n\n\n\nJoining with different column names\nIf the columns you want to join by have different names in the two data frames, you can specify them as a named vector.\n\n\n\nR\n\ndf3 &lt;- tibble(\n  id1 = c(1, 2, 3),\n  value1 = c(\"A\", \"B\", \"C\")\n)\n\ndf3\n\n\n# A tibble: 3 × 2\n    id1 value1\n  &lt;dbl&gt; &lt;chr&gt; \n1     1 A     \n2     2 B     \n3     3 C     \n\n\n\n\n\nR\n\ndf4 &lt;- tibble(\n  id2 = c(2, 3, 4),\n  value2 = c(\"X\", \"Y\", \"Z\")\n)\n\ndf4\n\n\n# A tibble: 3 × 2\n    id2 value2\n  &lt;dbl&gt; &lt;chr&gt; \n1     2 X     \n2     3 Y     \n3     4 Z     \n\n\n\n\n\nR\n\n1inner_join(df3, df4, by = c(\"id1\" = \"id2\"))\n\n\n\n1\n\nJoin using different column names ‘id1’ and ‘id2’\n\n\n\n\n# A tibble: 2 × 3\n    id1 value1 value2\n  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt; \n1     2 B      X     \n2     3 C      Y     \n\n\n\n\n\n14.3.10 Bind row & column\nYou can combine multiple data frames (or tibbles) either by stacking them vertically (row-wise) or horizontally (column-wise).\n\nAppend new data frames by row\nAlso known as vertical concatenation, stacks multiple data frames on top of each other by rows, meaning it adds new observations to a dataset.\n\n\n\nR\n\ndf &lt;- tibble(\n  id = 1:4,\n  name = c(\"Jane\", \"Paul\", \"Jouel\", \"Ruth\"),\n  category = c(\"VIP\", \"Regular\", \"Premium\", \"VIP\")\n)\n\ndf\n\n\n# A tibble: 4 × 3\n     id name  category\n  &lt;int&gt; &lt;chr&gt; &lt;chr&gt;   \n1     1 Jane  VIP     \n2     2 Paul  Regular \n3     3 Jouel Premium \n4     4 Ruth  VIP     \n\n\n\n\n\nR\n\nnew_row_df &lt;- tibble(\n  id = 5:6,\n  name = c(\"Doe\", \"Peter\"),\n  category = c(\"Regular\", \"Premium\")\n)\n\nnew_row_df\n\n\n# A tibble: 2 × 3\n     id name  category\n  &lt;int&gt; &lt;chr&gt; &lt;chr&gt;   \n1     5 Doe   Regular \n2     6 Peter Premium \n\n\n\n\n\n\n\n\nSimilar columns and data-type\n\n\n\n\nWhile combining data frames by rows using the function bind_rows(), it is important for the data frames to have the same number of columns.\nThe names of all columns in the data frames must be the same.\nLastly, the data type of each column must also be the same.\n\n\n\n\n\n\nR\n\n1df &lt;- bind_rows(df, new_row_df)\n\ndf\n\n\n\n1\n\nAppend the new_row_df data frame to the main data frame df by row.\n\n\n\n\n# A tibble: 6 × 3\n     id name  category\n  &lt;int&gt; &lt;chr&gt; &lt;chr&gt;   \n1     1 Jane  VIP     \n2     2 Paul  Regular \n3     3 Jouel Premium \n4     4 Ruth  VIP     \n5     5 Doe   Regular \n6     6 Peter Premium \n\n\n\n\n\n\n\n\nHandling different columns\n\n\n\nIf the data frames have different columns, bind_rows() automatically fills missing values with NA.\n\n\n\n\nAppend new data frames by column\nAlso known as horizontal concatenation, joins multiple data frames by columns, meaning it adds new variables (columns) to a dataset. It is useful when you have different datasets with the same number of rows but different variables and want to combine them horizontally.\n\n\n\nR\n\nnew_col_df &lt;- tibble(\n  total_order = sample(seq_len(15), 6)\n)\n\nnew_col_df\n\n\n# A tibble: 6 × 1\n  total_order\n        &lt;int&gt;\n1           2\n2           6\n3           9\n4          10\n5           5\n6           3\n\n\n\n\n\n\n\n\nDifferent row counts\n\n\n\nIf the data frames have different numbers of rows, bind_cols() will still combine them, but the shorter data frame will have NA values for the missing rows.\n\n\n\n\n\nR\n\n1bind_cols(df, new_col_df)\n\n\n\n1\n\nAppend a new data frame new_col_df to the main data frame df by column.\n\n\n\n\n# A tibble: 6 × 4\n     id name  category total_order\n  &lt;int&gt; &lt;chr&gt; &lt;chr&gt;          &lt;int&gt;\n1     1 Jane  VIP                2\n2     2 Paul  Regular            6\n3     3 Jouel Premium            9\n4     4 Ruth  VIP               10\n5     5 Doe   Regular            5\n6     6 Peter Premium            3",
    "crumbs": [
      "R",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "r_tidyverse.html#stringr",
    "href": "r_tidyverse.html#stringr",
    "title": "14  Tidyverse",
    "section": "14.4 {stringr}",
    "text": "14.4 {stringr}\n\n14.4.1 String length\nThe function str_length() helps retrieve the number of elements in a given string. These elements are usually letters.\n\n\n\nR\n\n1str_length(\"Hello World\")\n\n\n\n1\n\nGet the number of elements in the string ‘Hello World’\n\n\n\n\n[1] 11\n\n\n\n\n\n14.4.2 Case format\n\n\n\nR\n\nexample_string &lt;- \"worKIng wIth caSe\"\n\nexample_string\n\n\n[1] \"worKIng wIth caSe\"\n\n\n\nUpper case\nConvert all strings to upper case.\n\n\n\nR\n\n1str_to_upper(example_string)\n\n\n\n1\n\nChange the example_string value to upper case.\n\n\n\n\n[1] \"WORKING WITH CASE\"\n\n\n\n\nLower case\nConvert all strings to lower case.\n\n\n\nR\n\n1str_to_lower(example_string)\n\n\n\n1\n\nChange the example_string value to lower case\n\n\n\n\n[1] \"working with case\"\n\n\n\n\ntitle case\nConvert all strings to a title case, where the first letter of each word is capitalized.\n\n\n\nR\n\n1str_to_title(example_string)\n\n\n\n1\n\nChange the example_string value to a title case.\n\n\n\n\n[1] \"Working With Case\"\n\n\n\n\nSentence case\nConvert the string to a sentence case, where only the first letter of sentence is capitalized.\n\n\n\nR\n\n1str_to_sentence(example_string)\n\n\n\n1\n\nChange the example_string value to a sentence case.\n\n\n\n\n[1] \"Working with case\"\n\n\n\n\n\n\n14.4.3 Detect the presence of a match\nWhen using the str_detect() function to detect the presence of a match it returns a logical vector with TRUE for each element of string that matches pattern and FALSE otherwise.\n\n\n\nR\n\n1status &lt;- c(\"Success\", \"Failed\", \"Success\", \"Processing\", \"success\")\n\nstatus\n\n\n\n1\n\nCreate a vector of strings\n\n\n\n\n[1] \"Success\"    \"Failed\"     \"Success\"    \"Processing\" \"success\"   \n\n\n\n\n\nR\n\n1str_detect(status, \"Success\")\n\n\n\n1\n\nCheck if the value “Success” is in any of the values in status.\n\n\n\n\n[1]  TRUE FALSE  TRUE FALSE FALSE\n\n\n\n\n\n\n\n\nCase sensitive\n\n\n\nThe str_detect() is case sensitive like most functions in the {stringr} package. It is important to use the appropriate type of case to avoid misleading results like the case of the last “success” string above.\n\n\n\n\n\n14.4.4 Subset string\nFind and extract matching elements from a string that match a specified pattern.\n\n\n\nR\n\n1str_subset(status, 'S')\n\n\n\n1\n\nExtract only string with a capital letter S in status\n\n\n\n\n[1] \"Success\" \"Success\"\n\n\nUsing regular expression:\n\n\n\nR\n\n1str_subset(status, '^P')\n\n\n\n1\n\nExtract status starting with the letter “P”\n\n\n\n\n[1] \"Processing\"\n\n\n\n\n\nR\n\n1str_subset(status, 'd$')\n\n\n\n1\n\nExtract only strings that ends with a letter “d”.\n\n\n\n\n[1] \"Failed\"\n\n\n\n\n\n14.4.5 Extract a match\nThe function str_extract() is specifically used to extract the first match of a specified pattern from each element of a character vector.\n\n\n\nR\n\nshopping_list &lt;- c(\"Orange x2\", \"A bag of beans\", \"1 pack of sugar\", \"Milk x4\")\n\nshopping_list\n\n\n[1] \"Orange x2\"       \"A bag of beans\"  \"1 pack of sugar\" \"Milk x4\"        \n\n\n\n\n\nR\n\nstr_extract(shopping_list, \"\\\\d\")\n\n\n[1] \"2\" NA  \"1\" \"4\"\n\n\n\n\n\n14.4.6 Interpolating strings\nThe str_glue() provides elegant syntax to create formatted strings by embedding variable values directly within the string. This allows for dynamic string creation based on variable content.\n\n\n\nR\n\nname &lt;- \"John\"\nage &lt;- 30\n\nstr_glue(\"My name is {name} and I'm {age} years old.\")\n\n\nMy name is John and I'm 30 years old.\n\n\n\nNamed arguments\n\n\n\nR\n\nstr_glue(\n  \"My name is {name}, and my age next year will be {age + 1}.\", \n  name = \"Joe\", \n  age = 40\n)\n\n\nMy name is Joe, and my age next year will be 41.\n\n\n\n\n\n\n14.4.7 Remove matched patterns from string\n\nstr_remove\nThe str_remove() function is used to remove the first occurrence of a specified pattern from each string in a character vector.\n\n\n\nR\n\nstatus &lt;- c(\"Status: Success\", \"Status: Processing\")\n\nstr_remove(status, \"Status: \")\n\n\n[1] \"Success\"    \"Processing\"\n\n\n\n\nstr_remove_all\nThe str_remove_all() function extends the functionality of str_remove() by removing all occurrences of a specified pattern from each string in a character vector.\n\n\n\nR\n\namount &lt;- c(\"194,450,000\", \"278,574,789\", \"120,245,658\")\n\nstr_remove_all(amount, \",\")\n\n\n[1] \"194450000\" \"278574789\" \"120245658\"\n\n\n\n\n\n\n14.4.8 Replace matches with a new string\n\nReplace a single (first) match\nThe str_replace() function is used to replace the first occurrence of a pattern in a string with a specified replacement.\n\n\n\nR\n\namount &lt;- c(\"S100\", \"S200\", \"S300\")\n\nstr_replace(amount, \"S\", \"$\")\n\n\n[1] \"$100\" \"$200\" \"$300\"\n\n\n\n\nReplace a multiple matches\nThe str_replace_all() function serves a similar purpose but replaces all occurrences of a pattern within a string or vector of strings.\n\n\n\nR\n\nstr_replace_all(amount, \"S\", \"$\")\n\n\n[1] \"$100\" \"$200\" \"$300\"\n\n\n\n\n\n14.4.9 Split string into serveral part\nThe str_split() can divide a character vector into substrings based on a specified pattern.\n\n\n\nR\n\nfruits &lt;- c(\"apples and oranges and bananas and pears\")\n\nstr_split(fruits, \" and \")\n\n\n[[1]]\n[1] \"apples\"  \"oranges\" \"bananas\" \"pears\"  \n\n\n\n\n\n14.4.10 Remove whitespace\nUse the str_trim() removes whitespace from start and end of string.\n\n\n\nR\n\nwhitespace_str &lt;- \" Complete \"\n\nwhitespace_str\n\n\n[1] \" Complete \"\n\n\n\n\n\nR\n\n# Left trim                         \n1str_trim(whitespace_str, side = \"left\")\n\n\n\n1\n\nRemove leading whitespace.\n\n\n\n\n[1] \"Complete \"\n\n\n\n\n\nR\n\n# Right trim\n1str_trim(whitespace_str, side = \"right\")\n\n\n\n1\n\nRemove trailing whitespace.\n\n\n\n\n[1] \" Complete\"\n\n\n\n\n\nR\n\n1str_trim(whitespace_str, side = \"both\")\n\n\n\n1\n\nRemove both leading and trailing whitespace.\n\n\n\n\n[1] \"Complete\"",
    "crumbs": [
      "R",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "r_tidyverse.html#tidyr",
    "href": "r_tidyverse.html#tidyr",
    "title": "14  Tidyverse",
    "section": "14.5 {tidyr}",
    "text": "14.5 {tidyr}\n\n14.5.1 Drop rows containing missing values\nThe drop_na() function is to remove rows from a data frame where any specified columns contain missing values (NA). If no specific columns are indicated, it will check all columns by default.\n\n\n\nR\n\ndf &lt;- tibble(\n  x = 1:8,\n  y = c(NA, sample(seq_len(1000), 5), NA, NA),\n  z = c(NA, LETTERS[1:7])\n)\n\ndf\n\n\n# A tibble: 8 × 3\n      x     y z    \n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;\n1     1    NA &lt;NA&gt; \n2     2   138 A    \n3     3   198 B    \n4     4   382 C    \n5     5   893 D    \n6     6   875 E    \n7     7    NA F    \n8     8    NA G    \n\n\n\nDrop all missing values\n\n\n\nR\n\n1drop_na(df)\n\n\n\n1\n\nThe resulting data frame will only include rows where there are no NAs in any column.\n\n\n\n\n# A tibble: 5 × 3\n      x     y z    \n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;\n1     2   138 A    \n2     3   198 B    \n3     4   382 C    \n4     5   893 D    \n5     6   875 E    \n\n\n\n\nSelecting specific columns\n\n\n\nR\n\n1drop_na(df, z)\n\n\n\n1\n\nThis will remove rows where column ‘z’ has NA values while ignoring other columns.\n\n\n\n\n# A tibble: 7 × 3\n      x     y z    \n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;\n1     2   138 A    \n2     3   198 B    \n3     4   382 C    \n4     5   893 D    \n5     6   875 E    \n6     7    NA F    \n7     8    NA G    \n\n\n\n\n\n14.5.2 Reshaping data\nReshaping data refers to the process of transforming data from one format to another. The two primary formats are “long” and “wide.” In a long format, each observation is represented in a single row, while in a wide format, multiple observations are spread across several columns. Reshaping allows analysts to manipulate datasets more effectively by organizing them into the desired structure for specific analyses or visualizations.\n\npivot_longer\nThis function is used to convert data from wide format to long format. It takes multiple columns that represent different variables and collapses them into key-value pairs.\n\n\n\nR\n\ndf &lt;- tibble(\n  id_col = 1:3,\n  `&lt;15` = sample(100:10000, 3),\n  `16-35` = sample(1000:50000, 3),\n  `36-55` = sample(5000:100000, 3),\n  `56&gt;` = sample(5000:1000000, 3)\n)\n\ndf\n\n\n# A tibble: 3 × 5\n  id_col `&lt;15` `16-35` `36-55`  `56&gt;`\n   &lt;int&gt; &lt;int&gt;   &lt;int&gt;   &lt;int&gt;  &lt;int&gt;\n1      1  3930   40461   55086 201609\n2      2  6933   33469   88407 501767\n3      3  8160   28147   91471 231232\n\n\n\n\n\nR\n\npivot_longer(df, !id_col, names_to = \"age\", values_to = \"income\")\n\n\n# A tibble: 12 × 3\n   id_col age   income\n    &lt;int&gt; &lt;chr&gt;  &lt;int&gt;\n 1      1 &lt;15     3930\n 2      1 16-35  40461\n 3      1 36-55  55086\n 4      1 56&gt;   201609\n 5      2 &lt;15     6933\n 6      2 16-35  33469\n 7      2 36-55  88407\n 8      2 56&gt;   501767\n 9      3 &lt;15     8160\n10      3 16-35  28147\n11      3 36-55  91471\n12      3 56&gt;   231232\n\n\n\n\npivot_wider\nThis function spreads key-value pairs across multiple columns based on unique values from one or more columns.\n\n\n\nR\n\ndf &lt;- tibble(\n  id_col = c(rep(1, 3), rep(2, 3), rep(3, 3)),\n  state = rep(c(\"Lagos\", \"Kano\", \"Akwa Ibom\"), 3),\n  market_size = sample(15:25, 9)\n)\n\n\n\n\n\nR\n\npivot_wider(df, names_from = state, values_from = market_size)\n\n\n# A tibble: 3 × 4\n  id_col Lagos  Kano `Akwa Ibom`\n   &lt;dbl&gt; &lt;int&gt; &lt;int&gt;       &lt;int&gt;\n1      1    17    23          21\n2      2    24    20          19\n3      3    15    18          25\n\n\n\n\n\n\n14.5.3 Separate character column values\nSeparating a character column into multiple columns is a common data manipulation task, especially when dealing with datasets that contain concatenated or delimited strings.\n\nSeparate character column into multiple columns\nThis takes a single column containing combined values and splits it into multiple columns based on a specified delimiter.\n\n\n\nR\n\ndf &lt;- tibble(id_col = 1:3, x = c(\"Lagos-789\", \"Ondo-4568\", \"Oyo-2478\"))\n\ndf\n\n\n# A tibble: 3 × 2\n  id_col x        \n   &lt;int&gt; &lt;chr&gt;    \n1      1 Lagos-789\n2      2 Ondo-4568\n3      3 Oyo-2478 \n\n\n\n\n\nR\n\nseparate_wider_delim(\n  data = df, \n  cols = x, \n1  delim = \"-\",\n2  names = c(\"state\", \"participant\")\n)\n\n\n\n1\n\nSplit the value in the column using the “-” sign.\n\n2\n\nAssign the new column names of the splitted values.\n\n\n\n\n# A tibble: 3 × 3\n  id_col state participant\n   &lt;int&gt; &lt;chr&gt; &lt;chr&gt;      \n1      1 Lagos 789        \n2      2 Ondo  4568       \n3      3 Oyo   2478       \n\n\n\n\nSeparate character column into multiple rows\nThis takes a single column containing combined values and splits it into multiple rows based on a specified delimiter.\n\n\n\nR\n\ndf &lt;- tibble(\n  id_col = 1:3,\n  x = c(\"one\", \"one two\", \"one two\")\n)\n\ndf\n\n\n# A tibble: 3 × 2\n  id_col x      \n   &lt;int&gt; &lt;chr&gt;  \n1      1 one    \n2      2 one two\n3      3 one two\n\n\n\n\n\nR\n\nseparate_longer_delim(df, x, delim = \" \")\n\n\n# A tibble: 5 × 2\n  id_col x    \n   &lt;int&gt; &lt;chr&gt;\n1      1 one  \n2      2 one  \n3      2 two  \n4      3 one  \n5      3 two  \n\n\n\n\n\nUnite multiple columns into sigle column\nUniting multiple columns into a single column is a common data manipulation task that allows you to combine information from different columns into one.\n\n\n\nR\n\ndf &lt;- tibble(\n  apartment = c(\"478 Apt\", \"Floor 54 Apt\", \"kent 78 Apt\"),\n  street = c(\"apex St.\", \"clary St.\", \"cover St.\")\n)\n\ndf\n\n\n# A tibble: 3 × 2\n  apartment    street   \n  &lt;chr&gt;        &lt;chr&gt;    \n1 478 Apt      apex St. \n2 Floor 54 Apt clary St.\n3 kent 78 Apt  cover St.\n\n\n\n\n\nR\n\nunite(\n  data = df,\n1  col = \"address\",\n2  c(apartment, street),\n3  sep = \", \"\n)\n\n\n\n1\n\nThe name of the new column.\n\n2\n\nThe variables to combine into one.\n\n3\n\nThe separator to use between values.\n\n\n\n\n# A tibble: 3 × 1\n  address                \n  &lt;chr&gt;                  \n1 478 Apt, apex St.      \n2 Floor 54 Apt, clary St.\n3 kent 78 Apt, cover St.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "r_tidyverse.html#purrr",
    "href": "r_tidyverse.html#purrr",
    "title": "14  Tidyverse",
    "section": "14.6 {purrr}",
    "text": "14.6 {purrr}\nThe map() function is an important part of the purrr package just like lapply() in base R, it allows users to apply a specified function to each element of a list or atomic vector and returns a list containing the results.\n\n\n\n\n\n\nFunctionality\n\n\n\nThe primary input to map() is a list or atomic vector (.x), and it takes a function (.f) that will be applied to each element of .x. The output is always a list, regardless of the type of input.\n\n\nExample:\n\n\n\nR\n\n1map(1:10, \\(x) x * 2)\n\n\n\n1\n\nmultiply each number from 1 to 10 by 2 and returns a list with the results.\n\n\n\n\n[[1]]\n[1] 2\n\n[[2]]\n[1] 4\n\n[[3]]\n[1] 6\n\n[[4]]\n[1] 8\n\n[[5]]\n[1] 10\n\n[[6]]\n[1] 12\n\n[[7]]\n[1] 14\n\n[[8]]\n[1] 16\n\n[[9]]\n[1] 18\n\n[[10]]\n[1] 20\n\n\n\n14.6.1 Other variants of map()\n\nMap logical\nThe map_lgl() function is expected to return a logical vector.\n\n\n\nR\n\n1map_lgl(list(1, NA, 2), \\(x) is.na(x))\n\n\n\n1\n\nCheck whether any of the values in the vector is NA\n\n\n\n\n[1] FALSE  TRUE FALSE\n\n\n\n\nMap integer\nUsing the map_int() function returns an integer vector.\n\n\n\nR\n\n1map_int(list(10.478, 10.5478, 11.2478), \\(x) round(x * 100))\n\n\n\n1\n\nMultiply each items in the list by 100 and round them up.\n\n\n\n\n[1] 1048 1055 1125\n\n\n\n\nMap double\nThe map_dbl() is useful for returning a double vector.\n\n\n\nR\n\n1map_dbl(list(10.478, 10.5478, 11.2478), \\(x) round(x * 100, 2))\n\n\n\n1\n\nMultiply each items in the list by 100 and round them up to two decimal place.\n\n\n\n\n[1] 1047.80 1054.78 1124.78\n\n\n\n\nMap character\nThe function map_chr() helps return a character vector.\n\n\n\nR\n\nmap_chr(\n  list(\"sTate\", \"ZONe\", \"COunTrY\", \"contineNT\"),\n1  \\(x) str_to_title(x)\n)\n\n\n\n1\n\nConvert each character items in the list to a title case.\n\n\n\n\n[1] \"State\"     \"Zone\"      \"Country\"   \"Continent\"\n\n\n\n\n\n14.6.2 list manipulation\n\nKeep values based on a condition\nThe keep() function returns elements of a list or vector that satisfy a specified condition\n\n\n\nR\n\nfull_list &lt;- list(c(20, 50, 80), c(10, 30, 50))\n\nfull_list\n\n\n[[1]]\n[1] 20 50 80\n\n[[2]]\n[1] 10 30 50\n\n\n\n\n\nR\n\n1keep(full_list, \\(x) mean(x) &gt; 40)\n\n\n\n1\n\nReturn the vector where the average value is greater than 40.\n\n\n\n\n[[1]]\n[1] 20 50 80\n\n\n\n\ndiscard values based on a condition\nThe discard() function is the opposite of keep() and it removes elements that satisfy a condition.\n\n\n\nR\n\n1discard(full_list, \\(x) min(x) &gt; 15)\n\n\n\n1\n\nDrop the vector where the minimum value is greater than 15\n\n\n\n\n[[1]]\n[1] 10 30 50\n\n\n\n\nSafely get element deep within a nested list\nThe pluck() function can extracts elements from deeply nested lists or data structures.\n\n\n\nR\n\nnested_list &lt;- list(\n  a = list(ax = list(ay = 5)), \n  b = list(bx = list(by = 20))\n)\n\nnested_list\n\n\n$a\n$a$ax\n$a$ax$ay\n[1] 5\n\n\n\n$b\n$b$bx\n$b$bx$by\n[1] 20\n\n\n\n\n\nR\n\n1pluck(nested_list, \"a\", \"ax\", \"ay\")\n\n\n\n1\n\nExtract the value assigned to the name ay in the nested list.\n\n\n\n\n[1] 5",
    "crumbs": [
      "R",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "r_tidyverse.html#lubridate",
    "href": "r_tidyverse.html#lubridate",
    "title": "14  Tidyverse",
    "section": "14.7 {lubridate}",
    "text": "14.7 {lubridate}\nThe lubridate package in R simplifies handling and manipulating dates and times. It has several functions for parsing, manipulating, and performing operations on dates and times. This makes handling dates less error-prone, with a clear syntax that allows you to handle real-world complexities\n\n14.7.1 Parsing dates\nThere are different functions that can parse strings into date objects, including:\n\nas_date\n\n\n\nR\n\n1as_date(\"2023/05/23\")\n\n\n\n1\n\nParse the string “2023/05/23” to a date object.\n\n\n\n\n[1] \"2023-05-23\"\n\n\n\n\nyear-month-day\n\n\n\nR\n\n1ymd(\"2023-02-25\")\n\n\n\n1\n\nParse the string “2023-02-25” to a date object using the helper function ymd()\n\n\n\n\n[1] \"2023-02-25\"\n\n\n\n\nyear-day-month\n\n\n\nR\n\n1ydm(\"2023-25-02\")\n\n\n\n1\n\nParse the string “2023-25-02” to a date object using the helper function ydm()\n\n\n\n\n[1] \"2023-02-25\"\n\n\n\n\nmonth-day-year\n\n\n\nR\n\n1mdy(\"12-25-2021\")\n\n\n\n1\n\nParse the string “12-25-2021” to a date object using the helper function mdy()\n\n\n\n\n[1] \"2021-12-25\"\n\n\n\n\nmonth-year-day\n\n\n\nR\n\n1myd(\"12-2023-09\")\n\n\n\n1\n\nParse the string “12-2023-09” to a date object using the helper function myd()\n\n\n\n\n[1] \"2023-12-09\"\n\n\n\n\nday-month-year\n\n\n\nR\n\n1dmy(\"05-23-2022\")\n\n\n\n1\n\nParse the string “05-23-2022” to a date object using the helper function dmy()\n\n\n\n\n[1] NA\n\n\n\n\nday-year-month\n\n\n\nR\n\n1dym(\"05-2022-08\")\n\n\n\n1\n\nParse the string “05-2022-08” to a date object using the helper function dym()\n\n\n\n\n[1] \"2022-08-05\"\n\n\n\n\n\n14.7.2 Parsing time\n\nhour-minute-second\n\n\n\nR\n\n1hms(\"12:25:35\")\n\n\n\n1\n\nParse the string “12:25:35” to a time object using the helper function hms()\n\n\n\n\n[1] \"12H 25M 35S\"\n\n\n\n\nhour-minute\n\n\n\nR\n\n1hm(\"05:35\")\n\n\n\n1\n\nParse the string “05:35” to a time object using the helper function hm()\n\n\n\n\n[1] \"5H 35M 0S\"\n\n\n\n\n\n14.7.3 Parsing to datetime\n\n\n\nR\n\n1as_datetime(\"2023-09-15 12:45:00\")\n\n\n\n1\n\nConvert the string to a date-time object.\n\n\n\n\n[1] \"2023-09-15 12:45:00 UTC\"\n\n\n\n\n\nR\n\nymd_hms(\"2023-09-15 12:45:00\")\n\n\n[1] \"2023-09-15 12:45:00 UTC\"\n\n\n\n\n\n\n\n\nOther helper functions for date-time\n\n\n\nJust like the date parsing helper functions, the date-time also have similar functions including the time object.\n\n\n\n\n14.7.4 Extracting components of a date\nYou can extract specific components of a date-time object using functions such as the following:\n\n\n\nR\n\n1new_date_time &lt;- ymd_hms(\"2023-09-15 12:45:00\")\n\nnew_date_time\n\n\n\n1\n\nParse the string “2023-09-15 12:45:00” to a date-time object.\n\n\n\n\n[1] \"2023-09-15 12:45:00 UTC\"\n\n\n\nDate components\n\n\n\nR\n\n1year(new_date_time)\n2month(new_date_time)\n3day(new_date_time)\n\n\n\n1\n\nGet the Year component of the new_date_time value.\n\n2\n\nGet the Month component of the new_date_time value.\n\n3\n\nGet the Day component of the new_date_time value.\n\n\n\n\n[1] 2023\n[1] 9\n[1] 15\n\n\n\n\nTime components\n\n\n\nR\n\n1hour(new_date_time)\n2minute(new_date_time)\n3second(new_date_time)\n\n\n\n1\n\nGet the Hour component of the new_date_time value.\n\n2\n\nGet the Minute component of the new_date_time value.\n\n3\n\nGet the Second component of the new_date_time value.\n\n\n\n\n[1] 12\n[1] 45\n[1] 0\n\n\n\n\nDay of .. components\n\n\n\nR\n\n1wday(new_date_time)\n2mday(new_date_time)\n3yday(new_date_time)\n\n\n\n1\n\nExtracts the day of the week. default (1 = Sunday, 7 = Saturday).\n\n2\n\nExtracts Extracts the day of the month.\n\n3\n\nExtracts the day of the year default (1 = January 1, 365/366 = December 31).\n\n\n\n\n[1] 6\n[1] 15\n[1] 258\n\n\n\n\n\n\n14.7.5 Manipulating dates\nDates can be manipulated using arithmetic operators to add or subtract days, months, years, etc. Example:\n\n\n\nR\n\n1new_date_time + days(10)\n2new_date_time - months(2)\n3new_date_time + years(1)\n\n\n\n1\n\nAdds 10 more days to 2023-09-15 12:45:00\n\n2\n\nSubtracts 2 months from 2023-09-15 12:45:00\n\n3\n\nAdds 1 year to 2023-09-15 12:45:00\n\n\n\n\n[1] \"2023-09-25 12:45:00 UTC\"\n[1] \"2023-07-15 12:45:00 UTC\"\n[1] \"2024-09-15 12:45:00 UTC\"\n\n\n\n\n\n14.7.6 Date comparisons\nStandard comparison operators such as (==, &lt;, &gt;, !=) can be used to compare different date objects. Examples:\n\n\n\nR\n\n1ymd(\"2023-09-15\") == ymd(\"2023-09-15\")\n\n\n\n1\n\nCompare whether 2023-09-15 is equal to 2023-09-15\n\n\n\n\n[1] TRUE\n\n\n\n1ymd(\"2023-09-15\") &gt; ymd(\"2023-08-15\")\n\n\n1\n\nCompare whether 2023-09-15 &gt; 2023-08-15\n\n\n\n\n[1] TRUE\n\n\n\nWithin\n\n\n\nR\n\nnew_date_inverval &lt;- interval(ymd(\"2023-01-01\"), ymd(\"2023-12-31\"))\n\n1ymd(\"2023-09-15\") %within% new_date_inverval\n\n\n\n1\n\nChecks if the date 2023-09-15 lies within an interval new_date_inverval.\n\n\n\n\n[1] TRUE",
    "crumbs": [
      "R",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "r_data_visualization.html",
    "href": "r_data_visualization.html",
    "title": "15  Visualization",
    "section": "",
    "text": "Visualzation with {ggplot2}\nData visualization in ggplot2 is based on the Grammar of Graphics and it allows you to layer different visual components to create complex and customization plots.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "r_data_visualization.html#basic-structure-of-a-ggplot-plot",
    "href": "r_data_visualization.html#basic-structure-of-a-ggplot-plot",
    "title": "15  Visualization",
    "section": "15.1 Basic structure of a ggplot plot",
    "text": "15.1 Basic structure of a ggplot plot\n\n\n\nR\n\nggplot(data = &lt;DATA&gt;, aes(x = &lt;X-VAR&gt;, y = &lt;Y-VAR&gt;)) + \n  &lt;GEOM_FUNCTION&gt;()\n\n\n\ndata: The dataset you’re visualizing.\naes(): Aesthetic mappings that define how data variables are mapped to visual properties (like x, y, color, size, shape, etc.).\n**geom_*():** Geometries that represent the type of plot (like points, lines, bars).\n\nThese components work together to create visual representations of data.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "r_data_visualization.html#the-layered-grammar-of-graphics",
    "href": "r_data_visualization.html#the-layered-grammar-of-graphics",
    "title": "15  Visualization",
    "section": "15.2 The Layered grammar of graphics",
    "text": "15.2 The Layered grammar of graphics\nThe major essence of ggplot2 is the layering of components. The following represent key layers:\n\n15.2.1 Data layer\nThe dataset is provided through the data argument within the ggplot() function.\n\n\n\nR\n\n1ggplot(data = mtcars)\n\n\n\n1\n\nCreate a ggplot object including the data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n15.2.2 Aesthetic mappings\nThe aes() function maps your data variables to visual properties like x and y axes, colors, shapes, sizes, etc.\n\n\n\nR\n\n1ggplot(mtcars, aes(x = mpg, y = hp, color = cyl, size = wt))\n\n\n\n1\n\nInclude the aesthetics.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommon aesthetics include\n\n\n\n\nx, y: Variables to plot on x and y axes.\ncolor: Changes colors in bars, areas, point or line geometries based on a variable.\nfill: Fills colors in bars, areas, etc.\nsize: Changes size based on a variable.\nshape: Changes shape of points.\n\n\n\n\n\n15.2.3 Geometries (geom_…())\nGeometries are the building blocks that define the visual representation of the data. The following represent the most common types:\n\n15.2.3.1 Bar chart\n\nFor counting categories\n\nx-axis is categorical\n\n\n\n\nR\n\nggplot(mpg, aes(x = class)) + \n1  geom_bar()\n\n\n\n1\n\nAdd the bar chart geometry to include the bars for each unique class.\n\n\n\n\n\n\n\n\n\n\n\n\n\nFor specific values\n\nx-axis is categorical\ny-axis is numerical\n\n\n\n\nR\n\nggplot(mpg, aes(x = class, y = hwy)) + \n1  geom_col()\n\n\n\n1\n\nAdd the bar chart geometry to include the class bars.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n15.2.3.2 Point (scatter) plot\nCreate a scatter plot which is useful for displaying the relationship between two continuous variables.\n\n\n\nR\n\nggplot(mtcars, aes(x = mpg, y = hp)) + \n1  geom_point()\n\n\n\n1\n\nAdd the point chart geometry to show the mpg and hp relationship.\n\n\n\n\n\n\n\n\n\n\n\n\n\n15.2.3.3 Line chart\nCreate a trend chart by connecting observations in the order of the variable on the X axis.\n\n\n\nR\n\nggplot(economics, aes(x = date, y = unemploy)) + \n1  geom_line()\n\n\n\n1\n\nAdd the line geometry to show the trend of unemployment during the period on the x-axis\n\n\n\n\n\n\n\n\n\n\n\n\n\n15.2.3.4 Histogram\nVisualize the distribution of a single continuous (numeric) variable by dividing the x axis into bins and counting the number of observations in each bin.\n\n\n\nR\n\nggplot(mpg, aes(x = hwy)) + \n1  geom_histogram(binwidth = 5)\n\n\n\n1\n\nAdd the Histogram geometry with 5 bin widths for the hwy variable.\n\n\n\n\n\n\n\n\n\n\n\n\n\n15.2.3.5 Box plot\nCreate a chart that display the distribution of a continuous variable including five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\n\n\nR\n\nggplot(mpg, aes(x = class, y = hwy)) + \n1  geom_boxplot()\n\n\n\n1\n\nAdd the box plot geometry which display the distribution of hwy for each class\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n15.2.4 Faceting\nFacets create multiple plots based on the values of one or more variables. This is useful for comparing subsets of data.\n\nFacet by rows & columns\n\nggplot(mpg, aes(x = hwy, y = cty)) + \n  geom_point() +\n1  facet_wrap(facets = vars(cyl))\n\n\n1\n\nCreate multiple panels using the cyl variable.\n\n\n\n\n\n\n\n\n\n\n\n\n\nFacet by wrapping\n\n\n\nR\n\nggplot(mpg, aes(x = hwy, y = cty)) + \n  geom_point() +\n1  facet_grid(rows = vars(drv), cols = vars(cyl))\n\n\n\n1\n\nCreate multiple panels using the following: Rows = drv, Columns = cyl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n15.2.5 Scales (scale_…())\nScales map data values to visual properties like color, size, position, etc. By default, ggplot2 chooses scales, but there a ways to customize them:\n\n15.2.5.1 Color scales\n\n\n\nR\n\nggplot(mpg, aes(x = hwy, y = cty, color = class)) + \n  geom_point() + \n1  scale_color_brewer(palette = \"Set1\")\n\n\n\n1\n\nChange the default color using a new palette Set1\n\n\n\n\n\n\n\n\n\n\n\n\n\n15.2.5.2 Axis scales\n\n\n\nR\n\nggplot(mpg, aes(x = hwy, y = cty)) + \n  geom_point() + \n1  scale_x_continuous(breaks = seq(10, 40, by = 5))\n\n\n\n1\n\nCreate a new scales on the x axis starting from 10 to 40 increasing by 5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n15.2.6 Coordinate systems (coord_…())\nCoordinates define how data is mapped to the plotting area.\n\n15.2.6.1 Cartesian coordinates (Default)\nUseful for zooming in on a section of the plot.\n\n\n\nR\n\nggplot(mpg, aes(x = hwy, y = cty)) + \n  geom_point() + \n1  coord_cartesian(xlim = c(15, 40))\n\n\n\n1\n\nZoom into a specific range of value 15 to 40 in the a-axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n15.2.6.2 Flipping axes\n\n\n\nR\n\nggplot(mpg, aes(x = class, y = hwy)) + \n  geom_col()\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\nggplot(mpg, aes(x = class, y = hwy)) + \n  geom_col() + \n1  coord_flip()\n\n\n\n1\n\nSwap the x and y axis. i.e move the class to the y axis and the hwy to the x axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n15.2.7 Themes (theme_….())\nggplot2 comes with several themes to change the appearance of the plot. You can also customize individual elements like axis labels, text, and backgrounds using theme():\n\n15.2.7.1 Predefined themes\n\n\n\nR\n\nggplot(mpg, aes(x = hwy, y = cty)) + \n  geom_point() + \n1  theme_minimal()\n\n\n\n1\n\nUse a minimalist theme\n\n\n\n\n\n\n\n\n\n\n\n\n\n15.2.7.2 Customizing the theme\n\n\n\nR\n\nggplot(mpg, aes(x = hwy, y = cty)) + \n  geom_point() + \n  theme(                                                            \n1    axis.title.x = element_text(color = \"deepskyblue3\", size = 12),\n    axis.title.y = element_text(color = \"deepskyblue2\", size = 12),\n2    axis.text = element_text(size = 15),\n3    panel.background = element_rect(fill = \"azure\")\n  )\n\n\n\n1\n\nChange the axis title color (x & y)\n\n2\n\nIncrease the text size of the x and y axis.\n\n3\n\nChange the plot background color.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n15.2.8 Saving plots\n\n\n\nR\n\n1plt &lt;- ggplot(mpg, aes(x = hwy, y = cty)) +\n  geom_point()\n\n2ggsave(\"plot.png\", plot = plt, width = 5, height = 4)\n\n\n\n1\n\nAdd scatter plot of hwy and cty\n\n2\n\nSave the last created plot as a .png file with a width of 5 and height of 4.\n\n\n\n\n\n\n15.2.9 Annotations\n\n15.2.9.1 Titles/labels\nA title provides immediate context to the viewer about what the data represents.It summarizes the main theme or message of the chart, allowing readers to quickly understand the subject matter without needing to delve into the details.\n\n\nIndividual functions\nWorking with the xlab(), ylab() and ggtitle() functions.\n\n\n\nR\n\nggplot(mpg, aes(x = class, y = hwy)) +\n  geom_col() +\n1  xlab(\"Car type\") +\n2  ylab(\"Highway miles per gallon\") +\n  ggtitle(\n3    label = \"Miles per Gallon by Car type\",\n4    subtitle = \"For all Manufacturers\"\n  )\n\n\n\n1\n\nAdd a label or title to the x axis\n\n2\n\nAdd a label or title to the y axis\n\n3\n\nAdd a title to the plot\n\n4\n\nAdd a sub-title to the plot\n\n\n\n\n\n\n\n\n\n\n\n\n\nlabs() function\n\n\n\nR\n\nggplot(mpg, aes(x = class, y = hwy)) +\n  geom_col() +\n  labs( \n1    x = \"Car type\",\n2    y = \"Highway miles per gallon\",\n3    title = \"Miles per Gallon by Car type\",\n4    subtitle = \"For all Manufacturers\",\n5    caption = \"From the MPG dataset\"\n  )\n\n\n\n1\n\nAdd a label or title to the x axis\n\n2\n\nAdd a label or title to the y axis\n\n3\n\nAdd a title to the plot\n\n4\n\nAdd a sub-title to the plot\n\n5\n\nAdd a caption to the plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n15.2.9.2 Text to points:\n\n\n\nR\n\nggplot(iris, aes(x = Sepal.Width, y = Petal.Width, label = Species)) + \n  geom_point() + \n1  geom_text(hjust = 1, vjust = 1)\n\n\n\n1\n\nAdd a text value using the text geometry.\n\n\n\n\n\n\n\n\n\n\n\n\n\n15.2.9.3 Reference lines\n\n\n\nR\n\nggplot(mpg, aes(x = hwy, y = cty)) + \n  geom_point() + \n1  geom_hline(yintercept = 25, linetype = \"dashed\", color = \"firebrick3\") +\n2  geom_vline(xintercept = 25, linetype = \"dashed\", color = \"firebrick3\")\n\n\n\n1\n\nAdd an horizontal reference line to the plot.\n\n2\n\nAdd a vertical reference line to the plot.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "r_exploratory.html",
    "href": "r_exploratory.html",
    "title": "16  EDA",
    "section": "",
    "text": "16.1 Data Inspection",
    "crumbs": [
      "R",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>EDA</span>"
    ]
  },
  {
    "objectID": "r_exploratory.html#data-inspection",
    "href": "r_exploratory.html#data-inspection",
    "title": "16  EDA",
    "section": "",
    "text": "16.1.1 Dataset overview\n\ndplyrBase r\n\n\n\nData Structure\n\n\n\nR\n\nglimpse(mtcars)\n\n\nRows: 32\nColumns: 11\n$ mpg  &lt;dbl&gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,…\n$ cyl  &lt;dbl&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,…\n$ disp &lt;dbl&gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16…\n$ hp   &lt;dbl&gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180…\n$ drat &lt;dbl&gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,…\n$ wt   &lt;dbl&gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.…\n$ qsec &lt;dbl&gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18…\n$ vs   &lt;dbl&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,…\n$ am   &lt;dbl&gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,…\n$ gear &lt;dbl&gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,…\n$ carb &lt;dbl&gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,…\n\n\n\n\nTop records\n\n\n\nR\n\n1slice_head(mtcars)\n\n\n\n1\n\nDisplays the first 5 rows\n\n\n\n\n          mpg cyl disp  hp drat   wt  qsec vs am gear carb\nMazda RX4  21   6  160 110  3.9 2.62 16.46  0  1    4    4\n\n\n\n\nBottom records\n\n\n\nR\n\n1slice_tail(mtcars)\n\n\n\n1\n\nDisplays the last 5 rows\n\n\n\n\n            mpg cyl disp  hp drat   wt qsec vs am gear carb\nVolvo 142E 21.4   4  121 109 4.11 2.78 18.6  1  1    4    2\n\n\n\n\nSamples\n\n\n\nR\n\n1slice_sample(mtcars, n = 10)\n\n\n\n1\n\nGet 10 record samples\n\n\n\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n\n\n\n\n\n\nData Structure\n\n\n\nR\n\nstr(mtcars)\n\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\n\n\n\nTop records\n\n\n\nR\n\n1head(mtcars)\n\n\n\n1\n\nDisplays the first 5 rows\n\n\n\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\n\n\nBottom records\n\n\n\nR\n\n1tail(mtcars)\n\n\n\n1\n\nDisplays the last 5 rows\n\n\n\n\n                mpg cyl  disp  hp drat    wt qsec vs am gear carb\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.7  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2\nFord Pantera L 15.8   8 351.0 264 4.22 3.170 14.5  0  1    5    4\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.5  0  1    5    6\nMaserati Bora  15.0   8 301.0 335 3.54 3.570 14.6  0  1    5    8\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.6  1  1    4    2\n\n\n\n\n\n\n\n\n16.1.2 Checking datatypes\nEach column in a data frame can contain different types of data (e.g., integers, floats, characters). Understanding these types is essential for performing appropriate operations on the data. To ensure that each column has the correct data type (numeric, factor, date, etc.).\n\n\n\nR\n\n1sapply(mtcars, \\(x) class(x))\n\n\n\n1\n\nReturns the data type of each column.\n\n\n\n\n      mpg       cyl      disp        hp      drat        wt      qsec        vs \n\"numeric\" \"numeric\" \"numeric\" \"numeric\" \"numeric\" \"numeric\" \"numeric\" \"numeric\" \n       am      gear      carb \n\"numeric\" \"numeric\" \"numeric\" \n\n\n\n\n16.1.3 Missing values\nTo analyze how much of the data is missing and in which columns. Checking for missing values early helps in planning how to handle them later in analysis or modeling processes.\n\n\n\nR\n\n1colSums(is.na(mtcars))\n\n\n\n1\n\nCounts missing values in each column\n\n\n\n\n mpg  cyl disp   hp drat   wt qsec   vs   am gear carb \n   0    0    0    0    0    0    0    0    0    0    0",
    "crumbs": [
      "R",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>EDA</span>"
    ]
  },
  {
    "objectID": "r_exploratory.html#univariate-analysis",
    "href": "r_exploratory.html#univariate-analysis",
    "title": "16  EDA",
    "section": "16.2 Univariate Analysis",
    "text": "16.2 Univariate Analysis\n\n16.2.1 Numeric variables\nSummary statistics: Calculate mean, median, variance, standard deviation, and quantiles\n\nAll numeric variables\n\n\n\nR\n\nmtcars |&gt;\n1  select(where(is.numeric)) |&gt;\n2  summary()\n\n\n\n1\n\nSelect only numeric variables.\n\n2\n\nPerform a descriptive summary for each variable.\n\n\n\n\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000  \n\n\n\n\nA single numeric variable\n\n\n\nR\n\nmtcars |&gt;\n  summarise(\n    minimum = min(mpg, na.rm = TRUE),\n    quantile_25 = quantile(mpg, 0.25), \n    mean = mean(mpg, na.rm = TRUE),\n    median = median(mpg, na.rm = TRUE),\n    variance = var(mpg, na.rm = TRUE),\n    standard_deviation = sd(mpg, na.rm = TRUE),\n    quantile_75 = quantile(mpg, 0.75), \n    maximum = max(mpg, na.rm = TRUE)\n  )\n\n\n  minimum quantile_25     mean median variance standard_deviation quantile_75\n1    10.4      15.425 20.09062   19.2  36.3241           6.026948        22.8\n  maximum\n1    33.9\n\n\n\n\nDistribution visualization\nVisualizing the distribution of a numeric variable is a fundamental step in data analysis, and two common methods for achieving this are histograms and box plots. Each method provides unique insights into the data, helping analysts understand its characteristics and make informed decisions.\n\n\n\nR\n\nmtcars |&gt;\n  ggplot(aes(x = mpg)) +\n  geom_histogram(binwidth = 5, color = \"white\") +\n  ggtitle(\"Distribution of Miles Per Gallon\")\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\nmtcars |&gt;\n  ggplot(aes(x = mpg)) +\n  geom_boxplot() +\n  ggtitle(\"Miles Per Gallon Distribution\")\n\n\n\n\n\n\n\n\n\n\n\n\n16.2.2 Categorical variables\n\n16.2.2.1 Frequency distribution\nRetrieve the number of each category appeared in the data.\n\ndplyrBase R\n\n\n\n\n\nR\n\n1count(mtcars, cyl, sort = TRUE, name = \"count\")\n\n\n\n1\n\nGet the unique cyl count\n\n\n\n\n  cyl count\n1   8    14\n2   4    11\n3   6     7\n\n\n\n\n\n\n\nR\n\n1table(mtcars$cyl)\n\n\n\n1\n\nGet a table of unique cyl count.\n\n\n\n\n\n 4  6  8 \n11  7 14 \n\n\n\n\n\n\n\n\nR\n\nmtcars |&gt;\n  count(cyl) |&gt;\n  ggplot(aes(x = cyl, y = n)) +\n  geom_col() +\n  labs(\n    x = \"cylinders\", \n    y = \"Count\", \n    title = \"Count of record by Number of Cylinders\"\n  )",
    "crumbs": [
      "R",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>EDA</span>"
    ]
  },
  {
    "objectID": "r_exploratory.html#bivariate-analysis",
    "href": "r_exploratory.html#bivariate-analysis",
    "title": "16  EDA",
    "section": "16.3 Bivariate Analysis",
    "text": "16.3 Bivariate Analysis\nBivariate analysis examines the relationship between two variables.\n\n16.3.1 Numeric vs Numeric\nperforming a correlation analysis and creating a scatter plot are fundamental when analyzing the relationship between two continuous variables\n\nCorrelation\nCorrelation analysis quantifies the strength and direction of the linear relationship between two continuous variables.\n\n\n\nR\n\ncor(mtcars$mpg, mtcars$disp) \n\n\n[1] -0.8475514\n\n\n\n\nScatter plots\nA scatter plot visually represents the relationship between two continuous variables by plotting individual data points on a Cartesian plane.\n\n\n\nR\n\nmtcars |&gt;\n  ggplot(aes(x = mpg, y = disp)) +\n  geom_point() +\n  labs(x = \"Miles per Gallon\", y = \"Displacement\")\n\n\n\n\n\n\n\n\n\n\n\n\n16.3.2 Categorical vs Numeric\n\nGrouped aggregate summary\n\n\n\nR\n\nmtcars |&gt;\n  group_by(cyl) |&gt;\n  summarise(\n    minimum = min(mpg),\n    mean = mean(mpg),\n    median = median(mpg),\n    maximum = mean(mpg)\n  )\n\n\n# A tibble: 3 × 5\n    cyl minimum  mean median maximum\n  &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;\n1     4    21.4  26.7   26      26.7\n2     6    17.8  19.7   19.7    19.7\n3     8    10.4  15.1   15.2    15.1\n\n\n\n\n\nR\n\nmtcars |&gt;\n  group_by(cyl) |&gt;\n  summarise(avg_mpg = mean(mpg)) |&gt;\n  \n  ggplot(aes(x = cyl, y = avg_mpg)) +\n  geom_col() \n\n\n\n\n\n\n\n\n\n\n\nBoxplots\nCompare distributions of a numeric variable across a categorical variable.\n\n\n\nR\n\nmtcars |&gt;\n  ggplot(aes(x = factor(cyl), y = mpg)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nViolin plots\nShow the distribution and density of the numeric variable across categories.\n\n\n\nR\n\nmtcars |&gt;\n  ggplot(aes(x = factor(cyl), y = mpg)) + \n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n\n\n16.3.3 Categorical vs Categorical\n\nContingency tables\nShow the frequency of combinations of two categorical variables.\n\n\n\nR\n\n1table(mpg$drv, mpg$fl)\n\n\n\n1\n\nCount the unique value between drv and fl\n\n\n\n\n   \n     c  d  e  p  r\n  4  0  2  6 20 75\n  f  1  3  1 25 76\n  r  0  0  1  7 17\n\n\n\n\nChi-square test\nA Chi-square test is used to test for independence between two categorical variables\n\n\n\nR\n\ntable(mpg$drv, mpg$fl) |&gt;\n  chisq.test()\n\n\nWarning in chisq.test(table(mpg$drv, mpg$fl)): Chi-squared approximation may be\nincorrect\n\n\n\n    Pearson's Chi-squared test\n\ndata:  table(mpg$drv, mpg$fl)\nX-squared = 6.5618, df = 8, p-value = 0.5846",
    "crumbs": [
      "R",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>EDA</span>"
    ]
  },
  {
    "objectID": "r_exploratory.html#multivariate-analysis",
    "href": "r_exploratory.html#multivariate-analysis",
    "title": "16  EDA",
    "section": "16.4 Multivariate Analysis",
    "text": "16.4 Multivariate Analysis\n\n16.4.1 Pair plots:\nVisualize pairwise relationships between multiple numeric variables.\n\n\n\nR\n\nmtcars |&gt;\n  select(mpg, disp, hp) |&gt;\n  GGally::ggpairs()\n\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\n\nWarning in geom_point(): All aesthetics have length 1, but the data has 9 rows.\nℹ Did you mean to use `annotate()`?\n\n\n\n\n\n\n\n\n\n\n\n16.4.2 Heatmaps\nDisplay the correlation matrix between numeric variables.\n\n\n\nR\n\nmtcars |&gt;\n  select(mpg, disp, hp) |&gt;\n  cor() |&gt;\n  reshape2::melt() |&gt;\n  ggplot(aes(Var1, Var2, fill = value)) +\n  geom_tile() +\n  labs(\n    x = \"Variables\",\n    y = \"Variables\",\n    fill = \"Corr:\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n16.4.3 Principal component analysis (PCA)\nReduce the dimensionality of a dataset while retaining most of the variance.\n\n\n\nR\n\nmtcars |&gt;\n  select(mpg, disp, hp, qsec, wt, drat) |&gt;\n  prcomp(scale. = TRUE)\n\n\nStandard deviations (1, .., p=6):\n[1] 2.0463129 1.0714999 0.5773705 0.3928874 0.3532648 0.2279872\n\nRotation (n x k) = (6 x 6):\n            PC1         PC2         PC3        PC4        PC5         PC6\nmpg  -0.4586835 -0.05867609  0.19479235 0.78205878  0.1111533 -0.35249327\ndisp  0.4660354  0.06065296 -0.09688406 0.60001871 -0.2946297  0.56825752\nhp    0.4258534 -0.36147576 -0.14613554 0.12301873  0.8057408 -0.04771555\nqsec -0.2528320  0.76284877 -0.34059066 0.04268124  0.4218755  0.24152663\nwt    0.4386179  0.29953457 -0.41776208 0.10438337 -0.2301541 -0.69246040\ndrat -0.3670963 -0.43652537 -0.80049152 0.02259258 -0.1437714  0.11277675\n\n\n\n\n16.4.4 Clustering\nGroup similar observations into clusters.\n\n\n\nR\n\nclus &lt;- iris |&gt;\n  select(where(is.numeric)) |&gt;\n  kmeans(centers = 3)\n\n\n\n\n\nR\n\niris |&gt;\n  ggplot(\n    aes(\n      x = Sepal.Length, \n      y = Petal.Length, \n      color = as.factor(clus$cluster)\n    )\n  ) +\n  geom_point() +\n  labs(\n    x = \"Sepal length\",\n    y = \"petal length\",\n    color = \"Clusters\"\n  )",
    "crumbs": [
      "R",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>EDA</span>"
    ]
  },
  {
    "objectID": "r_exploratory.html#outlier-detection",
    "href": "r_exploratory.html#outlier-detection",
    "title": "16  EDA",
    "section": "16.5 Outlier Detection",
    "text": "16.5 Outlier Detection\n\n16.5.1 Boxplot for outliers\nOutliers are typically represented as points outside the whiskers of a boxplot.\n\n\n\nR\n\nmtcars |&gt;\n  ggplot(aes(x = factor(cyl), y = hp)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\n16.5.2 IQR (Interquartile Range)\nOutliers can also be detected using the IQR method.\n\n\n\nR\n\nQ1 &lt;- quantile(mtcars$mpg, 0.25)\nQ3 &lt;- quantile(mtcars$mpg, 0.75)\n\nIQR &lt;- Q3 - Q1\nlower_bound &lt;- Q1 - 1.5*IQR\nupper_bound &lt;- Q3 + 1.5*IQR\n\nmtcars |&gt;\n  filter(mpg &lt; lower_bound | mpg &gt; upper_bound)\n\n\n                mpg cyl disp hp drat    wt qsec vs am gear carb\nToyota Corolla 33.9   4 71.1 65 4.22 1.835 19.9  1  1    4    1\n\n\n\n\n16.5.3 Z-scores\nCalculate Z-scores to identify observations that are more than 3 standard deviations away from the mean.\n\n\n\nR\n\nas_tibble(mtcars) |&gt;\n  mutate(z_score = (mpg - mean(mpg)) / sd(mpg)) |&gt;\n  filter(abs(z_score) &gt; 3)\n\n\n# A tibble: 0 × 12\n# ℹ 12 variables: mpg &lt;dbl&gt;, cyl &lt;dbl&gt;, disp &lt;dbl&gt;, hp &lt;dbl&gt;, drat &lt;dbl&gt;,\n#   wt &lt;dbl&gt;, qsec &lt;dbl&gt;, vs &lt;dbl&gt;, am &lt;dbl&gt;, gear &lt;dbl&gt;, carb &lt;dbl&gt;,\n#   z_score &lt;dbl&gt;",
    "crumbs": [
      "R",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>EDA</span>"
    ]
  },
  {
    "objectID": "r_exploratory.html#missing-data-analysis",
    "href": "r_exploratory.html#missing-data-analysis",
    "title": "16  EDA",
    "section": "16.6 Missing Data Analysis",
    "text": "16.6 Missing Data Analysis\nIdentify which columns have missing data and how much is missing.\n\n16.6.1 Missing value patterns\n\n\n\nR\n\nmice::md.pattern(mtcars)\n\n\n /\\     /\\\n{  `---'  }\n{  O   O  }\n==&gt;  V &lt;==  No need for mice. This data set is completely observed.\n \\  \\|/  /\n  `-----'\n\n\n\n\n\n\n\n\n\n   mpg cyl disp hp drat wt qsec vs am gear carb  \n32   1   1    1  1    1  1    1  1  1    1    1 0\n     0   0    0  0    0  0    0  0  0    0    0 0",
    "crumbs": [
      "R",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>EDA</span>"
    ]
  },
  {
    "objectID": "r_exploratory.html#using-the-skimr-package",
    "href": "r_exploratory.html#using-the-skimr-package",
    "title": "16  EDA",
    "section": "16.7 Using the skimr package",
    "text": "16.7 Using the skimr package\nThe skimr package is one of the numerous packages in R that allows you to create a general summary of the entire data set using descriptive analysis.\n\n\n\nR\n\n1install.packages(skimr)\n2library(skimr)\n\n\n\n1\n\nInstall the package: skimr\n\n2\n\nLoad the package.\n\n\n\n\n\n\n\nR\n\n1skim(iris)\n\n\n\n1\n\nGet the descriptive statistical summary of the iris dataset using the skim() function from the skimr package.\n\n\n\n\n\nData summary\n\n\nName\niris\n\n\nNumber of rows\n150\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nSpecies\n0\n1\nFALSE\n3\nset: 50, ver: 50, vir: 50\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSepal.Length\n0\n1\n5.84\n0.83\n4.3\n5.1\n5.80\n6.4\n7.9\n▆▇▇▅▂\n\n\nSepal.Width\n0\n1\n3.06\n0.44\n2.0\n2.8\n3.00\n3.3\n4.4\n▁▆▇▂▁\n\n\nPetal.Length\n0\n1\n3.76\n1.77\n1.0\n1.6\n4.35\n5.1\n6.9\n▇▁▆▇▂\n\n\nPetal.Width\n0\n1\n1.20\n0.76\n0.1\n0.3\n1.30\n1.8\n2.5\n▇▁▇▅▃",
    "crumbs": [
      "R",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>EDA</span>"
    ]
  },
  {
    "objectID": "r_data_cleaning.html",
    "href": "r_data_cleaning.html",
    "title": "17  Data Cleaning",
    "section": "",
    "text": "17.1 Import the dirty dataset\nR\n\n1employee_df &lt;- read_csv(\"data/dirty_employee_data.csv\")\n\n\n\n1\n\nImport the employee dataset.\n\n\n\n\nRows: 1050 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): First.Name, LAST_NAME, Gender, Department, HireDate, emp_period\ndbl (4): Emp ID, AGE, Salary, perf_score\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "r_data_cleaning.html#find-the-dirt",
    "href": "r_data_cleaning.html#find-the-dirt",
    "title": "17  Data Cleaning",
    "section": "17.2 Find the dirt",
    "text": "17.2 Find the dirt\n\n17.2.1 Data Struture\n\n\n\nR\n\nglimpse(employee_df)\n\n\nRows: 1,050\nColumns: 10\n$ `Emp ID`   &lt;dbl&gt; 17487, 27710, 44887, 84983, 99418, 63517, 76074, 58813, 575…\n$ First.Name &lt;chr&gt; \"David\", \"Jane\", \"Sarah\", \"Mary\", \"Robert\", \"John\", \"Emily\"…\n$ LAST_NAME  &lt;chr&gt; \"Garcia\", \"Johnson\", \"Rodriguez\", \"Miller\", \"Martinez\", \"Br…\n$ Gender     &lt;chr&gt; \"Female\", \"Male\", \"Female\", \"F\", \"Male\", \"Female\", \"Male\", …\n$ AGE        &lt;dbl&gt; 55, 57, 26, 42, 31, 50, 23, 42, 46, 34, 36, 57, 39, 19, 55,…\n$ Department &lt;chr&gt; \"Human Resource\", \"Finance\", \"Finance\", \"Marketg\", \"Human R…\n$ Salary     &lt;dbl&gt; 48190, 25895, 64947, 71114, 52962, 52213, 52504, 76424, 458…\n$ HireDate   &lt;chr&gt; \"2019-11-09\", \"2019-07-16\", \"2012-01-04\", \"2020-01-26\", \"20…\n$ perf_score &lt;dbl&gt; 3, 9, 10, 10, 8, 1, 5, 4, 4, 9, 3, 4, 3, 6, 8, 4, 3, 8, 3, …\n$ emp_period &lt;chr&gt; \"2012 - 2015\", \"2016 - 2018\", \"2016 - 2014\", \"2016 - 2018\",…\n\n\nThe data contains 1,050 rows and 10 columns. based on the present records as shown above, there are different data type. …\n\n\n\n\n\n\nData Dictionary\n\n\n\n\n\nThe employee_df contains dirty records of both past and present employees including the variables:\n\nEmp ID: A unique id assigned to each employee\nFirst.Name: Employee’s first name.\nLAST_NAME: Employee’s last name.\nGender: The imputed gender of employees.\nAGE: The age of employee\nDepartment: The department the employee belongs to.\nSalary: The monthly gross salary of each employee.\nHireDate: The date in which the employee started with the company\nperf_score: The most recent performance score of the employee.\nemp_period1: The period of employment.\n\n\n\n\n\n\n\nR\n\n1head(employee_df)\n\n\n\n1\n\nRetrieve the first 5 rows in the table.\n\n\n\n\n# A tibble: 6 × 10\n  `Emp ID` First.Name LAST_NAME Gender   AGE Department     Salary HireDate     \n     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;        \n1    17487 David      Garcia    Female    55 Human Resource  48190 2019-11-09   \n2    27710 Jane       Johnson   Male      57 Finance         25895 2019-07-16   \n3    44887 Sarah      Rodriguez Female    26 Finance         64947 2012-01-04   \n4    84983 Mary       Miller    F         42 Marketg         71114 2020-01-26   \n5    99418 Robert     Martinez  Male      31 Human Resource  52962 2014-11-21   \n6    63517 John       Brown     Female    50 HR              52213 2018-01-06 A…\n# ℹ 2 more variables: perf_score &lt;dbl&gt;, emp_period &lt;chr&gt;\n\n\n\n\n17.2.2 Data exploration\nAn initial exploration of the data should be performed to understand the ….\n\n17.2.2.1 Data type\n\n\n\nR\n\n1sapply(employee_df, \\(x) class(x))\n\n\n\n1\n\nLoop over each column in the dataset and get the data type.\n\n\n\n\n     Emp ID  First.Name   LAST_NAME      Gender         AGE  Department \n  \"numeric\" \"character\" \"character\" \"character\"   \"numeric\" \"character\" \n     Salary    HireDate  perf_score  emp_period \n  \"numeric\" \"character\"   \"numeric\" \"character\" \n\n\n\n\n\n\n\n\nIssues\n\n\n\n\nThe Salary variable should be a numeric data and not a character data.\nThe HireDate contains date information, but the variable has a character data type.\n\n\n\nSolution:\nConvert the identified columns with wrong data types to the approprate data type.\n\nSalary:\n\n\n\n\nR\n\n1mutate(employee_df, Salary = as.double(Salary))\n\n\n\n1\n\nConvert the Salary variable from a character data to a double data type using the as.double() function.\n\n\n\n\n# A tibble: 1,050 × 10\n   `Emp ID` First.Name LAST_NAME Gender   AGE Department     Salary HireDate    \n      &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;       \n 1    17487 David      Garcia    Female    55 Human Resource  48190 2019-11-09  \n 2    27710 Jane       Johnson   Male      57 Finance         25895 2019-07-16  \n 3    44887 Sarah      Rodriguez Female    26 Finance         64947 2012-01-04  \n 4    84983 Mary       Miller    F         42 Marketg         71114 2020-01-26  \n 5    99418 Robert     Martinez  Male      31 Human Resource  52962 2014-11-21  \n 6    63517 John       Brown     Female    50 HR              52213 2018-01-06 …\n 7    76074 Emily      Brown     Male      23 HR              52504 2010-09-16  \n 8    58813 Lisa       Miller    Female    42 Human Resource  76424 2019-11-05  \n 9    57504 Michael    Martinez  Female    46 Sales           45859 2012-01-13  \n10    12760 Mary       Davis     Male      34 Sales           44642 2015-12-02  \n# ℹ 1,040 more rows\n# ℹ 2 more variables: perf_score &lt;dbl&gt;, emp_period &lt;chr&gt;\n\n\n\nHireDate:\n\n\n\n\nR\n\n# Check for invalid date strings\ninvalid_date_records &lt;- employee_df |&gt;\n1  mutate(is_valid_date = str_detect(HireDate, \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\")) |&gt;\n2  select(HireDate, is_valid_date) |&gt;\n3  filter(!is_valid_date)\n\ninvalid_date_records                                          \n\n\n\n1\n\nadd a new column is_valid_date to the data to indicate which record have a valid and invalid date using the str_detect() function from the {stringr} package and the regex.\n\n2\n\nSelect only the HireDate and the new is_valid_date date column.\n\n3\n\nRetrieve records with invalid dates.\n\n\n\n\n# A tibble: 117 × 2\n   HireDate             is_valid_date\n   &lt;chr&gt;                &lt;lgl&gt;        \n 1 2018-01-06 After RE. FALSE        \n 2 2015-05-10 After RE. FALSE        \n 3 2011-12-01 After RE. FALSE        \n 4 2020-12-08 After RE. FALSE        \n 5 2019-05-14 After RE. FALSE        \n 6 2015-08-31 After RE. FALSE        \n 7 2018-12-26 After RE. FALSE        \n 8 2018-02-07 After RE. FALSE        \n 9 2023-01-10 After RE. FALSE        \n10 2013-07-22 After RE. FALSE        \n# ℹ 107 more rows\n\n\nThe string “After RE.” is present in 117 records.\n\n\n\nR\n\n# Check for other invalid strings\ninvalid_date_records |&gt; \n1  filter(str_detect(HireDate, \"After RE.\", negate = TRUE))\n\n\n\n1\n\nGet records where the string ‘After RE.’ is not present. This is to ensure that ‘After RE.’ is the only abnormal string.\n\n\n\n\n# A tibble: 0 × 2\n# ℹ 2 variables: HireDate &lt;chr&gt;, is_valid_date &lt;lgl&gt;\n\n\n\n\n\nR\n\nemployee_df &lt;- employee_df |&gt;\n  mutate(\n1    HireDate = str_remove(HireDate, \"After RE.\"),\n2    HireDate = ymd(HireDate)\n  ) \n\n\n\n1\n\nRemove the string “After RE.” from the records where it is present using the str_remove() function from the {stringr} package\n\n2\n\nConvert the updated HireDate variable to a date data type using the ymd() for the {lubridate}\n\n\n\n\n\n\n\nR\n\n1class(employee_df$HireDate)\n\n\n\n1\n\nRetrieve the new class of the HireDate variable.\n\n\n\n\n[1] \"Date\"\n\n\n \n\n\n17.2.2.2 Variable distribution\nAnalyzing the distribution of a numeric variable is crucial for identifying outliers and inconsistent values.\n\n\n\nR\n\nemployee_df |&gt;\n1  select(where(is.numeric), -c(`Emp ID`)) |&gt;\n2  summary()\n\n\n\n1\n\nSelect all numeric variables excluding the Emp ID variable.\n\n2\n\nPerform a descriptive data analysis on the selected numeric variables.\n\n\n\n\n      AGE            Salary        perf_score   \n Min.   : 18.0   Min.   : 1068   Min.   : 1.00  \n 1st Qu.: 30.0   1st Qu.:40620   1st Qu.: 3.00  \n Median : 41.0   Median :50244   Median : 6.00  \n Mean   : 43.1   Mean   :50414   Mean   : 5.71  \n 3rd Qu.: 53.0   3rd Qu.:61186   3rd Qu.: 8.00  \n Max.   :160.0   Max.   :96256   Max.   :10.00  \n                 NA's   :50                     \n\n\nAGE:\n\n\n\nR\n\n1employee_df |&gt; select(AGE) |&gt; summary()\n\n\n\n1\n\nGet a descriptive summary of employee age.\n\n\n\n\n      AGE       \n Min.   : 18.0  \n 1st Qu.: 30.0  \n Median : 41.0  \n Mean   : 43.1  \n 3rd Qu.: 53.0  \n Max.   :160.0  \n\n\n\n\n\nR\n\nemployee_df |&gt;\n  ggplot(aes(x = AGE, y = 1)) +\n1  geom_boxplot() +\n2  geom_vline(aes(xintercept = 100), linewidth = 2, color = \"red\") +\n  labs(\n    x = \"Age\",\n3    y = NULL,\n    title = \"Distribution of mployee's Age\"\n  ) +\n  theme_minimal() +\n4  theme(axis.text.y = element_blank())\n\n\n\n1\n\nCreate a box plot.\n\n2\n\nAdd a vertical line at age 100.\n\n3\n\nRemove the y axis title.\n\n4\n\nRemove the y axis text.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutliers\n\n\n\n\nAGE: The AGE variable contains extreme values in multiple records, where employees’ ages exceed 80, whereas 75% of employees’ ages fall between 18 and 53.\n\n\n\nSolution:\nA common cutoff can be around 65 years, which aligns with traditional retirement ages in many organisations and countries. However, this can also vary based on industry norms and organizational policies.\n\n\n\nR\n\nemployee_df |&gt;\n1  filter(AGE &gt; 65) |&gt;\n2  select(AGE)\n\n\n\n1\n\nFilter all employees older than 65 years.\n\n2\n\nRetrieve only the Age variable.\n\n\n\n\n# A tibble: 19 × 1\n     AGE\n   &lt;dbl&gt;\n 1   139\n 2   158\n 3   145\n 4   160\n 5   127\n 6   159\n 7   128\n 8   134\n 9   122\n10   121\n11   154\n12   122\n13   157\n14   124\n15   143\n16   148\n17   124\n18   123\n19   160\n\n\n\n\nCleaning extreme values\nOnce you have identified extreme values, you need to decide how to clean them. There are several approaches:\n\nReplace with NA: If you want to keep track of these records but exclude them from analysis.\n\n\n\n\nR\n\nemployee_df |&gt;\n  mutate(AGE = if_else(AGE &gt; 65, NA, AGE))\n\n\n# A tibble: 1,050 × 10\n   `Emp ID` First.Name LAST_NAME Gender   AGE Department     Salary HireDate  \n      &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;date&gt;    \n 1    17487 David      Garcia    Female    55 Human Resource  48190 2019-11-09\n 2    27710 Jane       Johnson   Male      57 Finance         25895 2019-07-16\n 3    44887 Sarah      Rodriguez Female    26 Finance         64947 2012-01-04\n 4    84983 Mary       Miller    F         42 Marketg         71114 2020-01-26\n 5    99418 Robert     Martinez  Male      31 Human Resource  52962 2014-11-21\n 6    63517 John       Brown     Female    50 HR              52213 2018-01-06\n 7    76074 Emily      Brown     Male      23 HR              52504 2010-09-16\n 8    58813 Lisa       Miller    Female    42 Human Resource  76424 2019-11-05\n 9    57504 Michael    Martinez  Female    46 Sales           45859 2012-01-13\n10    12760 Mary       Davis     Male      34 Sales           44642 2015-12-02\n# ℹ 1,040 more rows\n# ℹ 2 more variables: perf_score &lt;dbl&gt;, emp_period &lt;chr&gt;\n\n\n\nImpute Values: Replace extreme values with a more reasonable estimate (e.g., mean or median of valid ages).\n\n\n\n\nR\n\nmedian_emp_age &lt;- employee_df |&gt; \n1  filter(AGE &lt;= 65) |&gt;\n2  summarise(median_age = median(AGE, na.rm = TRUE)) |&gt;\n3  pull(median_age)\n\n4median_emp_age\n\n\n\n1\n\nFilter age below 65 years\n\n2\n\nGet the median age.\n\n3\n\nCollect the single median age value.\n\n4\n\nDisplay the median age.\n\n\n\n\n[1] 41\n\n\n\n\n\nR\n\nemployee_df &lt;- employee_df |&gt;                           \n1  mutate(AGE = if_else(AGE &gt; 65, median_emp_age, AGE))\n\n\n\n1\n\nReplace employee age above 65 with the median age.\n\n\n\n\n\n\n\nR\n\n1employee_df |&gt; select(AGE) |&gt; summary()\n\n\n\n1\n\nGet a descriptive summary of employee age.\n\n\n\n\n      AGE       \n Min.   :18.00  \n 1st Qu.:30.00  \n Median :41.00  \n Mean   :41.32  \n 3rd Qu.:53.00  \n Max.   :65.00  \n\n\n \n\n\n17.2.2.3 Inconsistent categorical values\n\n\n\nR\n\nemployee_df |&gt;\n1  select(Gender, Department) |&gt;\n2  distinct()\n\n\n\n1\n\nSelect the Gender and Department variables.\n\n2\n\nRetrieve only unique values from each variable.\n\n\n\n\n# A tibble: 46 × 2\n   Gender Department    \n   &lt;chr&gt;  &lt;chr&gt;         \n 1 Female Human Resource\n 2 Male   Finance       \n 3 Female Finance       \n 4 F      Marketg       \n 5 Male   Human Resource\n 6 Female HR            \n 7 Male   HR            \n 8 Female Sales         \n 9 Male   Sales         \n10 Female Marketg       \n# ℹ 36 more rows\n\n\nGender:\n\n\n\nR\n\n1distinct(employee_df, Gender)\n\n\n\n1\n\nGet the unique Gender values.\n\n\n\n\n# A tibble: 6 × 1\n  Gender\n  &lt;chr&gt; \n1 Female\n2 Male  \n3 F     \n4 female\n5 M     \n6 male  \n\n\n\n\n\nR\n\nemployee_df &lt;- employee_df |&gt;\n  mutate(\n    Gender = case_when(\n1      Gender == \"M\" ~ \"Male\",\n2      Gender == \"F\" ~ \"Female\",\n3      .default = str_to_title(Gender)\n    )\n  )\n\n\n\n1\n\nConvert the string “M” to “Male”\n\n2\n\nConvert the string “F” to “Female”\n\n3\n\nSet other values to a title string using the str_to_title() function from {stringr}\n\n\n\n\n\n\n\nR\n\n1distinct(employee_df, Gender)\n\n\n\n1\n\nGet the unified unique Gender values.\n\n\n\n\n# A tibble: 2 × 1\n  Gender\n  &lt;chr&gt; \n1 Female\n2 Male  \n\n\nDepartment:\n\n\n\nR\n\n1distinct(employee_df, Department)\n\n\n\n1\n\nGet the unique Department values.\n\n\n\n\n# A tibble: 9 × 1\n  Department    \n  &lt;chr&gt;         \n1 Human Resource\n2 Finance       \n3 Marketg       \n4 HR            \n5 Sales         \n6 IT            \n7 Operations    \n8 Marketing     \n9 finance       \n\n\n\n\n\nR\n\nemployee_df &lt;- employee_df |&gt;\n  mutate(\n    Department = case_when(\n1      Department == \"Marketg\" ~ \"Marketing\",\n2      Department == \"Human Resource\" ~ \"HR\",\n3      Department == \"finance\" ~ \"Finance\",\n4      .default = Department\n    )\n  )\n\n\n\n1\n\nConvert the string “Marketg” to “Marketing”\n\n2\n\nConvert the string “Human Resource” to “HR”\n\n3\n\nConvert the string “finance” to “Finance”\n\n4\n\nSet other records to their default values.\n\n\n\n\n\n\n\nR\n\n1distinct(employee_df, Department)\n\n\n\n1\n\nGet the unified unique Department values.\n\n\n\n\n# A tibble: 6 × 1\n  Department\n  &lt;chr&gt;     \n1 HR        \n2 Finance   \n3 Marketing \n4 Sales     \n5 IT        \n6 Operations\n\n\n  \n\n\n17.2.2.4 Duplicated records\n\n\n\nR\n\ndistinct(employee_df)\n\n\n# A tibble: 1,000 × 10\n   `Emp ID` First.Name LAST_NAME Gender   AGE Department Salary HireDate  \n      &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;date&gt;    \n 1    17487 David      Garcia    Female    55 HR          48190 2019-11-09\n 2    27710 Jane       Johnson   Male      57 Finance     25895 2019-07-16\n 3    44887 Sarah      Rodriguez Female    26 Finance     64947 2012-01-04\n 4    84983 Mary       Miller    Female    42 Marketing   71114 2020-01-26\n 5    99418 Robert     Martinez  Male      31 HR          52962 2014-11-21\n 6    63517 John       Brown     Female    50 HR          52213 2018-01-06\n 7    76074 Emily      Brown     Male      23 HR          52504 2010-09-16\n 8    58813 Lisa       Miller    Female    42 HR          76424 2019-11-05\n 9    57504 Michael    Martinez  Female    46 Sales       45859 2012-01-13\n10    12760 Mary       Davis     Male      34 Sales       44642 2015-12-02\n# ℹ 990 more rows\n# ℹ 2 more variables: perf_score &lt;dbl&gt;, emp_period &lt;chr&gt;\n\n\n\n\n\nR\n\nemployee_df &lt;- distinct(employee_df)\n\n\n  \n\n\n17.2.2.5 Missing values\n\n\n\nR\n\nsapply(employee_df, \\(x) sum(is.na(x)))\n\n\n    Emp ID First.Name  LAST_NAME     Gender        AGE Department     Salary \n         0          0          0          0          0          0         48 \n  HireDate perf_score emp_period \n         0          0          0 \n\n\n\n\n\n\n\n\nMissing salary values\n\n\n\nThe data contains missing salary of 48 employees from different departments.\n\n\n\n\n\nR\n\nemployee_df |&gt;\n  filter(is.na(Salary)) |&gt;\n  distinct(Department)\n\n\n# A tibble: 6 × 1\n  Department\n  &lt;chr&gt;     \n1 Sales     \n2 Marketing \n3 IT        \n4 Finance   \n5 HR        \n6 Operations\n\n\n\n\n\nR\n\nemployee_df |&gt;\n1  group_by(Department) |&gt;\n2  summarise(median_salary = median(Salary, na.rm = TRUE))\n\n\n\n1\n\nGroup the employee_df by the department variable.\n\n2\n\nGet the median salary of each department.\n\n\n\n\n# A tibble: 6 × 2\n  Department median_salary\n  &lt;chr&gt;              &lt;dbl&gt;\n1 Finance           49057 \n2 HR                52106.\n3 IT                48515 \n4 Marketing         50204 \n5 Operations        50202 \n6 Sales             50795 \n\n\n\n\n\nR\n\ndep &lt;- employee_df |&gt;\n  group_by(Department) |&gt;                               \n  summarise(median_salary = median(Salary, na.rm = TRUE)) |&gt;\n1  deframe() |&gt; as.list()\n\ndep\n\n\n\n1\n\nConvert the tibble to a list to access the values.\n\n\n\n\n$Finance\n[1] 49057\n\n$HR\n[1] 52105.5\n\n$IT\n[1] 48515\n\n$Marketing\n[1] 50204\n\n$Operations\n[1] 50202\n\n$Sales\n[1] 50795\n\n\nSolution:\nImpute the missing values with the Median salary based on the employee’s department.\n\n\n\nR\n\nemployee_df &lt;- employee_df |&gt;\n  mutate(Salary = case_when(\n    is.na(Salary) & Department == \"Finance\" ~ dep$Finance,\n    is.na(Salary) & Department == \"Marketing\" ~ dep$Marketing,\n    is.na(Salary) & Department == \"Operations\" ~ dep$Operations,\n    is.na(Salary) & Department == \"IT\" ~ dep$IT,\n    is.na(Salary) & Department == \"HR\" ~ dep$HR,\n    is.na(Salary) & Department == \"Sales\" ~ dep$Sales,\n    .default = Salary\n  ))\n\n\nCheck for missing values\n\n\n\nR\n\nsapply(employee_df, \\(x) sum(is.na(x)))\n\n\n    Emp ID First.Name  LAST_NAME     Gender        AGE Department     Salary \n         0          0          0          0          0          0          0 \n  HireDate perf_score emp_period \n         0          0          0 \n\n\n \n\n\n17.2.2.6 Data invalidity\n\n\n\nR\n\ndistinct(employee_df, emp_period)\n\n\n# A tibble: 91 × 1\n   emp_period \n   &lt;chr&gt;      \n 1 2012 - 2015\n 2 2016 - 2018\n 3 2016 - 2014\n 4 2014 - 2019\n 5 2015 - 2021\n 6 2017 - 2019\n 7 2014 - 2017\n 8 2010 - 2021\n 9 2013 - 2019\n10 2012 - 2017\n# ℹ 81 more rows\n\n\n\n\n\nR\n\nemployee_df &lt;- employee_df |&gt;\n  separate_wider_delim(                                                  \n1      emp_period,\n2      delim = \" - \",\n3      names = c(\"start_year\", \"end_year\")\n    ) |&gt;\n  mutate(\n4    start_year = as.integer(start_year),\n5    end_year = if_else(end_year == \"-\", NA, end_year) |&gt; as.integer(),\n6    employment_status = if_else(is.na(end_year), \"Active\", \"Terminated\")\n  ) \n\n\n\n1\n\nPerform a separate operation on the emp_period (employee period) variable\n\n2\n\nUsing the ” - ” pattern to separate the two values into multiple columns.\n\n3\n\nAssign the new column start_year and end_year names\n\n4\n\nConvert the start_year to an integer.\n\n5\n\nTransform the “-” to NA, indicating missing values. i.e. The employee is still active.\n\n6\n\nCreate a new column called employment_status to store the current employment status. “Active” for those who are still working within the org. and “Terminated” for those who have left the org.\n\n\n\n\n  \n\n\n17.2.2.7 Column names misalignment\n\n\n\nR\n\nemployee_df &lt;- employee_df |&gt;\n  rename(\n    employee_id = `Emp ID`,\n    first_name = First.Name,\n    last_name = LAST_NAME,\n    gender = Gender,\n    age = AGE,\n    department = Department,\n    salary = Salary,\n    hire_date = HireDate,\n    performance_score = perf_score\n  )",
    "crumbs": [
      "R",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "r_data_cleaning.html#data-final-checks",
    "href": "r_data_cleaning.html#data-final-checks",
    "title": "17  Data Cleaning",
    "section": "17.3 Data final checks",
    "text": "17.3 Data final checks\n\n17.3.1 Check data types\n\n\n\nR\n\n1valid_data_types &lt;- list(\n  employee_id = \"integer\",\n  first_name = \"character\",\n  last_name = \"character\",\n  gender = \"character\",\n  age = \"integer\",\n  department = \"character\",\n  salary = \"numeric\",\n  hire_date = \"Date\",\n  performance_score = \"integer\",\n  start_year = \"integer\",\n  end_year = \"integer\",\n  employment_status = \"character\"\n)\n\n\n\n1\n\nCreate a list of variable names and their valid data type.\n\n\n\n\n\n\n\nR\n\n1check_data_type &lt;- map2_lgl(\n2  employee_df,\n3  valid_data_types,\n4  \\(x, y) class(x) == y\n)\n\ncheck_data_type\n\n\n\n1\n\nUse the map2_lgl() function from the {purrr} package to create a logical vector.\n\n2\n\nSet the cleaned employee_df as the first vector argument (x)\n\n3\n\nSet the valid data type list as the second vector argument (y)\n\n4\n\nUse an anonymous function to check whether the class of each variable corresponds with the supplied valid data type using a conditional statement.\n\n\n\n\n      employee_id        first_name         last_name            gender \n            FALSE              TRUE              TRUE              TRUE \n              age        department            salary         hire_date \n            FALSE              TRUE              TRUE              TRUE \nperformance_score        start_year          end_year employment_status \n            FALSE              TRUE              TRUE              TRUE \n\n\n\n\n\nR\n\n1check_data_type[!check_data_type]\n\n\n\n1\n\nReturn only variables with invalid data type (Not TRUE).\n\n\n\n\n      employee_id               age performance_score \n            FALSE             FALSE             FALSE \n\n\n \n\n\n17.3.2 Check missing values\n\n\n\nR\n\n1is_missing &lt;- map_lgl(employee_df, \\(x) all(is.na(x)))\n\nis_missing\n\n\n\n1\n\nCheck whether for each variable all the values are not missing. Expected to produce a FALSE output\n\n\n\n\n      employee_id        first_name         last_name            gender \n            FALSE             FALSE             FALSE             FALSE \n              age        department            salary         hire_date \n            FALSE             FALSE             FALSE             FALSE \nperformance_score        start_year          end_year employment_status \n            FALSE             FALSE             FALSE             FALSE \n\n\n\n\n\nR\n\n1is_missing[is_missing]\n\n\n\n1\n\nReturn variables with missing values.\n\n\n\n\nnamed logical(0)\n\n\n \n\n\n17.3.3 Data integrity\n\n\n\nR\n\nemployee_df |&gt;\n  select(where(is.numeric), -employee_id) |&gt;\n  summary()\n\n\n      age            salary      performance_score   start_year  \n Min.   :18.00   Min.   : 1068   Min.   : 1.000    Min.   :2010  \n 1st Qu.:30.00   1st Qu.:40923   1st Qu.: 3.000    1st Qu.:2011  \n Median :41.00   Median :50204   Median : 6.000    Median :2013  \n Mean   :41.34   Mean   :50317   Mean   : 5.697    Mean   :2013  \n 3rd Qu.:53.00   3rd Qu.:60316   3rd Qu.: 8.000    3rd Qu.:2015  \n Max.   :65.00   Max.   :96256   Max.   :10.000    Max.   :2017  \n                                                                 \n    end_year   \n Min.   :2013  \n 1st Qu.:2017  \n Median :2018  \n Mean   :2018  \n 3rd Qu.:2020  \n Max.   :2023  \n NA's   :19    \n\n\n\nCheck age, salary, hire_date, start_year, end_year & performance_score data integrity.\n\n \n\n\n17.3.4 Check unified & appropriate category values\n\n\n\nR\n\nemployee_df |&gt;\n1  select(where(is.character), -c(first_name, last_name)) |&gt;\n2  map(\\(x) unique(x))\n\n\n\n1\n\nSelect the gender, department and employment_status variables.\n\n2\n\nRetrieve only the different unique values for each variable.\n\n\n\n\n$gender\n[1] \"Female\" \"Male\"  \n\n$department\n[1] \"HR\"         \"Finance\"    \"Marketing\"  \"Sales\"      \"IT\"        \n[6] \"Operations\"\n\n$employment_status\n[1] \"Terminated\" \"Active\"",
    "crumbs": [
      "R",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "r_project.html",
    "href": "r_project.html",
    "title": "18  Project Concept",
    "section": "",
    "text": "18.1 RFM Analysis\nRFM analysis, which stands for Recency, Frequency, and Monetary value, is a marketing technique used to evaluate customer behavior and segment customers based on their purchasing habits",
    "crumbs": [
      "R",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Project Concept</span>"
    ]
  },
  {
    "objectID": "r_project.html#rfm-analysis",
    "href": "r_project.html#rfm-analysis",
    "title": "18  Project Concept",
    "section": "",
    "text": "18.1.1 R: Recency\nThis metric measures the time elapsed since a customer’s last purchase such as number of days. A shorter duration indicates that the customer has recently engaged with the business.\n\n\n\n\n\n\nImportance\n\n\n\nUnderstanding recency helps businesses identify active customers versus those who may be lapsing or at risk of churning. For example, if a customer made a purchase last week, they are more likely to respond to a marketing campaign than someone who hasn’t purchased in over six months.\n\n\n\n\n18.1.2 F: Frequency\nFrequency measures how often a customer makes purchases within a specific time frame. A higher frequency indicates that a customer regularly engages with the brand.\n\n\n\n\n\n\nImportance\n\n\n\nHigh-frequency customers are typically more valuable as they demonstrate consistent buying behavior. By analyzing frequency, businesses can identify their most loyal customers and develop targeted retention strategies or reward programs to encourage continued patronage.\n\n\n\n\n18.1.3 M: Monetary Value\nMonetary value assesses how much money a customer spends during their transactions over a given period. This metric helps determine the overall profitability of each customer.\n\n\n\n\n\n\nImportance\n\n\n\nUnderstanding monetary value allows businesses to identify high-value customers who contribute significantly to revenue. Companies can focus on nurturing these relationships through personalized offers or exclusive promotions that cater specifically to their spending habits.\n\n\n\n\n18.1.4 Quantiles\nA quantile is a statistical measure that divides a dataset into equal-sized intervals or portions, also known as quartiles, They help describe the distribution of data and are useful for understanding where specific data points fall within that distribution.\nSpecifically, the p-th quantile is the value below which p% of the data falls.\n\n18.1.4.1 Key quantiles\n\n\n25th quantile (Q1 or first quartile):\nThe first quartile, denoted as Q1 or 25th quantile, is the value below which 25% of the data points within a variable fall. In other words, it marks the 25th percentile of the dataset (and 75% lie above it.). It shows the lower boundary of the first quarter of data, helping to identify the bottom portion of the dataset.\nExample: In a class of 100 students, the 25th quantile score on a test would be the score that 25 students scored below.\n\n\n\nR\n\n# Lets Create a vector of random students scores\nset.seed(1212)\n1student_test_score &lt;- sample(x = 75:98, size = 100, replace = TRUE)\n\n2sort(student_test_score)\n\n\n\n1\n\nGet 100 random values between 75 and 98. repeated values are allowed.\n\n2\n\nSort the values from smallest to highest.\n\n\n\n\n  [1] 75 75 75 75 76 76 76 76 76 76 77 77 77 77 77 78 78 78 78 79 79 80 80 80 80\n [26] 80 80 81 81 81 81 81 81 82 82 82 83 83 83 83 83 83 84 84 84 84 85 85 86 86\n [51] 87 87 87 87 87 87 88 88 88 88 89 90 90 90 90 90 90 91 91 91 91 91 92 92 92\n [76] 92 92 93 93 93 94 94 95 95 95 95 95 96 96 96 96 96 96 97 97 97 97 98 98 98\n\n\n\n\n\nR\n\n1quantile(x = student_test_score, probs = 0.25, names = TRUE)\n\n\n\n1\n\nGet the 25th quantile using the quantile() function\n\n\n\n\n25% \n 80 \n\n\n\n\n18.1.4.2 Quick illustration:\n\n\n\n\n\n\n\n\nFirst Quantile Test Scores\n\n\n25% of datapoint\n\n\nStudent Id\nStudent Test Score\nQuantile\n\n\n\n\n14\n75\nQ1 (&lt;= 80)\n\n\n35\n75\nQ1 (&lt;= 80)\n\n\n6\n75\nQ1 (&lt;= 80)\n\n\n100\n75\nQ1 (&lt;= 80)\n\n\n18\n76\nQ1 (&lt;= 80)\n\n\n2\n76\nQ1 (&lt;= 80)\n\n\n70\n76\nQ1 (&lt;= 80)\n\n\n40\n76\nQ1 (&lt;= 80)\n\n\n99\n76\nQ1 (&lt;= 80)\n\n\n90\n76\nQ1 (&lt;= 80)\n\n\n62\n77\nQ1 (&lt;= 80)\n\n\n51\n77\nQ1 (&lt;= 80)\n\n\n71\n77\nQ1 (&lt;= 80)\n\n\n9\n77\nQ1 (&lt;= 80)\n\n\n76\n77\nQ1 (&lt;= 80)\n\n\n29\n78\nQ1 (&lt;= 80)\n\n\n88\n78\nQ1 (&lt;= 80)\n\n\n22\n78\nQ1 (&lt;= 80)\n\n\n3\n78\nQ1 (&lt;= 80)\n\n\n53\n79\nQ1 (&lt;= 80)\n\n\n38\n79\nQ1 (&lt;= 80)\n\n\n49\n80\nQ1 (&lt;= 80)\n\n\n10\n80\nQ1 (&lt;= 80)\n\n\n85\n80\nQ1 (&lt;= 80)\n\n\n78\n80\nQ1 (&lt;= 80)\n\n\n72\n80\nQ1 (&lt;= 80)\n\n\n46\n80\nQ1 (&lt;= 80)\n\n\n96\n81\nAbove 25th\n\n\n98\n81\nAbove 25th\n\n\n47\n81\nAbove 25th\n\n\n91\n81\nAbove 25th\n\n\n65\n81\nAbove 25th\n\n\n19\n81\nAbove 25th\n\n\n21\n82\nAbove 25th\n\n\n12\n82\nAbove 25th\n\n\n36\n82\nAbove 25th\n\n\n93\n83\nAbove 25th\n\n\n84\n83\nAbove 25th\n\n\n30\n83\nAbove 25th\n\n\n7\n83\nAbove 25th\n\n\n55\n83\nAbove 25th\n\n\n16\n83\nAbove 25th\n\n\n92\n84\nAbove 25th\n\n\n8\n84\nAbove 25th\n\n\n82\n84\nAbove 25th\n\n\n77\n84\nAbove 25th\n\n\n28\n85\nAbove 25th\n\n\n89\n85\nAbove 25th\n\n\n4\n86\nAbove 25th\n\n\n48\n86\nAbove 25th\n\n\n54\n87\nAbove 25th\n\n\n58\n87\nAbove 25th\n\n\n11\n87\nAbove 25th\n\n\n66\n87\nAbove 25th\n\n\n31\n87\nAbove 25th\n\n\n81\n87\nAbove 25th\n\n\n59\n88\nAbove 25th\n\n\n25\n88\nAbove 25th\n\n\n27\n88\nAbove 25th\n\n\n23\n88\nAbove 25th\n\n\n83\n89\nAbove 25th\n\n\n60\n90\nAbove 25th\n\n\n37\n90\nAbove 25th\n\n\n63\n90\nAbove 25th\n\n\n86\n90\nAbove 25th\n\n\n13\n90\nAbove 25th\n\n\n34\n90\nAbove 25th\n\n\n94\n91\nAbove 25th\n\n\n64\n91\nAbove 25th\n\n\n42\n91\nAbove 25th\n\n\n75\n91\nAbove 25th\n\n\n67\n91\nAbove 25th\n\n\n69\n92\nAbove 25th\n\n\n39\n92\nAbove 25th\n\n\n1\n92\nAbove 25th\n\n\n20\n92\nAbove 25th\n\n\n56\n92\nAbove 25th\n\n\n61\n93\nAbove 25th\n\n\n68\n93\nAbove 25th\n\n\n26\n93\nAbove 25th\n\n\n24\n94\nAbove 25th\n\n\n17\n94\nAbove 25th\n\n\n57\n95\nAbove 25th\n\n\n73\n95\nAbove 25th\n\n\n43\n95\nAbove 25th\n\n\n50\n95\nAbove 25th\n\n\n80\n95\nAbove 25th\n\n\n74\n96\nAbove 25th\n\n\n15\n96\nAbove 25th\n\n\n52\n96\nAbove 25th\n\n\n44\n96\nAbove 25th\n\n\n5\n96\nAbove 25th\n\n\n32\n96\nAbove 25th\n\n\n33\n97\nAbove 25th\n\n\n97\n97\nAbove 25th\n\n\n41\n97\nAbove 25th\n\n\n45\n97\nAbove 25th\n\n\n95\n98\nAbove 25th\n\n\n79\n98\nAbove 25th\n\n\n87\n98\nAbove 25th\n\n\n\n\n\n\n\n\n\n\n50th quantile (Q2, median, or second quartile):\nThe second quartile is equivalent to the median (Q2). It is the value that divides the dataset into two equal halves, with 50% of the data points below it and 50% above it.\nExample: In the same class, the 50th quantile (median) score would be the middle score when all scores are arranged in order.\n\n\n\nR\n\n# The quantile function\n1quantile(x = student_test_score, probs = 0.50, names = TRUE)\n\n\n\n1\n\nGet the 50th quantile using the quantile() function\n\n\n\n\n 50% \n86.5 \n\n\nOR\n\n\n\nR\n\n# The median function\n1median(student_test_score)\n\n\n\n1\n\nGet the middle value of the student test score.\n\n\n\n\n[1] 86.5\n\n\nThe median is a measure of central tendency, giving an idea of where the middle value of the data is.\n\n\n18.1.4.3 Quick illustration:\n\n\n\n\n\n\n\n\nSecond Quantile Test Scores\n\n\nMedian Score\n\n\nStudent Id\nStudent Test Score\nQuantile\n\n\n\n\n14\n75\nBelow 50th\n\n\n35\n75\nBelow 50th\n\n\n6\n75\nBelow 50th\n\n\n100\n75\nBelow 50th\n\n\n18\n76\nBelow 50th\n\n\n2\n76\nBelow 50th\n\n\n70\n76\nBelow 50th\n\n\n40\n76\nBelow 50th\n\n\n99\n76\nBelow 50th\n\n\n90\n76\nBelow 50th\n\n\n62\n77\nBelow 50th\n\n\n51\n77\nBelow 50th\n\n\n71\n77\nBelow 50th\n\n\n9\n77\nBelow 50th\n\n\n76\n77\nBelow 50th\n\n\n29\n78\nBelow 50th\n\n\n88\n78\nBelow 50th\n\n\n22\n78\nBelow 50th\n\n\n3\n78\nBelow 50th\n\n\n53\n79\nBelow 50th\n\n\n38\n79\nBelow 50th\n\n\n49\n80\nBelow 50th\n\n\n10\n80\nBelow 50th\n\n\n85\n80\nBelow 50th\n\n\n78\n80\nBelow 50th\n\n\n72\n80\nBelow 50th\n\n\n46\n80\nBelow 50th\n\n\n96\n81\nBelow 50th\n\n\n98\n81\nBelow 50th\n\n\n47\n81\nBelow 50th\n\n\n91\n81\nBelow 50th\n\n\n65\n81\nBelow 50th\n\n\n19\n81\nBelow 50th\n\n\n21\n82\nBelow 50th\n\n\n12\n82\nBelow 50th\n\n\n36\n82\nBelow 50th\n\n\n93\n83\nBelow 50th\n\n\n84\n83\nBelow 50th\n\n\n30\n83\nBelow 50th\n\n\n7\n83\nBelow 50th\n\n\n55\n83\nBelow 50th\n\n\n16\n83\nBelow 50th\n\n\n92\n84\nBelow 50th\n\n\n8\n84\nBelow 50th\n\n\n82\n84\nBelow 50th\n\n\n77\n84\nBelow 50th\n\n\n28\n85\nBelow 50th\n\n\n89\n85\nBelow 50th\n\n\n4\n86\nQ2 (~ 86.5)\n\n\n48\n86\nQ2 (~ 86.5)\n\n\n54\n87\nQ2 (~ 86.5)\n\n\n58\n87\nQ2 (~ 86.5)\n\n\n11\n87\nQ2 (~ 86.5)\n\n\n66\n87\nQ2 (~ 86.5)\n\n\n31\n87\nQ2 (~ 86.5)\n\n\n81\n87\nQ2 (~ 86.5)\n\n\n59\n88\nAbove 50th\n\n\n25\n88\nAbove 50th\n\n\n27\n88\nAbove 50th\n\n\n23\n88\nAbove 50th\n\n\n83\n89\nAbove 50th\n\n\n60\n90\nAbove 50th\n\n\n37\n90\nAbove 50th\n\n\n63\n90\nAbove 50th\n\n\n86\n90\nAbove 50th\n\n\n13\n90\nAbove 50th\n\n\n34\n90\nAbove 50th\n\n\n94\n91\nAbove 50th\n\n\n64\n91\nAbove 50th\n\n\n42\n91\nAbove 50th\n\n\n75\n91\nAbove 50th\n\n\n67\n91\nAbove 50th\n\n\n69\n92\nAbove 50th\n\n\n39\n92\nAbove 50th\n\n\n1\n92\nAbove 50th\n\n\n20\n92\nAbove 50th\n\n\n56\n92\nAbove 50th\n\n\n61\n93\nAbove 50th\n\n\n68\n93\nAbove 50th\n\n\n26\n93\nAbove 50th\n\n\n24\n94\nAbove 50th\n\n\n17\n94\nAbove 50th\n\n\n57\n95\nAbove 50th\n\n\n73\n95\nAbove 50th\n\n\n43\n95\nAbove 50th\n\n\n50\n95\nAbove 50th\n\n\n80\n95\nAbove 50th\n\n\n74\n96\nAbove 50th\n\n\n15\n96\nAbove 50th\n\n\n52\n96\nAbove 50th\n\n\n44\n96\nAbove 50th\n\n\n5\n96\nAbove 50th\n\n\n32\n96\nAbove 50th\n\n\n33\n97\nAbove 50th\n\n\n97\n97\nAbove 50th\n\n\n41\n97\nAbove 50th\n\n\n45\n97\nAbove 50th\n\n\n95\n98\nAbove 50th\n\n\n79\n98\nAbove 50th\n\n\n87\n98\nAbove 50th\n\n\n\n\n\n\n\nSince there are 100 student scores (an even number), you will need to find the two middle positions 50 & 51 (e.i 86 and 87). So the Median = (86 + 87 / 2) = 86.5\n\n\n\n75th quantile (Q3 or third quartile):\nThe third quartile, denoted as Q3 or 75th quantile, is the value below which 75% of the data points fall, marking the 75th percentile.\nExample: Continuing with the class example, the 75th quantile score would be the score that 75 students scored at or below.\n\n\n\nR\n\n1quantile(x = student_test_score, probs = 0.75, names = TRUE)\n\n\n\n1\n\nGet the 75th quantile using the quantile() function.\n\n\n\n\n75% \n 92 \n\n\n\n\n18.1.4.4 Quick illustration:\n\n\n\n\n\n\n\n\nThird Quantile Test Scores\n\n\n75% of datapoint\n\n\nStudent Id\nStudent Test Score\nQuantile\n\n\n\n\n14\n75\nQ3 (&lt;= 92)\n\n\n35\n75\nQ3 (&lt;= 92)\n\n\n6\n75\nQ3 (&lt;= 92)\n\n\n100\n75\nQ3 (&lt;= 92)\n\n\n18\n76\nQ3 (&lt;= 92)\n\n\n2\n76\nQ3 (&lt;= 92)\n\n\n70\n76\nQ3 (&lt;= 92)\n\n\n40\n76\nQ3 (&lt;= 92)\n\n\n99\n76\nQ3 (&lt;= 92)\n\n\n90\n76\nQ3 (&lt;= 92)\n\n\n62\n77\nQ3 (&lt;= 92)\n\n\n51\n77\nQ3 (&lt;= 92)\n\n\n71\n77\nQ3 (&lt;= 92)\n\n\n9\n77\nQ3 (&lt;= 92)\n\n\n76\n77\nQ3 (&lt;= 92)\n\n\n29\n78\nQ3 (&lt;= 92)\n\n\n88\n78\nQ3 (&lt;= 92)\n\n\n22\n78\nQ3 (&lt;= 92)\n\n\n3\n78\nQ3 (&lt;= 92)\n\n\n53\n79\nQ3 (&lt;= 92)\n\n\n38\n79\nQ3 (&lt;= 92)\n\n\n49\n80\nQ3 (&lt;= 92)\n\n\n10\n80\nQ3 (&lt;= 92)\n\n\n85\n80\nQ3 (&lt;= 92)\n\n\n78\n80\nQ3 (&lt;= 92)\n\n\n72\n80\nQ3 (&lt;= 92)\n\n\n46\n80\nQ3 (&lt;= 92)\n\n\n96\n81\nQ3 (&lt;= 92)\n\n\n98\n81\nQ3 (&lt;= 92)\n\n\n47\n81\nQ3 (&lt;= 92)\n\n\n91\n81\nQ3 (&lt;= 92)\n\n\n65\n81\nQ3 (&lt;= 92)\n\n\n19\n81\nQ3 (&lt;= 92)\n\n\n21\n82\nQ3 (&lt;= 92)\n\n\n12\n82\nQ3 (&lt;= 92)\n\n\n36\n82\nQ3 (&lt;= 92)\n\n\n93\n83\nQ3 (&lt;= 92)\n\n\n84\n83\nQ3 (&lt;= 92)\n\n\n30\n83\nQ3 (&lt;= 92)\n\n\n7\n83\nQ3 (&lt;= 92)\n\n\n55\n83\nQ3 (&lt;= 92)\n\n\n16\n83\nQ3 (&lt;= 92)\n\n\n92\n84\nQ3 (&lt;= 92)\n\n\n8\n84\nQ3 (&lt;= 92)\n\n\n82\n84\nQ3 (&lt;= 92)\n\n\n77\n84\nQ3 (&lt;= 92)\n\n\n28\n85\nQ3 (&lt;= 92)\n\n\n89\n85\nQ3 (&lt;= 92)\n\n\n4\n86\nQ3 (&lt;= 92)\n\n\n48\n86\nQ3 (&lt;= 92)\n\n\n54\n87\nQ3 (&lt;= 92)\n\n\n58\n87\nQ3 (&lt;= 92)\n\n\n11\n87\nQ3 (&lt;= 92)\n\n\n66\n87\nQ3 (&lt;= 92)\n\n\n31\n87\nQ3 (&lt;= 92)\n\n\n81\n87\nQ3 (&lt;= 92)\n\n\n59\n88\nQ3 (&lt;= 92)\n\n\n25\n88\nQ3 (&lt;= 92)\n\n\n27\n88\nQ3 (&lt;= 92)\n\n\n23\n88\nQ3 (&lt;= 92)\n\n\n83\n89\nQ3 (&lt;= 92)\n\n\n60\n90\nQ3 (&lt;= 92)\n\n\n37\n90\nQ3 (&lt;= 92)\n\n\n63\n90\nQ3 (&lt;= 92)\n\n\n86\n90\nQ3 (&lt;= 92)\n\n\n13\n90\nQ3 (&lt;= 92)\n\n\n34\n90\nQ3 (&lt;= 92)\n\n\n94\n91\nQ3 (&lt;= 92)\n\n\n64\n91\nQ3 (&lt;= 92)\n\n\n42\n91\nQ3 (&lt;= 92)\n\n\n75\n91\nQ3 (&lt;= 92)\n\n\n67\n91\nQ3 (&lt;= 92)\n\n\n69\n92\nQ3 (&lt;= 92)\n\n\n39\n92\nQ3 (&lt;= 92)\n\n\n1\n92\nQ3 (&lt;= 92)\n\n\n20\n92\nQ3 (&lt;= 92)\n\n\n56\n92\nQ3 (&lt;= 92)\n\n\n61\n93\nAbove 75th\n\n\n68\n93\nAbove 75th\n\n\n26\n93\nAbove 75th\n\n\n24\n94\nAbove 75th\n\n\n17\n94\nAbove 75th\n\n\n57\n95\nAbove 75th\n\n\n73\n95\nAbove 75th\n\n\n43\n95\nAbove 75th\n\n\n50\n95\nAbove 75th\n\n\n80\n95\nAbove 75th\n\n\n74\n96\nAbove 75th\n\n\n15\n96\nAbove 75th\n\n\n52\n96\nAbove 75th\n\n\n44\n96\nAbove 75th\n\n\n5\n96\nAbove 75th\n\n\n32\n96\nAbove 75th\n\n\n33\n97\nAbove 75th\n\n\n97\n97\nAbove 75th\n\n\n41\n97\nAbove 75th\n\n\n45\n97\nAbove 75th\n\n\n95\n98\nAbove 75th\n\n\n79\n98\nAbove 75th\n\n\n87\n98\nAbove 75th\n\n\n\n\n\n\n\n\n\n18.1.4.5 In summary\n\n\n\n\n\n\n\n\nQuartile\nQuantile Value\nPercentile\nDescription\n\n\n\n\nQ1\n0.25\n25th\nMarks the point where 25% of data falls below\n\n\nQ2\n0.50\n50th\nRepresents the median where half of data lies below\n\n\nQ3\n0.75\n75th\nIndicates where 75% of data falls below\n\n\n\n\n\n\n\n\n\n\n\nR\n\n## All calculation\n1quantile(student_test_score, probs = c(0.25, 0.5, 0.75))\n\n\n\n1\n\nGet the 25th, 50th and 75th quantile\n\n\n\n\n 25%  50%  75% \n80.0 86.5 92.0 \n\n\nThese quantiles provide valuable insights into how data is distributed and can help identify trends or outliers and potential skewness within datasets.\n \n\n\n\n18.1.5 Binning values into groups\nThe cut() function is a tool used to convert continuous numerical data into categorical data by dividing the range of the data into intervals or “bins.”\n\n\n\nR\n\n1test_scores &lt;- c(55, 83, 69, 92, 48, 76, 88, 95, 60)\n\n# Categorize test scores into bins\ncut(\n  x = test_scores, \n  breaks = c(0, 60, 80, 100), \n  labels = c(\"Low\", \"Moderate\", \"High\"), \n  include.lowest = TRUE\n)\n\n\n\n1\n\nCreate a vector of test scores\n\n\n\n\n[1] Low      High     Moderate High     Low      Moderate High     High    \n[9] Low     \nLevels: Low Moderate High\n\n\n\nx: A numeric vector that you want to categorize. For example the test_scores\nbreaks: A specification for the breakpoints between categories. Here we define specific break points (0 - 60 for “Low”, 61 - 80 for “Moderate”, and 81 - 100 for “High”).\nlabels: These are the labels assigned to each bin.\ninclude.lowest: This argument determines whether or not to include the lowest value in your first interval. If set to TRUE and your breaks are defined such that they start above your minimum value in x, then this minimum value will still be included in that first category. In this case, since include.lowest is TRUE and we have defined our breaks starting at 0 (which is also our minimum value), any values equal to or greater than 0 will be included in that first bin.\n\n\n\n\n\n\n\n\n\ntest_scores\ncategory\nbins\n\n\n\n\n48\nLow\n[0,60]\n\n\n55\nLow\n[0,60]\n\n\n60\nLow\n[0,60]\n\n\n69\nMedium\n(60,80]\n\n\n76\nMedium\n(60,80]\n\n\n83\nHigh\n(80,100]\n\n\n88\nHigh\n(80,100]\n\n\n92\nHigh\n(80,100]\n\n\n95\nHigh\n(80,100]\n\n\n\n\n\n\n\n\n\n18.1.6 Metric Binning Methods\n\n18.1.6.1 Quantile Binning\nThe quantile-based approach offers a great binning methods when dealing with uneven data distributions. Quantiles divide the data so that each bin contains approximately the same number of observations e.g., quartiles ensure 25% of data points fall into each bin which prevents the issue of having some bins with very few or no data points. Also, When data is skewed like customer Recency and monetary values, quantiles ensure a more even distribution of observations across bins, improving the usability of segmentation. Finally, Quantile-based binning is data-driven, automatically dividing the data without requiring domain-specific decisions.\nFor Example:\n\n\n\nR\n\n1r_qtl &lt;- rfm_df |&gt;\n  summarise(\n2    Q_25 = quantile(recency, 0.25, names = FALSE),\n3    Q_50 = quantile(recency, 0.50, names = FALSE),\n4    Q_75 = quantile(recency, 0.75, names = FALSE)\n  ) |&gt;\n5  as.list()\n\nr_qtl\n\n\n\n1\n\nA data frame containing the calculated customer Recency, Frequency and Monetary values.\n\n2\n\nGet the 1st quantile (25%) of the recency value (days)\n\n3\n\nGet the 2nd quantile (50%) of the recency value (days)\n\n4\n\nGet the 3rd quantile (75%) of the recency value (days)\n\n5\n\nConvert the data frame to a list.\n\n\n\n\n\n\n$Q_25\n[1] 45\n\n$Q_50\n[1] 106\n\n$Q_75\n[1] 210.5\n\n\nWorking with a specific set of score threshold e.i 1 to 4, where 1 is considered the worst score and 4 is considered the best score:\n\n\n\nR\n\nrfm_df |&gt;\n  mutate(\n1    r_score = case_when(\n2      recency &lt;= r_qtl$Q_25 ~ 4,\n3      recency &lt;= r_qtl$Q_50 ~ 3,\n4      recency &lt;= r_qtl$Q_75 ~ 2,\n5      .default = 1\n    )\n  )\n\n\n\n1\n\nCreate a new column called r_score to store the Recency scores.\n\n2\n\nRecency values below or equal to the 1st quantile will be assigned the value 4\n\n3\n\nRecency values below or equal to the 2nd quantile will be assigned the value 3\n\n4\n\nRecency values below or equal to the 3rd quantile will be assigned the value 2\n\n5\n\nRecency above the 3rd quantile will be assigned the value 1\n\n\n\n\n\n\nQuick illustration\n\n\n\n\n\n\n\n\nCustomer Recency Score\n\n\n4: Best, 1: Worst\n\n\ncustomer_id\nrecency\nvalue_section\nr_score\n\n\n\n\n1\n1 days\nQ1 (&lt;=17.75) minimum\n4\n\n\n2\n1 days\nQ1 (&lt;=17.75) minimum\n4\n\n\n3\n1 days\nQ1 (&lt;=17.75) minimum\n4\n\n\n4\n1 days\nQ1 (&lt;=17.75) minimum\n4\n\n\n5\n2 days\nQ1 (&lt;=17.75)\n4\n\n\n6\n3 days\nQ1 (&lt;=17.75)\n4\n\n\n7\n3 days\nQ1 (&lt;=17.75)\n4\n\n\n8\n3 days\nQ1 (&lt;=17.75)\n4\n\n\n9\n7 days\nQ1 (&lt;=17.75)\n4\n\n\n10\n8 days\nQ1 (&lt;=17.75)\n4\n\n\n11\n9 days\nQ1 (&lt;=17.75)\n4\n\n\n12\n9 days\nQ1 (&lt;=17.75)\n4\n\n\n13\n9 days\nQ1 (&lt;=17.75)\n4\n\n\n14\n9 days\nQ1 (&lt;=17.75)\n4\n\n\n15\n9 days\nQ1 (&lt;=17.75)\n4\n\n\n16\n10 days\nQ1 (&lt;=17.75)\n4\n\n\n17\n10 days\nQ1 (&lt;=17.75)\n4\n\n\n18\n11 days\nQ1 (&lt;=17.75)\n4\n\n\n19\n12 days\nQ1 (&lt;=17.75)\n4\n\n\n20\n14 days\nQ1 (&lt;=17.75)\n4\n\n\n21\n15 days\nQ1 (&lt;=17.75)\n4\n\n\n22\n16 days\nQ1 (&lt;=17.75)\n4\n\n\n23\n16 days\nQ1 (&lt;=17.75)\n4\n\n\n24\n16 days\nQ1 (&lt;=17.75)\n4\n\n\n25\n17 days\nQ1 (&lt;=17.75)\n4\n\n\n26\n18 days\nQ2 (&lt;=33.5)\n3\n\n\n27\n18 days\nQ2 (&lt;=33.5)\n3\n\n\n28\n18 days\nQ2 (&lt;=33.5)\n3\n\n\n29\n19 days\nQ2 (&lt;=33.5)\n3\n\n\n30\n20 days\nQ2 (&lt;=33.5)\n3\n\n\n31\n22 days\nQ2 (&lt;=33.5)\n3\n\n\n32\n22 days\nQ2 (&lt;=33.5)\n3\n\n\n33\n22 days\nQ2 (&lt;=33.5)\n3\n\n\n34\n23 days\nQ2 (&lt;=33.5)\n3\n\n\n35\n23 days\nQ2 (&lt;=33.5)\n3\n\n\n36\n24 days\nQ2 (&lt;=33.5)\n3\n\n\n37\n24 days\nQ2 (&lt;=33.5)\n3\n\n\n38\n25 days\nQ2 (&lt;=33.5)\n3\n\n\n39\n25 days\nQ2 (&lt;=33.5)\n3\n\n\n40\n25 days\nQ2 (&lt;=33.5)\n3\n\n\n41\n25 days\nQ2 (&lt;=33.5)\n3\n\n\n42\n27 days\nQ2 (&lt;=33.5)\n3\n\n\n43\n27 days\nQ2 (&lt;=33.5)\n3\n\n\n44\n28 days\nQ2 (&lt;=33.5)\n3\n\n\n45\n30 days\nQ2 (&lt;=33.5)\n3\n\n\n46\n31 days\nQ2 (&lt;=33.5)\n3\n\n\n47\n32 days\nQ2 (&lt;=33.5)\n3\n\n\n48\n32 days\nQ2 (&lt;=33.5)\n3\n\n\n49\n33 days\nQ2 (&lt;=33.5)\n3\n\n\n50\n33 days\nQ2 (&lt;=33.5)\n3\n\n\n51\n34 days\nQ3 (&lt;=94.25)\n2\n\n\n52\n34 days\nQ3 (&lt;=94.25)\n2\n\n\n53\n34 days\nQ3 (&lt;=94.25)\n2\n\n\n54\n35 days\nQ3 (&lt;=94.25)\n2\n\n\n55\n35 days\nQ3 (&lt;=94.25)\n2\n\n\n56\n35 days\nQ3 (&lt;=94.25)\n2\n\n\n57\n37 days\nQ3 (&lt;=94.25)\n2\n\n\n58\n37 days\nQ3 (&lt;=94.25)\n2\n\n\n59\n38 days\nQ3 (&lt;=94.25)\n2\n\n\n60\n40 days\nQ3 (&lt;=94.25)\n2\n\n\n61\n42 days\nQ3 (&lt;=94.25)\n2\n\n\n62\n44 days\nQ3 (&lt;=94.25)\n2\n\n\n63\n45 days\nQ3 (&lt;=94.25)\n2\n\n\n64\n47 days\nQ3 (&lt;=94.25)\n2\n\n\n65\n64 days\nQ3 (&lt;=94.25)\n2\n\n\n66\n66 days\nQ3 (&lt;=94.25)\n2\n\n\n67\n69 days\nQ3 (&lt;=94.25)\n2\n\n\n68\n71 days\nQ3 (&lt;=94.25)\n2\n\n\n69\n72 days\nQ3 (&lt;=94.25)\n2\n\n\n70\n76 days\nQ3 (&lt;=94.25)\n2\n\n\n71\n80 days\nQ3 (&lt;=94.25)\n2\n\n\n72\n82 days\nQ3 (&lt;=94.25)\n2\n\n\n73\n86 days\nQ3 (&lt;=94.25)\n2\n\n\n74\n87 days\nQ3 (&lt;=94.25)\n2\n\n\n75\n93 days\nQ3 (&lt;=94.25)\n2\n\n\n76\n98 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n77\n102 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n78\n106 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n79\n110 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n80\n111 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n81\n112 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n82\n115 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n83\n124 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n84\n132 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n85\n138 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n86\n148 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n87\n149 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n88\n151 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n89\n152 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n90\n161 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n91\n163 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n92\n164 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n93\n169 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n94\n175 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n95\n177 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n96\n182 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n97\n183 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n98\n184 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n99\n193 days\nAbove Q3 (&gt; 94.25)\n1\n\n\n100\n195 days\nAbove Q3 (&gt; 94.25) maximum\n1\n\n\n\n\n\n\n\n\n\n18.1.6.2 Equal Interval Binning\nThis method divides the range of values into intervals of equal size (width), in other words, each bin has the same difference between the minimum and maximum value.\nExample:\n\n\n\nR\n\n1r_range  &lt;- range(rfm_df$recency, na.rm = TRUE)\n2r_bin_width &lt;- (r_range[2] - r_range[1]) / 4\n\n3rfm_df |&gt;\n  mutate(\n4    r_score = cut(\n      x = recency, \n5      breaks = seq(r_range[1], r_range[2], by = r_bin_width),\n6      include.lowest = TRUE,\n7      labels = c(4, 3, 2, 1)\n    )\n  )\n\n\n\n1\n\nGet the minimum and maximum recency value\n\n2\n\nThe total range of the data is divided into 4 equal parts.\n\n3\n\nA data frame containing the calculated customer Recency, Frequency and Monetary values.\n\n4\n\nCreate a new column called r_score to store the Recency scores.\n\n5\n\nAdd an equal binned interval, regardless of how the data is distributed within those intervals.\n\n6\n\nInclued the minimum value.\n\n7\n\nCreate a default set of labels, 4 = Most recent, 1 = least recent\n\n\n\n\nThe equal interval binning method can be very helpful when the data is uniformly distributed or when you need evenly spaced bins for comparison.\n\n\n18.1.6.3 Fixed Number of Bins\nThis method divides the data into a specified number of bins, with approximately equal-sized groups based on the range of values. It is similar to equal interval binning, but the intervals are determined automatically.\nExample:\n\n\n\nR\n\n1rfm_df |&gt;\n  mutate( \n2    r_score = cut(\n      recency,\n3      breaks = 4,\n4      labels = c(4, 3, 2, 1)\n    )\n  )\n\n\n\n1\n\nA data frame containing the calculated customer Recency, Frequency and Monetary values.\n\n2\n\nCreate a new column called r_score to store the Recency scores.\n\n3\n\nAutomatically determine the bins using the cut() function which will divide the range into approximately equal-sized intervals.\n\n4\n\nCreate a default set of labels, 4 = Most recent, 1 = least recent\n\n\n\n\nThe fixed number of bins method is suitable when you know how many segments you want but don’t care about specific ranges or thresholds. or you don’t have specific business rules.\n\n\n18.1.6.4 Custom Ranges Binning\nIn this approach, bins are defined manually based on business logic, domain knowledge, or other meaningful thresholds. Each bin contains values that meet specific, pre-defined conditions.\nExample:\n\n\n\nR\n\n1rfm_df |&gt;\n  mutate( \n2    r_score = case_when(\n3      recency &lt;= 20 ~ 4,\n4      recency &lt;= 50 ~ 3,\n5      recency &lt;= 80 ~ 2,\n6      .default = 1\n    )\n  )\n\n\n\n1\n\nA data frame containing the calculated customer Recency, Frequency and Monetary values.\n\n2\n\nCreate a new column called r_score to store the Recency scores.\n\n3\n\nRecency values below or equal to 20 will be assigned the value 4.\n\n4\n\nRecency values below or equal to 50 will be assigned the value 3.\n\n5\n\nRecency values below or equal to 80 will be assigned the value 2.\n\n6\n\nRecency above the 80 will be assigned the value 1.\n\n\n\n\n\n\n18.1.6.5 Comparison between Binning Methods\n\n\n\n\n\n\n\n\nMethod\nStrengths\nLimitations\n\n\n\n\nQuantile Binning\nBalanced bins, good for skewed data\nBin boundaries can be less intuitive\n\n\nEqual Interval Binning\nSimple, intuitive, evenly spaced bins\nSkewed data results in empty or uneven bins\n\n\nFixed Number of Bins\nEasy to implement, fast segmentation\nBins may not align with data distribution\n\n\nCustom Ranges Binning\nReflects business logic, highly customizable\nRequires domain knowledge and manual setup\n\n\n\n\n\n\n\n\n\n\n18.1.7 Significance of RFM Analysis\n\nSegmentation: Businesses can segment customers into different groups based on their RFM scores (e.g., high recency, high frequency, high monetary value). This segmentation enables tailored marketing strategies for each group.\nTargeted Marketing Campaigns: By understanding which customers are most engaged (high recency), loyal (high frequency), and profitable (high monetary value), companies can create targeted campaigns that resonate with specific segments.\nCustomer Retention Strategies: Identifying at-risk customers (low recency) allows businesses to implement retention strategies before they churn, such as re-engagement campaigns or special offers.\nResource Allocation: RFM analysis helps allocate marketing resources efficiently by focusing efforts on high-value segments that yield the best return on investment.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Project Concept</span>"
    ]
  },
  {
    "objectID": "r_project.html#cluster-analysis",
    "href": "r_project.html#cluster-analysis",
    "title": "18  Project Concept",
    "section": "18.2 Cluster Analysis",
    "text": "18.2 Cluster Analysis\nCluster analysis is a statistical technique used for grouping data points into clusters based on their similarity. In other words, the goal of cluster analysis is to partition a dataset into distinct groups where the members of each group are more similar to each other than to those in other groups.\n\n18.2.1 K-Means Clustering Overview\nK-means clustering is one of the simplest and most popular unsupervised machine learning algorithms. It partitions the data into K distinct clusters based on feature similarity. The algorithm works as follows: After making sure the dataset is free of any missing value and normalized to ensure each feature contributes equally to the clustering results;\n\nInitialization: Choose the number of clusters (K) you want to identify in your dataset.\nAssignment Step: Assign each data point to the nearest centroid based on a distance metric (commonly Euclidean distance). This creates K clusters.\nUpdate Step: Calculate new centroids by taking the mean of all data points assigned to each cluster.\nRepeat Steps 2 and 3: Continue iterating through the assignment and update steps until convergence, which occurs when assignments no longer change or when a maximum number of iterations is reached.\n\n\n\n\nclusters with their respective centroids\n\n\n\n18.2.1.1 Understanding Cluster Centers\nThe centers (or centroids) of clusters are critical in K-means clustering as they represent the average position of all points within a cluster in multi-dimensional space.\n\n\n18.2.1.2 Implementing K-Means in R\n\nPreprocess Data: Normalize or scale your data if necessary, especially if features have different units or scales. This is to ensure each feature contributes equally to the clustering result.\n\n\n\n\nR\n\nscaled_iris &lt;- select(iris, -Species) |&gt; scale()\n\n\n\nRun K-Means Algorithm:\n\n\n\n\nR\n\n1set.seed(123)\n\n2kmeans_result &lt;- kmeans(scaled_iris, centers = 3)\n\n\n\n1\n\nSet seed for reproducibility of the algorithm output.\n\n2\n\nUse the kmeans() to partition the dataset into three groups.\n\n\n\n\n\n\n\nR\n\n# Check cluster assignments\n1print(kmeans_result$cluster)\n\n\n\n1\n\nGet each record’s cluster or group.\n\n\n\n\n  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 2 2 3 2 2 2 2 2 2 2 2 3 2 2 2 2 3 2 2 2\n [75] 2 3 3 3 2 2 2 2 2 2 2 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 3 3 3 3 2 3 3 3 3\n[112] 3 3 2 2 3 3 3 3 2 3 2 3 2 3 3 2 3 3 3 3 3 3 2 2 3 3 3 2 3 3 3 2 3 3 3 2 3\n[149] 3 2\n\n\n\n\n\nR\n\n# View centroids\n1print(kmeans_result$centers)\n\n\n\n1\n\nGet the centers of each cluster or group\n\n\n\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width\n1  -1.01119138  0.85041372   -1.3006301  -1.2507035\n2  -0.05005221 -0.88042696    0.3465767   0.2805873\n3   1.13217737  0.08812645    0.9928284   1.0141287\n\n\n\n\n\nR\n\nscaled_iris &lt;- as_tibble(scaled_iris) |&gt;\n1  mutate(cluster = kmeans_result$cluster)\n\n2head(scaled_iris)\n\n\n\n1\n\nCreate a new column called cluster to store the generated clusters.\n\n2\n\nRetrieve the first 5 rows.\n\n\n\n\n# A tibble: 6 × 5\n  Sepal.Length Sepal.Width Petal.Length Petal.Width cluster\n         &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt;   &lt;int&gt;\n1       -0.898      1.02          -1.34       -1.31       1\n2       -1.14      -0.132         -1.34       -1.31       1\n3       -1.38       0.327         -1.39       -1.31       1\n4       -1.50       0.0979        -1.28       -1.31       1\n5       -1.02       1.25          -1.34       -1.31       1\n6       -0.535      1.93          -1.17       -1.05       1\n\n\n\n\n\nR\n\nscaled_iris |&gt;\n  ggplot(aes(x = Sepal.Length, y = Sepal.Width, color = factor(cluster))) +\n  geom_point() +\n  geom_point(\n    data = kmeans_result$centers, \n    aes(x = Sepal.Length, y = Sepal.Width),\n    size = 5,\n    color = \"red\"\n  ) +\n  labs(\n    x = \"Sepal Length\",\n    y = \"Sepal Width\",\n    title = \"Relationship Between Sepal Length & Width for Each Cluster\",\n    color = \"Cluster\"\n  ) +\n  theme_light()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant Considerations\n\n\n\nWhen performing K-means clustering, keep these key points in mind:\n\nChoosing K: Selecting an appropriate value for K can be challenging; methods such as the Elbow Method or Silhouette Analysis can help determine an optimal number of clusters.\nDistance Metric Choice: The choice of distance metric affects clustering results; while Euclidean distance is common, other metrics may be more suitable for specific datasets.\nScalability Issues: K-means may struggle with very large datasets due to its computational complexity.\nAssumption of Spherical Clusters: K-means assumes that clusters are spherical and equally sized; it may not perform well with non-globular shapes or varying densities.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Project Concept</span>"
    ]
  },
  {
    "objectID": "r_project.html#forecasting",
    "href": "r_project.html#forecasting",
    "title": "18  Project Concept",
    "section": "18.3 Forecasting",
    "text": "18.3 Forecasting",
    "crumbs": [
      "R",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Project Concept</span>"
    ]
  },
  {
    "objectID": "tool_source.html",
    "href": "tool_source.html",
    "title": "21  Data Tool Referenece",
    "section": "",
    "text": "21.1 SQL",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Data Tool Referenece</span>"
    ]
  },
  {
    "objectID": "tool_source.html#sql",
    "href": "tool_source.html#sql",
    "title": "21  Data Tool Referenece",
    "section": "",
    "text": "21.1.1 Key concepts of normalization\nNormalization is achieved through various “normal forms,” each with specific rules to ensure better database design. The main normal forms are:\n\nFirst Normal Form (1NF)\nThe goal of the first normal form is to ensure that each column contains only atomic (indivisible) values, and each row is unique.\n\n\n\n\n\n\nRules\n\n\n\n\n\n\nRemove duplicate columns: Each column must be unique and represent a single attribute.\nEnsure each column is atomic: No repeating groups or arrays. For example, you shouldn’t have a column with multiple phone numbers separated by commas.\nEnsure each row is unique: Use a primary key to uniquely identify each row.\n\n\n\n\n\nExample\nBefore 1NF:\n\n\n\n\n\n  \n    \n      student_id\n      name\n      subjects\n    \n  \n  \n    1\nMary\nMath, Science\n    2\nPaul\nMath, English\n  \n  \n  \n\n\n\n\nAfter 1NF:\n\n\n\n\n\n  \n    \n      student_id\n      name\n      subject\n    \n  \n  \n    1\nMary\nMath\n    1\nMary\nScience\n    2\nPaul\nMath\n    2\nPaul\nEnglish\n  \n  \n  \n\n\n\n\n\n\n\n\nSecond Normal Form (2NF)\nThe aim of the second normal form is to ensure that all non-key attributes are fully dependent on the primary key.\n\n\n\n\n\n\nRules\n\n\n\n\n\n\nBe in 1NF: The table must first satisfy all the requirements of 1NF.\nRemove partial dependencies: Each non-key attribute must depend on the whole primary key, not just part of it. This usually means removing data that doesn’t depend entirely on the primary key into a separate table.\n\n\n\n\n\nExample\nBefore 2NF:\n\n\n\n\n\n  \n    \n      order_id\n      product_id\n      product_name\n      quantity\n    \n  \n  \n    101\n1\nLaptop\n5\n    102\n2\nPhone\n8\n  \n  \n  \n\n\n\n\nThe problem here is that product_name depends only on product_id, not the whole primary key (order_id, product_id).\nAfter 2NF:\nOrders Table:\n\n\n\n\n\n  \n    \n      order_id\n      product_id\n      quantity\n    \n  \n  \n    101\n1\n5\n    102\n2\n8\n  \n  \n  \n\n\n\n\nProduct Table:\n\n\n\n\n\n  \n    \n      product_id\n      product_name\n    \n  \n  \n    1\nLaptop\n    2\nPhone\n  \n  \n  \n\n\n\n\n\n\n\n\nThird Normal Form (3NF)\nThe Thrid normal form goal is to ensure that all non-key attributes are not only fully dependent on the primary key but are also independent of each other.\n\n\n\n\n\n\nRules\n\n\n\n\n\n\nBe in 2NF: The table must first satisfy all the requirements of 2NF.\nRemove transitive dependencies: Non-key attributes should not depend on other non-key attributes.\n\n\n\n\n\nExample\nBefore 3NF:\n\n\n\n\n\n  \n    \n      employee_id\n      name\n      department\n      department_head\n    \n  \n  \n    1\nMary\nAccounting\nTom\n    2\nPaul\nIT\nBenjamin\n  \n  \n  \n\n\n\n\nThe problem here is that the department_head depends on department, not on employee_id.\nAfter 3NF:\nEmployee Table:\n\n\n\n\n\n  \n    \n      employee_id\n      name\n      department\n    \n  \n  \n    1\nMary\nAccounting\n    2\nPaul\nIT\n  \n  \n  \n\n\n\n\nDepartment Table:\n\n\n\n\n\n  \n    \n      department\n      department_head\n    \n  \n  \n    Accounting\nTom\n    IT\nBenjamin\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\nWhen not to normalize too much\n\n\n\nWhile normalization is essential, over-normalization can lead to:\n\nComplex queries: Highly normalized tables may require complex joins.\nPerformance hits: Excessive joins can slow down query performance.\n\n\n\n \n\n\n\n\n21.1.2 Data types\n\n\n\n\n\n\n\n\n\n\n\nFigure 21.1",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Data Tool Referenece</span>"
    ]
  },
  {
    "objectID": "sql_programming.html",
    "href": "sql_programming.html",
    "title": "SQL",
    "section": "",
    "text": "Structured Query Language",
    "crumbs": [
      "SQL"
    ]
  },
  {
    "objectID": "sql_programming.html#structured-query-language",
    "href": "sql_programming.html#structured-query-language",
    "title": "SQL",
    "section": "",
    "text": "You have a bunch of books, and you want to find a specific one. To do this, you might look through the catalog, which is like a database. SQL is the language you can use to “ask” the database questions.",
    "crumbs": [
      "SQL"
    ]
  },
  {
    "objectID": "sql_programming.html#outline",
    "href": "sql_programming.html#outline",
    "title": "SQL",
    "section": "Outline",
    "text": "Outline\n\nCreating database and tables\nData query statement\nWorking with text data\nWorking with date data\nData cleaning in SQL\nGrouping data and using window functions\nSQL joins\nSubqueries and Common table expressions (CTEs)",
    "crumbs": [
      "SQL"
    ]
  },
  {
    "objectID": "r_programming.html",
    "href": "r_programming.html",
    "title": "R",
    "section": "",
    "text": "R Programming Language",
    "crumbs": [
      "R"
    ]
  },
  {
    "objectID": "r_programming.html#r-programming-language",
    "href": "r_programming.html#r-programming-language",
    "title": "R",
    "section": "",
    "text": "Introduction\nR is a powerful programming language and environment specifically designed for data analysis and statistical computing. It stands out as an essential tool for anyone involved in data analysis or statistics due to its comprehensive features, extensive community support, and flexibility across different platforms.\n\nKey Features of R\n\nComprehensive Statistical Analysis\nExtensive Packages and Libraries\nAdvanced Data Visualization\n\n\n\n\nHow to download R\n\nLink to download R: https://cran.r-project.org\nLink to download Rstudio: https://posit.co/download/rstudio-desktop/\n\n\n\nOutline\n\nBasics of R programming\nUnderstanding Data Structures\nVarious Operators in R\nIntroduction to the Tidyverse\nData Visualization\nData Exploration\nData Cleaning",
    "crumbs": [
      "R"
    ]
  },
  {
    "objectID": "python_programming.html",
    "href": "python_programming.html",
    "title": "Python",
    "section": "",
    "text": "Python Programming Language",
    "crumbs": [
      "Python"
    ]
  }
]